
Pong.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000223a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00802000  0000223a  000022ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002a3  00802054  00802054  00002322  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00002324  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000029f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002a87  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001e0  00000000  00000000  00002ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002fde  00000000  00000000  00002c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000009b4  00000000  00000000  00005c76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000bae  00000000  00000000  0000662a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000490  00000000  00000000  000071d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000161b  00000000  00000000  00007668  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000bf9  00000000  00000000  00008c83  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000170  00000000  00000000  0000987c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
       4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
       8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
       c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      10:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      14:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      18:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      1c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      20:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      24:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      28:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      2c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      30:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      34:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      38:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      3c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      40:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <__vector_16>
      44:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      48:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      4c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      50:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      54:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      58:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      5c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      60:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      64:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      68:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      6c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      70:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      74:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      78:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      7c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      80:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      84:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      88:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      8c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      90:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      94:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      98:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      9c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      bc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      ec:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      f0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      fc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     100:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     104:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     108:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     10c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     110:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     114:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     118:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     11c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     120:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     124:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     128:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     12c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     130:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     134:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     138:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     13c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     140:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     144:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     148:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     14c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     150:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     154:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     158:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     15c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     160:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     164:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     168:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     16c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     170:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     174:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     178:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     17c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     180:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     184:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     188:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     18c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     190:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     194:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     198:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     19c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1bc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1ec:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	d7 e2       	ldi	r29, 0x27	; 39
     204:	de bf       	out	0x3e, r29	; 62
     206:	cd bf       	out	0x3d, r28	; 61

00000208 <__do_copy_data>:
     208:	10 e2       	ldi	r17, 0x20	; 32
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b0 e2       	ldi	r27, 0x20	; 32
     20e:	ea e3       	ldi	r30, 0x3A	; 58
     210:	f2 e2       	ldi	r31, 0x22	; 34
     212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
     214:	05 90       	lpm	r0, Z+
     216:	0d 92       	st	X+, r0
     218:	a4 35       	cpi	r26, 0x54	; 84
     21a:	b1 07       	cpc	r27, r17
     21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
     21e:	22 e2       	ldi	r18, 0x22	; 34
     220:	a4 e5       	ldi	r26, 0x54	; 84
     222:	b0 e2       	ldi	r27, 0x20	; 32
     224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
     226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
     228:	a7 3f       	cpi	r26, 0xF7	; 247
     22a:	b2 07       	cpc	r27, r18
     22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
     22e:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <main>
     232:	0c 94 1b 11 	jmp	0x2236	; 0x2236 <_exit>

00000236 <__bad_interrupt>:
     236:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023a <_00110000001_>:
EXTERN reg_clyb;
EXTERN reg_flyab;
#endif
GLOBAL_FUNCTION _00110000001_
_00110000001_:
    push usr_1
     23a:	7f 93       	push	r23
    push usr_2
     23c:	9f 93       	push	r25
    sts	 CONCAT( PORT, PORT_YB, _OUTCLR ), p_1
     23e:	80 93 06 06 	sts	0x0606, r24
    sts	 CONCAT( PORT, PORT_YA, _OUTCLR ), p_2
     242:	60 93 26 06 	sts	0x0626, r22
    sts	 CONCAT( PORT, PORT_YB, _DIRSET ), p_1
     246:	80 93 01 06 	sts	0x0601, r24
    sts	 CONCAT( PORT, PORT_YA, _DIRSET ), p_2
     24a:	60 93 21 06 	sts	0x0621, r22
#if (NUM_X_PORTS>=1)
    sts  CONCAT( PORT, PORT_X_1, _OUTCLR  ), p_3
     24e:	40 93 46 06 	sts	0x0646, r20
    sts  CONCAT( PORT, PORT_X_1, _DIRSET  ), p_3
     252:	40 93 41 06 	sts	0x0641, r20
#endif
#if (NUM_X_PORTS>=3)
    sts  CONCAT( PORT, PORT_X_3, _OUTCLR  ), p_5
    sts  CONCAT( PORT, PORT_X_3, _DIRSET  ), p_5
#endif
    ldi  usr_1,SMP_BIT
     256:	70 e8       	ldi	r23, 0x80	; 128
    sts  CONCAT( PORT, PORT_SMP, _OUTCLR ),usr_1 
     258:	70 93 66 06 	sts	0x0666, r23
    sts  CONCAT( PORT, PORT_SMP,_DIRSET ), usr_1
     25c:	70 93 61 06 	sts	0x0661, r23
    pop  usr_2
     260:	9f 91       	pop	r25
    pop  usr_1
     262:	7f 91       	pop	r23
    ret
     264:	08 95       	ret

00000266 <_00110000100_>:
GLOBAL_FUNCTION _00110000100_
_00110000100_:
    push usr_1
     266:	7f 93       	push	r23
    push usr_2
     268:	9f 93       	push	r25
    lds   usr_1, CONCAT( PORT, PORT_YA, _DIR ) 
     26a:	70 91 20 06 	lds	r23, 0x0620
    lds   usr_2, CONCAT( PORT, PORT_YB, _DIR )
     26e:	90 91 00 06 	lds	r25, 0x0600
    sts   reg_clya, usr_1
     272:	70 93 eb 22 	sts	0x22EB, r23
    sts   reg_clyb, usr_2
     276:	90 93 ee 22 	sts	0x22EE, r25
    sts   reg_flya,  usr_1
     27a:	70 93 f5 22 	sts	0x22F5, r23
    sts   reg_flyb, usr_2
     27e:	90 93 ef 22 	sts	0x22EF, r25
    mov  usr_1, p_1
     282:	78 2f       	mov	r23, r24
    com  usr_1
     284:	70 95       	com	r23
    lds  usr_2, reg_flya
     286:	90 91 f5 22 	lds	r25, 0x22F5
    and  usr_2,usr_1
     28a:	97 23       	and	r25, r23
    sts  reg_flya, usr_2
     28c:	90 93 f5 22 	sts	0x22F5, r25
    mov  usr_1, p_2
     290:	76 2f       	mov	r23, r22
    com  usr_1
     292:	70 95       	com	r23
    lds  usr_2, reg_flyb
     294:	90 91 ef 22 	lds	r25, 0x22EF
    and  usr_2,usr_1
     298:	97 23       	and	r25, r23
    sts  reg_flyb, usr_2
     29a:	90 93 ef 22 	sts	0x22EF, r25
#if (SHARED_YAYB == 1) 
#elif (SHARED_YAYB == 0)
    clr  r_v
     29e:	88 27       	eor	r24, r24
	_00011001_
#elif (CLAMP_TO_DISCHARGE_TIME == 2)
	_00011001_
	_00011001_
#elif (CLAMP_TO_DISCHARGE_TIME == 3)
	_00011001_
     2a0:	00 00       	nop
	_00011001_
     2a2:	00 00       	nop
	_00011001_
     2a4:	00 00       	nop
	_10100001_
	_01101001_
	_00011001_
	_00011001_
#endif
    lds  usr_1, reg_flyb
     2a6:	70 91 ef 22 	lds	r23, 0x22EF
    sts  CONCAT( PORT, PORT_YB, _DIR ), usr_1 
     2aa:	70 93 00 06 	sts	0x0600, r23
    pop  usr_2
     2ae:	9f 91       	pop	r25
    pop  usr_1
     2b0:	7f 91       	pop	r23
    ret
     2b2:	08 95       	ret

000002b4 <_00110000010_>:
#if (NUM_X_PORTS>=1)
GLOBAL_FUNCTION _00110000010_
_00110000010_:
    push usr_1
     2b4:	7f 93       	push	r23
    push usr_2
     2b6:	9f 93       	push	r25
#if (SHARED_YAYB == 1)
    sts  CONCAT( PORT, PORT_YA, _DIR ), p_2
#elif (SHARED_YAYB == 0)         
    sts  CONCAT( PORT, PORT_YA, _DIR ), p_3 
     2b8:	40 93 20 06 	sts	0x0620, r20
#endif    
    sts  CONCAT( PORT, PORT_X_1, _OUTSET ), p_1  
     2bc:	80 93 45 06 	sts	0x0645, r24
	_00011001_
#elif (DELAY_PRECHARGE_TIME == 2)
	_00011001_
	_00011001_
#elif (DELAY_PRECHARGE_TIME == 3)
	_00011001_
     2c0:	00 00       	nop
	_00011001_
     2c2:	00 00       	nop
	_00011001_
     2c4:	00 00       	nop
	_10100010_
	_01101010_
	_00011001_
	_00011001_
#endif
    sts  CONCAT( PORT, PORT_YB, _DIR ), p_6 
     2c6:	e0 92 00 06 	sts	0x0600, r14
	_00011001_
#elif (DELAY_DWELL_TIME == 2)
	_00011001_
	_00011001_
#elif (DELAY_DWELL_TIME == 3)
	_00011001_
     2ca:	00 00       	nop
	_00011001_
     2cc:	00 00       	nop
	_00011001_
     2ce:	00 00       	nop
	_00011001_
#endif
#if (SHARED_YAYB == 1)
    sts  CONCAT( PORT, PORT_YB, _DIR ), p_2
#elif (SHARED_YAYB == 0)         
    sts  CONCAT( PORT, PORT_YB, _DIR ), p_4 
     2d0:	20 93 00 06 	sts	0x0600, r18
#endif
 
    sts  CONCAT( PORT, PORT_YA, _DIR ) , p_5
     2d4:	00 93 20 06 	sts	0x0620, r16
    sts  CONCAT( PORT, PORT_X_1, _OUTCLR ), p_1  
     2d8:	80 93 46 06 	sts	0x0646, r24
	_10100100_
	_01101100_
	_00011001_
	_00011001_
#endif
    pop  usr_2
     2dc:	9f 91       	pop	r25
    pop  usr_1
     2de:	7f 91       	pop	r23
    ret
     2e0:	08 95       	ret

000002e2 <_00110000011_>:
    
#endif /*NUM_X_PORTS==3*/ 

GLOBAL_FUNCTION _00110000011_
_00110000011_:
    push usr_3
     2e2:	5f 93       	push	r21
    ldi  usr_3,SMP_BIT
     2e4:	50 e8       	ldi	r21, 0x80	; 128
    sts  CONCAT( PORT, PORT_SMP, _DIRSET ),usr_3
     2e6:	50 93 61 06 	sts	0x0661, r21
    sts  CONCAT( PORT, PORT_SMP, _OUTSET ),usr_3 
     2ea:	50 93 65 06 	sts	0x0665, r21
    pop  usr_3
     2ee:	5f 91       	pop	r21
    ret
     2f0:	08 95       	ret

000002f2 <_00110000110_>:
   
GLOBAL_FUNCTION _00110000110_
_00110000110_:
    push usr_3
     2f2:	5f 93       	push	r21
    ldi  usr_3,SMP_BIT
     2f4:	50 e8       	ldi	r21, 0x80	; 128
    sts  CONCAT( PORT, PORT_SMP, _OUTCLR ),usr_3
     2f6:	50 93 66 06 	sts	0x0666, r21
    lds usr_3, reg_clyb
     2fa:	50 91 ee 22 	lds	r21, 0x22EE
    sts  CONCAT( PORT, PORT_YB, _DIR ), usr_3
     2fe:	50 93 00 06 	sts	0x0600, r21
	_00011001_
#elif (CLAMP_TO_DISCHARGE_TIME == 2)
	_00011001_
	_00011001_
#elif (CLAMP_TO_DISCHARGE_TIME == 3)
	_00011001_
     302:	00 00       	nop
	_00011001_
     304:	00 00       	nop
	_00011001_
     306:	00 00       	nop
	_10100101_
	_01101101_
	_00011001_
	_00011001_
#endif
    pop usr_3
     308:	5f 91       	pop	r21
    ret
     30a:	08 95       	ret

0000030c <burst_qm_1>:
     30c:	a0 e0       	ldi	r26, 0x00	; 0
     30e:	b0 e0       	ldi	r27, 0x00	; 0
     310:	ec e8       	ldi	r30, 0x8C	; 140
     312:	f1 e0       	ldi	r31, 0x01	; 1
     314:	0c 94 e7 10 	jmp	0x21ce	; 0x21ce <__prologue_saves__+0x12>
     318:	c8 2f       	mov	r28, r24
     31a:	16 2f       	mov	r17, r22
     31c:	f8 94       	cli
     31e:	80 91 71 00 	lds	r24, 0x0071
     322:	8d 7f       	andi	r24, 0xFD	; 253
     324:	80 93 71 00 	sts	0x0071, r24
     328:	2c 2f       	mov	r18, r28
     32a:	26 95       	lsr	r18
     32c:	26 95       	lsr	r18
     32e:	26 95       	lsr	r18
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	22 0f       	add	r18, r18
     334:	33 1f       	adc	r19, r19
     336:	f9 01       	movw	r30, r18
     338:	ef 5d       	subi	r30, 0xDF	; 223
     33a:	ff 4d       	sbci	r31, 0xDF	; 223
     33c:	80 81       	ld	r24, Z
     33e:	88 0f       	add	r24, r24
     340:	88 0f       	add	r24, r24
     342:	88 0f       	add	r24, r24
     344:	84 60       	ori	r24, 0x04	; 4
     346:	80 93 82 03 	sts	0x0382, r24
     34a:	80 91 71 00 	lds	r24, 0x0071
     34e:	82 60       	ori	r24, 0x02	; 2
     350:	80 93 71 00 	sts	0x0071, r24
     354:	27 5d       	subi	r18, 0xD7	; 215
     356:	3f 4d       	sbci	r19, 0xDF	; 223
     358:	d9 01       	movw	r26, r18
     35a:	11 96       	adiw	r26, 0x01	; 1
     35c:	8c 91       	ld	r24, X
     35e:	61 81       	ldd	r22, Z+1	; 0x01
     360:	0e 94 33 01 	call	0x266	; 0x266 <_00110000100_>
     364:	f8 2e       	mov	r15, r24
     366:	d0 e0       	ldi	r29, 0x00	; 0
     368:	fe 01       	movw	r30, r28
     36a:	ef 5f       	subi	r30, 0xFF	; 255
     36c:	ff 4d       	sbci	r31, 0xDF	; 223
     36e:	b0 80       	ld	r11, Z
     370:	dd 24       	eor	r13, r13
     372:	cc 24       	eor	r12, r12
     374:	c3 94       	inc	r12
     376:	1f c0       	rjmp	.+62     	; 0x3b6 <burst_qm_1+0xaa>
     378:	81 2f       	mov	r24, r17
     37a:	6f 2d       	mov	r22, r15
     37c:	40 91 f5 22 	lds	r20, 0x22F5
     380:	20 91 ef 22 	lds	r18, 0x22EF
     384:	00 91 eb 22 	lds	r16, 0x22EB
     388:	e0 90 ee 22 	lds	r14, 0x22EE
     38c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <_00110000010_>
     390:	8f b7       	in	r24, 0x3f	; 63
     392:	90 91 ec 22 	lds	r25, 0x22EC
     396:	89 2b       	or	r24, r25
     398:	8f bf       	out	0x3f, r24	; 63
     39a:	80 91 00 20 	lds	r24, 0x2000
     39e:	8f 5f       	subi	r24, 0xFF	; 255
     3a0:	80 93 00 20 	sts	0x2000, r24
     3a4:	82 30       	cpi	r24, 0x02	; 2
     3a6:	30 f0       	brcs	.+12     	; 0x3b4 <burst_qm_1+0xa8>
     3a8:	82 30       	cpi	r24, 0x02	; 2
     3aa:	21 f0       	breq	.+8      	; 0x3b4 <burst_qm_1+0xa8>
     3ac:	83 30       	cpi	r24, 0x03	; 3
     3ae:	11 f0       	breq	.+4      	; 0x3b4 <burst_qm_1+0xa8>
     3b0:	c0 92 00 20 	sts	0x2000, r12
     3b4:	d3 94       	inc	r13
     3b6:	f8 94       	cli
     3b8:	db 14       	cp	r13, r11
     3ba:	f1 f6       	brne	.-68     	; 0x378 <burst_qm_1+0x6c>
     3bc:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_00110000011_>
     3c0:	10 92 60 08 	sts	0x0860, r1
     3c4:	10 92 61 08 	sts	0x0861, r1
     3c8:	10 92 78 08 	sts	0x0878, r1
     3cc:	10 92 79 08 	sts	0x0879, r1
     3d0:	80 91 41 08 	lds	r24, 0x0841
     3d4:	80 61       	ori	r24, 0x10	; 16
     3d6:	80 93 41 08 	sts	0x0841, r24
     3da:	82 e0       	ldi	r24, 0x02	; 2
     3dc:	80 93 4a 08 	sts	0x084A, r24
     3e0:	80 e1       	ldi	r24, 0x10	; 16
     3e2:	80 93 4c 08 	sts	0x084C, r24
     3e6:	80 91 87 03 	lds	r24, 0x0387
     3ea:	84 fd       	sbrc	r24, 4
     3ec:	1b c0       	rjmp	.+54     	; 0x424 <burst_qm_1+0x118>
     3ee:	8f b7       	in	r24, 0x3f	; 63
     3f0:	90 91 ec 22 	lds	r25, 0x22EC
     3f4:	89 2b       	or	r24, r25
     3f6:	8f bf       	out	0x3f, r24	; 63
     3f8:	08 c0       	rjmp	.+16     	; 0x40a <burst_qm_1+0xfe>
     3fa:	80 91 60 08 	lds	r24, 0x0860
     3fe:	90 91 61 08 	lds	r25, 0x0861
     402:	b0 e2       	ldi	r27, 0x20	; 32
     404:	80 30       	cpi	r24, 0x00	; 0
     406:	9b 07       	cpc	r25, r27
     408:	a0 f4       	brcc	.+40     	; 0x432 <burst_qm_1+0x126>
     40a:	80 91 4c 08 	lds	r24, 0x084C
     40e:	84 ff       	sbrs	r24, 4
     410:	f4 cf       	rjmp	.-24     	; 0x3fa <burst_qm_1+0xee>
     412:	80 91 68 08 	lds	r24, 0x0868
     416:	90 91 69 08 	lds	r25, 0x0869
     41a:	cc 0f       	add	r28, r28
     41c:	dd 1f       	adc	r29, r29
     41e:	c1 5a       	subi	r28, 0xA1	; 161
     420:	de 4d       	sbci	r29, 0xDE	; 222
     422:	0d c0       	rjmp	.+26     	; 0x43e <burst_qm_1+0x132>
     424:	cc 0f       	add	r28, r28
     426:	dd 1f       	adc	r29, r29
     428:	c1 5a       	subi	r28, 0xA1	; 161
     42a:	de 4d       	sbci	r29, 0xDE	; 222
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	06 c0       	rjmp	.+12     	; 0x43e <burst_qm_1+0x132>
     432:	cc 0f       	add	r28, r28
     434:	dd 1f       	adc	r29, r29
     436:	c1 5a       	subi	r28, 0xA1	; 161
     438:	de 4d       	sbci	r29, 0xDE	; 222
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	90 e2       	ldi	r25, 0x20	; 32
     43e:	88 83       	st	Y, r24
     440:	99 83       	std	Y+1, r25	; 0x01
     442:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_00110000110_>
     446:	8f b7       	in	r24, 0x3f	; 63
     448:	90 91 ec 22 	lds	r25, 0x22EC
     44c:	89 2b       	or	r24, r25
     44e:	8f bf       	out	0x3f, r24	; 63
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62
     454:	e9 e0       	ldi	r30, 0x09	; 9
     456:	0c 94 00 11 	jmp	0x2200	; 0x2200 <__epilogue_restores__+0x12>

0000045a <qt_init_sensing_with_burst>:
     45a:	cf 93       	push	r28
     45c:	c0 e0       	ldi	r28, 0x00	; 0
     45e:	04 c0       	rjmp	.+8      	; 0x468 <qt_init_sensing_with_burst+0xe>
     460:	8c 2f       	mov	r24, r28
     462:	0e 94 8d 03 	call	0x71a	; 0x71a <start_cal_sensor>
     466:	cf 5f       	subi	r28, 0xFF	; 255
     468:	80 91 ea 21 	lds	r24, 0x21EA
     46c:	c8 17       	cp	r28, r24
     46e:	c0 f3       	brcs	.-16     	; 0x460 <qt_init_sensing_with_burst+0x6>
     470:	10 92 56 20 	sts	0x2056, r1
     474:	10 92 57 20 	sts	0x2057, r1
     478:	0e 94 9f 06 	call	0xd3e	; 0xd3e <burst_init>
     47c:	cf 91       	pop	r28
     47e:	08 95       	ret

00000480 <qt_get_library_sig>:
     480:	fc 01       	movw	r30, r24
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	95 e2       	ldi	r25, 0x25	; 37
     486:	80 83       	st	Z, r24
     488:	91 83       	std	Z+1, r25	; 0x01
     48a:	88 e8       	ldi	r24, 0x88	; 136
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	82 83       	std	Z+2, r24	; 0x02
     490:	93 83       	std	Z+3, r25	; 0x03
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	95 e0       	ldi	r25, 0x05	; 5
     496:	84 83       	std	Z+4, r24	; 0x04
     498:	95 83       	std	Z+5, r25	; 0x05
     49a:	08 95       	ret

0000049c <qt_calibrate_sensing>:
     49c:	cf 93       	push	r28
     49e:	c0 e0       	ldi	r28, 0x00	; 0
     4a0:	04 c0       	rjmp	.+8      	; 0x4aa <qt_calibrate_sensing+0xe>
     4a2:	8c 2f       	mov	r24, r28
     4a4:	0e 94 8d 03 	call	0x71a	; 0x71a <start_cal_sensor>
     4a8:	cf 5f       	subi	r28, 0xFF	; 255
     4aa:	80 91 ea 21 	lds	r24, 0x21EA
     4ae:	c8 17       	cp	r28, r24
     4b0:	c0 f3       	brcs	.-16     	; 0x4a2 <qt_calibrate_sensing+0x6>
     4b2:	cf 91       	pop	r28
     4b4:	08 95       	ret

000004b6 <qt_reset_sensing>:
     4b6:	10 92 ea 21 	sts	0x21EA, r1
     4ba:	10 92 f6 22 	sts	0x22F6, r1
     4be:	84 e0       	ldi	r24, 0x04	; 4
     4c0:	80 93 57 21 	sts	0x2157, r24
     4c4:	84 e1       	ldi	r24, 0x14	; 20
     4c6:	80 93 5a 21 	sts	0x215A, r24
     4ca:	95 e0       	ldi	r25, 0x05	; 5
     4cc:	90 93 5b 21 	sts	0x215B, r25
     4d0:	10 92 59 21 	sts	0x2159, r1
     4d4:	80 93 58 21 	sts	0x2158, r24
     4d8:	e7 e5       	ldi	r30, 0x57	; 87
     4da:	f1 e2       	ldi	r31, 0x21	; 33
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	82 93       	st	-Z, r24
     4e0:	83 e0       	ldi	r24, 0x03	; 3
     4e2:	86 83       	std	Z+6, r24	; 0x06
     4e4:	0e 94 bf 06 	call	0xd7e	; 0xd7e <burst_reset>
     4e8:	10 92 5d 21 	sts	0x215D, r1
     4ec:	10 92 5e 21 	sts	0x215E, r1
     4f0:	08 95       	ret

000004f2 <qt_measure_sensors>:
     4f2:	1f 93       	push	r17
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	10 92 e7 21 	sts	0x21E7, r1
     4fc:	10 92 e8 21 	sts	0x21E8, r1
     500:	40 91 56 20 	lds	r20, 0x2056
     504:	50 91 57 20 	lds	r21, 0x2057
     508:	80 93 56 20 	sts	0x2056, r24
     50c:	90 93 57 20 	sts	0x2057, r25
     510:	20 91 58 20 	lds	r18, 0x2058
     514:	30 91 59 20 	lds	r19, 0x2059
     518:	24 1b       	sub	r18, r20
     51a:	35 0b       	sbc	r19, r21
     51c:	28 0f       	add	r18, r24
     51e:	39 1f       	adc	r19, r25
     520:	c0 e0       	ldi	r28, 0x00	; 0
     522:	03 c0       	rjmp	.+6      	; 0x52a <qt_measure_sensors+0x38>
     524:	28 5c       	subi	r18, 0xC8	; 200
     526:	30 40       	sbci	r19, 0x00	; 0
     528:	cf 5f       	subi	r28, 0xFF	; 255
     52a:	28 3c       	cpi	r18, 0xC8	; 200
     52c:	31 05       	cpc	r19, r1
     52e:	d0 f7       	brcc	.-12     	; 0x524 <qt_measure_sensors+0x32>
     530:	20 93 58 20 	sts	0x2058, r18
     534:	30 93 59 20 	sts	0x2059, r19
     538:	80 91 e9 21 	lds	r24, 0x21E9
     53c:	88 23       	and	r24, r24
     53e:	41 f0       	breq	.+16     	; 0x550 <qt_measure_sensors+0x5e>
     540:	8c 17       	cp	r24, r28
     542:	18 f4       	brcc	.+6      	; 0x54a <qt_measure_sensors+0x58>
     544:	10 92 e9 21 	sts	0x21E9, r1
     548:	03 c0       	rjmp	.+6      	; 0x550 <qt_measure_sensors+0x5e>
     54a:	8c 1b       	sub	r24, r28
     54c:	80 93 e9 21 	sts	0x21E9, r24
     550:	0e 94 c7 06 	call	0xd8e	; 0xd8e <burst>
     554:	e0 91 5d 21 	lds	r30, 0x215D
     558:	f0 91 5e 21 	lds	r31, 0x215E
     55c:	30 97       	sbiw	r30, 0x00	; 0
     55e:	09 f0       	breq	.+2      	; 0x562 <qt_measure_sensors+0x70>
     560:	09 95       	icall
     562:	10 e0       	ldi	r17, 0x00	; 0
     564:	d0 e0       	ldi	r29, 0x00	; 0
     566:	06 c0       	rjmp	.+12     	; 0x574 <qt_measure_sensors+0x82>
     568:	8d 2f       	mov	r24, r29
     56a:	6c 2f       	mov	r22, r28
     56c:	0e 94 a0 03 	call	0x740	; 0x740 <process_sensor>
     570:	18 2b       	or	r17, r24
     572:	df 5f       	subi	r29, 0xFF	; 255
     574:	50 91 ea 21 	lds	r21, 0x21EA
     578:	d5 17       	cp	r29, r21
     57a:	b0 f3       	brcs	.-20     	; 0x568 <qt_measure_sensors+0x76>
     57c:	11 23       	and	r17, r17
     57e:	49 f0       	breq	.+18     	; 0x592 <qt_measure_sensors+0xa0>
     580:	80 91 e7 21 	lds	r24, 0x21E7
     584:	90 91 e8 21 	lds	r25, 0x21E8
     588:	91 60       	ori	r25, 0x01	; 1
     58a:	80 93 e7 21 	sts	0x21E7, r24
     58e:	90 93 e8 21 	sts	0x21E8, r25
     592:	10 92 df 21 	sts	0x21DF, r1
     596:	10 92 e0 21 	sts	0x21E0, r1
     59a:	10 92 e1 21 	sts	0x21E1, r1
     59e:	10 92 e2 21 	sts	0x21E2, r1
     5a2:	ab ee       	ldi	r26, 0xEB	; 235
     5a4:	b1 e2       	ldi	r27, 0x21	; 33
     5a6:	40 e0       	ldi	r20, 0x00	; 0
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	18 c0       	rjmp	.+48     	; 0x5de <qt_measure_sensors+0xec>
     5ae:	2c 91       	ld	r18, X
     5b0:	28 71       	andi	r18, 0x18	; 24
     5b2:	99 f0       	breq	.+38     	; 0x5da <qt_measure_sensors+0xe8>
     5b4:	e4 2f       	mov	r30, r20
     5b6:	e6 95       	lsr	r30
     5b8:	e6 95       	lsr	r30
     5ba:	e6 95       	lsr	r30
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	e1 52       	subi	r30, 0x21	; 33
     5c0:	fe 4d       	sbci	r31, 0xDE	; 222
     5c2:	24 2f       	mov	r18, r20
     5c4:	27 70       	andi	r18, 0x07	; 7
     5c6:	bc 01       	movw	r22, r24
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <qt_measure_sensors+0xdc>
     5ca:	66 0f       	add	r22, r22
     5cc:	77 1f       	adc	r23, r23
     5ce:	2a 95       	dec	r18
     5d0:	e2 f7       	brpl	.-8      	; 0x5ca <qt_measure_sensors+0xd8>
     5d2:	9b 01       	movw	r18, r22
     5d4:	30 81       	ld	r19, Z
     5d6:	32 2b       	or	r19, r18
     5d8:	30 83       	st	Z, r19
     5da:	4f 5f       	subi	r20, 0xFF	; 255
     5dc:	18 96       	adiw	r26, 0x08	; 8
     5de:	45 17       	cp	r20, r21
     5e0:	31 f7       	brne	.-52     	; 0x5ae <qt_measure_sensors+0xbc>
     5e2:	80 91 e7 21 	lds	r24, 0x21E7
     5e6:	90 91 e8 21 	lds	r25, 0x21E8
     5ea:	df 91       	pop	r29
     5ec:	cf 91       	pop	r28
     5ee:	1f 91       	pop	r17
     5f0:	08 95       	ret

000005f2 <qt_enable_key>:
     5f2:	90 91 ea 21 	lds	r25, 0x21EA
     5f6:	e9 2f       	mov	r30, r25
     5f8:	f0 e0       	ldi	r31, 0x00	; 0
     5fa:	33 e0       	ldi	r19, 0x03	; 3
     5fc:	ee 0f       	add	r30, r30
     5fe:	ff 1f       	adc	r31, r31
     600:	3a 95       	dec	r19
     602:	e1 f7       	brne	.-8      	; 0x5fc <qt_enable_key+0xa>
     604:	e5 51       	subi	r30, 0x15	; 21
     606:	fe 4d       	sbci	r31, 0xDE	; 222
     608:	43 83       	std	Z+3, r20	; 0x03
     60a:	67 70       	andi	r22, 0x07	; 7
     60c:	85 83       	std	Z+5, r24	; 0x05
     60e:	86 83       	std	Z+6, r24	; 0x06
     610:	23 70       	andi	r18, 0x03	; 3
     612:	66 0f       	add	r22, r22
     614:	66 0f       	add	r22, r22
     616:	66 0f       	add	r22, r22
     618:	26 2b       	or	r18, r22
     61a:	24 83       	std	Z+4, r18	; 0x04
     61c:	9f 5f       	subi	r25, 0xFF	; 255
     61e:	90 93 ea 21 	sts	0x21EA, r25
     622:	08 95       	ret

00000624 <qt_get_sensor_delta>:
     624:	a1 e0       	ldi	r26, 0x01	; 1
     626:	b0 e0       	ldi	r27, 0x00	; 0
     628:	e8 e1       	ldi	r30, 0x18	; 24
     62a:	f3 e0       	ldi	r31, 0x03	; 3
     62c:	0c 94 ea 10 	jmp	0x21d4	; 0x21d4 <__prologue_saves__+0x18>
     630:	08 2f       	mov	r16, r24
     632:	10 e0       	ldi	r17, 0x00	; 0
     634:	63 e0       	ldi	r22, 0x03	; 3
     636:	00 0f       	add	r16, r16
     638:	11 1f       	adc	r17, r17
     63a:	6a 95       	dec	r22
     63c:	e1 f7       	brne	.-8      	; 0x636 <qt_get_sensor_delta+0x12>
     63e:	f8 01       	movw	r30, r16
     640:	e5 51       	subi	r30, 0x15	; 21
     642:	fe 4d       	sbci	r31, 0xDE	; 222
     644:	65 81       	ldd	r22, Z+5	; 0x05
     646:	43 81       	ldd	r20, Z+3	; 0x03
     648:	50 e0       	ldi	r21, 0x00	; 0
     64a:	00 90 56 21 	lds	r0, 0x2156
     64e:	02 c0       	rjmp	.+4      	; 0x654 <qt_get_sensor_delta+0x30>
     650:	55 95       	asr	r21
     652:	47 95       	ror	r20
     654:	0a 94       	dec	r0
     656:	e2 f7       	brpl	.-8      	; 0x650 <qt_get_sensor_delta+0x2c>
     658:	44 30       	cpi	r20, 0x04	; 4
     65a:	08 f4       	brcc	.+2      	; 0x65e <qt_get_sensor_delta+0x3a>
     65c:	44 e0       	ldi	r20, 0x04	; 4
     65e:	90 91 ea 21 	lds	r25, 0x21EA
     662:	89 17       	cp	r24, r25
     664:	88 f5       	brcc	.+98     	; 0x6c8 <qt_get_sensor_delta+0xa4>
     666:	5b ee       	ldi	r21, 0xEB	; 235
     668:	e5 2e       	mov	r14, r21
     66a:	51 e2       	ldi	r21, 0x21	; 33
     66c:	f5 2e       	mov	r15, r21
     66e:	e0 0e       	add	r14, r16
     670:	f1 1e       	adc	r15, r17
     672:	f7 01       	movw	r30, r14
     674:	94 81       	ldd	r25, Z+4	; 0x04
     676:	29 2f       	mov	r18, r25
     678:	20 7c       	andi	r18, 0xC0	; 192
     67a:	01 f5       	brne	.+64     	; 0x6bc <qt_get_sensor_delta+0x98>
     67c:	86 2f       	mov	r24, r22
     67e:	49 83       	std	Y+1, r20	; 0x01
     680:	0e 94 0f 06 	call	0xc1e	; 0xc1e <get_channel_delta>
     684:	49 81       	ldd	r20, Y+1	; 0x01
     686:	24 2f       	mov	r18, r20
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	46 95       	lsr	r20
     68c:	46 95       	lsr	r20
     68e:	50 e0       	ldi	r21, 0x00	; 0
     690:	42 1b       	sub	r20, r18
     692:	53 0b       	sbc	r21, r19
     694:	48 17       	cp	r20, r24
     696:	59 07       	cpc	r21, r25
     698:	24 f4       	brge	.+8      	; 0x6a2 <qt_get_sensor_delta+0x7e>
     69a:	f7 01       	movw	r30, r14
     69c:	44 81       	ldd	r20, Z+4	; 0x04
     69e:	4b 7f       	andi	r20, 0xFB	; 251
     6a0:	44 83       	std	Z+4, r20	; 0x04
     6a2:	30 95       	com	r19
     6a4:	21 95       	neg	r18
     6a6:	3f 4f       	sbci	r19, 0xFF	; 255
     6a8:	28 17       	cp	r18, r24
     6aa:	39 07       	cpc	r19, r25
     6ac:	7c f0       	brlt	.+30     	; 0x6cc <qt_get_sensor_delta+0xa8>
     6ae:	f8 01       	movw	r30, r16
     6b0:	e5 51       	subi	r30, 0x15	; 21
     6b2:	fe 4d       	sbci	r31, 0xDE	; 222
     6b4:	24 81       	ldd	r18, Z+4	; 0x04
     6b6:	24 60       	ori	r18, 0x04	; 4
     6b8:	24 83       	std	Z+4, r18	; 0x04
     6ba:	08 c0       	rjmp	.+16     	; 0x6cc <qt_get_sensor_delta+0xa8>
     6bc:	9b 7f       	andi	r25, 0xFB	; 251
     6be:	f7 01       	movw	r30, r14
     6c0:	94 83       	std	Z+4, r25	; 0x04
     6c2:	0e 94 e6 08 	call	0x11cc	; 0x11cc <calc_rotor_slider_sensor_delta>
     6c6:	02 c0       	rjmp	.+4      	; 0x6cc <qt_get_sensor_delta+0xa8>
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	21 96       	adiw	r28, 0x01	; 1
     6ce:	e6 e0       	ldi	r30, 0x06	; 6
     6d0:	0c 94 03 11 	jmp	0x2206	; 0x2206 <__epilogue_restores__+0x18>

000006d4 <goto_no_detect>:
     6d4:	e8 2f       	mov	r30, r24
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	83 e0       	ldi	r24, 0x03	; 3
     6da:	ee 0f       	add	r30, r30
     6dc:	ff 1f       	adc	r31, r31
     6de:	8a 95       	dec	r24
     6e0:	e1 f7       	brne	.-8      	; 0x6da <goto_no_detect+0x6>
     6e2:	e5 51       	subi	r30, 0x15	; 21
     6e4:	fe 4d       	sbci	r31, 0xDE	; 222
     6e6:	25 81       	ldd	r18, Z+5	; 0x05
     6e8:	36 81       	ldd	r19, Z+6	; 0x06
     6ea:	82 e0       	ldi	r24, 0x02	; 2
     6ec:	80 83       	st	Z, r24
     6ee:	80 91 e7 21 	lds	r24, 0x21E7
     6f2:	90 91 e8 21 	lds	r25, 0x21E8
     6f6:	82 60       	ori	r24, 0x02	; 2
     6f8:	80 93 e7 21 	sts	0x21E7, r24
     6fc:	90 93 e8 21 	sts	0x21E8, r25
     700:	12 82       	std	Z+2, r1	; 0x02
     702:	82 2f       	mov	r24, r18
     704:	90 e8       	ldi	r25, 0x80	; 128
     706:	06 c0       	rjmp	.+12     	; 0x714 <goto_no_detect+0x40>
     708:	e8 2f       	mov	r30, r24
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	e6 5a       	subi	r30, 0xA6	; 166
     70e:	ff 4d       	sbci	r31, 0xDF	; 223
     710:	90 83       	st	Z, r25
     712:	8f 5f       	subi	r24, 0xFF	; 255
     714:	38 17       	cp	r19, r24
     716:	c0 f7       	brcc	.-16     	; 0x708 <goto_no_detect+0x34>
     718:	08 95       	ret

0000071a <start_cal_sensor>:
     71a:	cf 93       	push	r28
     71c:	c8 2f       	mov	r28, r24
     71e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <goto_no_detect>
     722:	ec 2f       	mov	r30, r28
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	93 e0       	ldi	r25, 0x03	; 3
     728:	ee 0f       	add	r30, r30
     72a:	ff 1f       	adc	r31, r31
     72c:	9a 95       	dec	r25
     72e:	e1 f7       	brne	.-8      	; 0x728 <start_cal_sensor+0xe>
     730:	e5 51       	subi	r30, 0x15	; 21
     732:	fe 4d       	sbci	r31, 0xDE	; 222
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	80 83       	st	Z, r24
     738:	8f e0       	ldi	r24, 0x0F	; 15
     73a:	81 83       	std	Z+1, r24	; 0x01
     73c:	cf 91       	pop	r28
     73e:	08 95       	ret

00000740 <process_sensor>:
     740:	4f 92       	push	r4
     742:	5f 92       	push	r5
     744:	6f 92       	push	r6
     746:	7f 92       	push	r7
     748:	8f 92       	push	r8
     74a:	9f 92       	push	r9
     74c:	af 92       	push	r10
     74e:	bf 92       	push	r11
     750:	df 92       	push	r13
     752:	ef 92       	push	r14
     754:	ff 92       	push	r15
     756:	0f 93       	push	r16
     758:	1f 93       	push	r17
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	0f 92       	push	r0
     760:	cd b7       	in	r28, 0x3d	; 61
     762:	de b7       	in	r29, 0x3e	; 62
     764:	18 2f       	mov	r17, r24
     766:	e6 2e       	mov	r14, r22
     768:	0e 94 12 03 	call	0x624	; 0x624 <qt_get_sensor_delta>
     76c:	4c 01       	movw	r8, r24
     76e:	a1 2e       	mov	r10, r17
     770:	bb 24       	eor	r11, r11
     772:	63 e0       	ldi	r22, 0x03	; 3
     774:	aa 0c       	add	r10, r10
     776:	bb 1c       	adc	r11, r11
     778:	6a 95       	dec	r22
     77a:	e1 f7       	brne	.-8      	; 0x774 <process_sensor+0x34>
     77c:	f5 01       	movw	r30, r10
     77e:	e5 51       	subi	r30, 0x15	; 21
     780:	fe 4d       	sbci	r31, 0xDE	; 222
     782:	44 81       	ldd	r20, Z+4	; 0x04
     784:	23 81       	ldd	r18, Z+3	; 0x03
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	84 2f       	mov	r24, r20
     78a:	83 70       	andi	r24, 0x03	; 3
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	01 96       	adiw	r24, 0x01	; 1
     790:	b9 01       	movw	r22, r18
     792:	02 c0       	rjmp	.+4      	; 0x798 <process_sensor+0x58>
     794:	75 95       	asr	r23
     796:	67 95       	ror	r22
     798:	8a 95       	dec	r24
     79a:	e2 f7       	brpl	.-8      	; 0x794 <process_sensor+0x54>
     79c:	cb 01       	movw	r24, r22
     79e:	62 30       	cpi	r22, 0x02	; 2
     7a0:	08 f4       	brcc	.+2      	; 0x7a4 <process_sensor+0x64>
     7a2:	82 e0       	ldi	r24, 0x02	; 2
     7a4:	b9 01       	movw	r22, r18
     7a6:	68 1b       	sub	r22, r24
     7a8:	71 09       	sbc	r23, r1
     7aa:	f5 01       	movw	r30, r10
     7ac:	e5 51       	subi	r30, 0x15	; 21
     7ae:	fe 4d       	sbci	r31, 0xDE	; 222
     7b0:	80 81       	ld	r24, Z
     7b2:	84 30       	cpi	r24, 0x04	; 4
     7b4:	09 f4       	brne	.+2      	; 0x7b8 <process_sensor+0x78>
     7b6:	d4 c0       	rjmp	.+424    	; 0x960 <process_sensor+0x220>
     7b8:	85 30       	cpi	r24, 0x05	; 5
     7ba:	30 f4       	brcc	.+12     	; 0x7c8 <process_sensor+0x88>
     7bc:	81 30       	cpi	r24, 0x01	; 1
     7be:	71 f0       	breq	.+28     	; 0x7dc <process_sensor+0x9c>
     7c0:	82 30       	cpi	r24, 0x02	; 2
     7c2:	09 f0       	breq	.+2      	; 0x7c6 <process_sensor+0x86>
     7c4:	19 c2       	rjmp	.+1074   	; 0xbf8 <process_sensor+0x4b8>
     7c6:	57 c0       	rjmp	.+174    	; 0x876 <process_sensor+0x136>
     7c8:	80 31       	cpi	r24, 0x10	; 16
     7ca:	09 f4       	brne	.+2      	; 0x7ce <process_sensor+0x8e>
     7cc:	5f c1       	rjmp	.+702    	; 0xa8c <process_sensor+0x34c>
     7ce:	80 32       	cpi	r24, 0x20	; 32
     7d0:	09 f4       	brne	.+2      	; 0x7d4 <process_sensor+0x94>
     7d2:	e8 c1       	rjmp	.+976    	; 0xba4 <process_sensor+0x464>
     7d4:	88 30       	cpi	r24, 0x08	; 8
     7d6:	09 f0       	breq	.+2      	; 0x7da <process_sensor+0x9a>
     7d8:	0f c2       	rjmp	.+1054   	; 0xbf8 <process_sensor+0x4b8>
     7da:	b8 c1       	rjmp	.+880    	; 0xb4c <process_sensor+0x40c>
     7dc:	20 91 e7 21 	lds	r18, 0x21E7
     7e0:	30 91 e8 21 	lds	r19, 0x21E8
     7e4:	32 60       	ori	r19, 0x02	; 2
     7e6:	65 81       	ldd	r22, Z+5	; 0x05
     7e8:	76 81       	ldd	r23, Z+6	; 0x06
     7ea:	7f 01       	movw	r14, r30
     7ec:	08 94       	sec
     7ee:	e1 1c       	adc	r14, r1
     7f0:	f1 1c       	adc	r15, r1
     7f2:	2b c0       	rjmp	.+86     	; 0x84a <process_sensor+0x10a>
     7f4:	f7 01       	movw	r30, r14
     7f6:	80 81       	ld	r24, Z
     7f8:	e6 2f       	mov	r30, r22
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	df 01       	movw	r26, r30
     7fe:	aa 0f       	add	r26, r26
     800:	bb 1f       	adc	r27, r27
     802:	a1 56       	subi	r26, 0x61	; 97
     804:	be 4d       	sbci	r27, 0xDE	; 222
     806:	8a 30       	cpi	r24, 0x0A	; 10
     808:	38 f0       	brcs	.+14     	; 0x818 <process_sensor+0xd8>
     80a:	ee 0f       	add	r30, r30
     80c:	ff 1f       	adc	r31, r31
     80e:	e1 5a       	subi	r30, 0xA1	; 161
     810:	fe 4d       	sbci	r31, 0xDE	; 222
     812:	80 81       	ld	r24, Z
     814:	91 81       	ldd	r25, Z+1	; 0x01
     816:	14 c0       	rjmp	.+40     	; 0x840 <process_sensor+0x100>
     818:	4d 91       	ld	r20, X+
     81a:	5c 91       	ld	r21, X
     81c:	11 97       	sbiw	r26, 0x01	; 1
     81e:	ee 0f       	add	r30, r30
     820:	ff 1f       	adc	r31, r31
     822:	e1 5a       	subi	r30, 0xA1	; 161
     824:	fe 4d       	sbci	r31, 0xDE	; 222
     826:	80 81       	ld	r24, Z
     828:	91 81       	ldd	r25, Z+1	; 0x01
     82a:	84 17       	cp	r24, r20
     82c:	95 07       	cpc	r25, r21
     82e:	18 f4       	brcc	.+6      	; 0x836 <process_sensor+0xf6>
     830:	ca 01       	movw	r24, r20
     832:	01 97       	sbiw	r24, 0x01	; 1
     834:	05 c0       	rjmp	.+10     	; 0x840 <process_sensor+0x100>
     836:	48 17       	cp	r20, r24
     838:	59 07       	cpc	r21, r25
     83a:	30 f4       	brcc	.+12     	; 0x848 <process_sensor+0x108>
     83c:	ca 01       	movw	r24, r20
     83e:	01 96       	adiw	r24, 0x01	; 1
     840:	8d 93       	st	X+, r24
     842:	9c 93       	st	X, r25
     844:	11 97       	sbiw	r26, 0x01	; 1
     846:	28 60       	ori	r18, 0x08	; 8
     848:	6f 5f       	subi	r22, 0xFF	; 255
     84a:	76 17       	cp	r23, r22
     84c:	98 f6       	brcc	.-90     	; 0x7f4 <process_sensor+0xb4>
     84e:	20 93 e7 21 	sts	0x21E7, r18
     852:	30 93 e8 21 	sts	0x21E8, r19
     856:	f5 01       	movw	r30, r10
     858:	e5 51       	subi	r30, 0x15	; 21
     85a:	fe 4d       	sbci	r31, 0xDE	; 222
     85c:	81 81       	ldd	r24, Z+1	; 0x01
     85e:	81 50       	subi	r24, 0x01	; 1
     860:	81 83       	std	Z+1, r24	; 0x01
     862:	88 23       	and	r24, r24
     864:	19 f4       	brne	.+6      	; 0x86c <process_sensor+0x12c>
     866:	81 2f       	mov	r24, r17
     868:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <goto_no_detect>
     86c:	80 91 58 21 	lds	r24, 0x2158
     870:	80 93 e9 21 	sts	0x21E9, r24
     874:	b9 c1       	rjmp	.+882    	; 0xbe8 <process_sensor+0x4a8>
     876:	42 ff       	sbrs	r20, 2
     878:	08 c0       	rjmp	.+16     	; 0x88a <process_sensor+0x14a>
     87a:	a5 81       	ldd	r26, Z+5	; 0x05
     87c:	b0 e0       	ldi	r27, 0x00	; 0
     87e:	a6 5a       	subi	r26, 0xA6	; 166
     880:	bf 4d       	sbci	r27, 0xDF	; 223
     882:	1c 92       	st	X, r1
     884:	80 e2       	ldi	r24, 0x20	; 32
     886:	80 83       	st	Z, r24
     888:	a6 c1       	rjmp	.+844    	; 0xbd6 <process_sensor+0x496>
     88a:	c4 01       	movw	r24, r8
     88c:	97 fe       	sbrs	r9, 7
     88e:	02 c0       	rjmp	.+4      	; 0x894 <process_sensor+0x154>
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	82 17       	cp	r24, r18
     896:	93 07       	cpc	r25, r19
     898:	38 f0       	brcs	.+14     	; 0x8a8 <process_sensor+0x168>
     89a:	f5 01       	movw	r30, r10
     89c:	e5 51       	subi	r30, 0x15	; 21
     89e:	fe 4d       	sbci	r31, 0xDE	; 222
     8a0:	84 e0       	ldi	r24, 0x04	; 4
     8a2:	80 83       	st	Z, r24
     8a4:	12 82       	std	Z+2, r1	; 0x02
     8a6:	a2 c1       	rjmp	.+836    	; 0xbec <process_sensor+0x4ac>
     8a8:	ee 20       	and	r14, r14
     8aa:	09 f4       	brne	.+2      	; 0x8ae <process_sensor+0x16e>
     8ac:	a5 c1       	rjmp	.+842    	; 0xbf8 <process_sensor+0x4b8>
     8ae:	80 91 e9 21 	lds	r24, 0x21E9
     8b2:	88 23       	and	r24, r24
     8b4:	09 f0       	breq	.+2      	; 0x8b8 <process_sensor+0x178>
     8b6:	a0 c1       	rjmp	.+832    	; 0xbf8 <process_sensor+0x4b8>
     8b8:	f5 01       	movw	r30, r10
     8ba:	e5 51       	subi	r30, 0x15	; 21
     8bc:	fe 4d       	sbci	r31, 0xDE	; 222
     8be:	25 81       	ldd	r18, Z+5	; 0x05
     8c0:	d6 80       	ldd	r13, Z+6	; 0x06
     8c2:	30 91 5b 21 	lds	r19, 0x215B
     8c6:	30 58       	subi	r19, 0x80	; 128
     8c8:	00 e8       	ldi	r16, 0x80	; 128
     8ca:	a0 2e       	mov	r10, r16
     8cc:	80 91 5a 21 	lds	r24, 0x215A
     8d0:	a8 1a       	sub	r10, r24
     8d2:	60 91 e7 21 	lds	r22, 0x21E7
     8d6:	70 91 e8 21 	lds	r23, 0x21E8
     8da:	80 e8       	ldi	r24, 0x80	; 128
     8dc:	88 2e       	mov	r8, r24
     8de:	39 c0       	rjmp	.+114    	; 0x952 <process_sensor+0x212>
     8e0:	42 2f       	mov	r20, r18
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	da 01       	movw	r26, r20
     8e6:	aa 0f       	add	r26, r26
     8e8:	bb 1f       	adc	r27, r27
     8ea:	a1 56       	subi	r26, 0x61	; 97
     8ec:	be 4d       	sbci	r27, 0xDE	; 222
     8ee:	8d 91       	ld	r24, X+
     8f0:	9c 91       	ld	r25, X
     8f2:	11 97       	sbiw	r26, 0x01	; 1
     8f4:	fa 01       	movw	r30, r20
     8f6:	ee 0f       	add	r30, r30
     8f8:	ff 1f       	adc	r31, r31
     8fa:	e1 5a       	subi	r30, 0xA1	; 161
     8fc:	fe 4d       	sbci	r31, 0xDE	; 222
     8fe:	00 81       	ld	r16, Z
     900:	11 81       	ldd	r17, Z+1	; 0x01
     902:	fa 01       	movw	r30, r20
     904:	e6 5a       	subi	r30, 0xA6	; 166
     906:	ff 4d       	sbci	r31, 0xDF	; 223
     908:	80 17       	cp	r24, r16
     90a:	91 07       	cpc	r25, r17
     90c:	40 f4       	brcc	.+16     	; 0x91e <process_sensor+0x1de>
     90e:	40 81       	ld	r20, Z
     910:	4e 0d       	add	r20, r14
     912:	40 83       	st	Z, r20
     914:	43 17       	cp	r20, r19
     916:	e0 f0       	brcs	.+56     	; 0x950 <process_sensor+0x210>
     918:	80 82       	st	Z, r8
     91a:	01 96       	adiw	r24, 0x01	; 1
     91c:	0a c0       	rjmp	.+20     	; 0x932 <process_sensor+0x1f2>
     91e:	08 17       	cp	r16, r24
     920:	19 07       	cpc	r17, r25
     922:	60 f4       	brcc	.+24     	; 0x93c <process_sensor+0x1fc>
     924:	40 81       	ld	r20, Z
     926:	4e 19       	sub	r20, r14
     928:	40 83       	st	Z, r20
     92a:	a4 16       	cp	r10, r20
     92c:	88 f0       	brcs	.+34     	; 0x950 <process_sensor+0x210>
     92e:	80 82       	st	Z, r8
     930:	01 97       	sbiw	r24, 0x01	; 1
     932:	8d 93       	st	X+, r24
     934:	9c 93       	st	X, r25
     936:	11 97       	sbiw	r26, 0x01	; 1
     938:	68 60       	ori	r22, 0x08	; 8
     93a:	0a c0       	rjmp	.+20     	; 0x950 <process_sensor+0x210>
     93c:	80 81       	ld	r24, Z
     93e:	81 38       	cpi	r24, 0x81	; 129
     940:	10 f0       	brcs	.+4      	; 0x946 <process_sensor+0x206>
     942:	81 50       	subi	r24, 0x01	; 1
     944:	80 83       	st	Z, r24
     946:	80 81       	ld	r24, Z
     948:	87 fd       	sbrc	r24, 7
     94a:	02 c0       	rjmp	.+4      	; 0x950 <process_sensor+0x210>
     94c:	8f 5f       	subi	r24, 0xFF	; 255
     94e:	80 83       	st	Z, r24
     950:	2f 5f       	subi	r18, 0xFF	; 255
     952:	d2 16       	cp	r13, r18
     954:	28 f6       	brcc	.-118    	; 0x8e0 <process_sensor+0x1a0>
     956:	60 93 e7 21 	sts	0x21E7, r22
     95a:	70 93 e8 21 	sts	0x21E8, r23
     95e:	4c c1       	rjmp	.+664    	; 0xbf8 <process_sensor+0x4b8>
     960:	c4 01       	movw	r24, r8
     962:	97 fe       	sbrs	r9, 7
     964:	02 c0       	rjmp	.+4      	; 0x96a <process_sensor+0x22a>
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	82 17       	cp	r24, r18
     96c:	93 07       	cpc	r25, r19
     96e:	08 f4       	brcc	.+2      	; 0x972 <process_sensor+0x232>
     970:	27 c1       	rjmp	.+590    	; 0xbc0 <process_sensor+0x480>
     972:	80 91 58 21 	lds	r24, 0x2158
     976:	80 93 e9 21 	sts	0x21E9, r24
     97a:	f5 01       	movw	r30, r10
     97c:	e5 51       	subi	r30, 0x15	; 21
     97e:	fe 4d       	sbci	r31, 0xDE	; 222
     980:	82 81       	ldd	r24, Z+2	; 0x02
     982:	8f 5f       	subi	r24, 0xFF	; 255
     984:	82 83       	std	Z+2, r24	; 0x02
     986:	84 81       	ldd	r24, Z+4	; 0x04
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	88 73       	andi	r24, 0x38	; 56
     98c:	90 70       	andi	r25, 0x00	; 0
     98e:	63 e0       	ldi	r22, 0x03	; 3
     990:	96 95       	lsr	r25
     992:	87 95       	ror	r24
     994:	6a 95       	dec	r22
     996:	e1 f7       	brne	.-8      	; 0x990 <process_sensor+0x250>
     998:	d8 2e       	mov	r13, r24
     99a:	88 23       	and	r24, r24
     99c:	b9 f5       	brne	.+110    	; 0xa0c <process_sensor+0x2cc>
     99e:	49 c0       	rjmp	.+146    	; 0xa32 <process_sensor+0x2f2>
     9a0:	01 17       	cp	r16, r17
     9a2:	91 f1       	breq	.+100    	; 0xa08 <process_sensor+0x2c8>
     9a4:	40 2e       	mov	r4, r16
     9a6:	55 24       	eor	r5, r5
     9a8:	43 e0       	ldi	r20, 0x03	; 3
     9aa:	44 0c       	add	r4, r4
     9ac:	55 1c       	adc	r5, r5
     9ae:	4a 95       	dec	r20
     9b0:	e1 f7       	brne	.-8      	; 0x9aa <process_sensor+0x26a>
     9b2:	6b ee       	ldi	r22, 0xEB	; 235
     9b4:	71 e2       	ldi	r23, 0x21	; 33
     9b6:	46 0e       	add	r4, r22
     9b8:	57 1e       	adc	r5, r23
     9ba:	f2 01       	movw	r30, r4
     9bc:	84 81       	ldd	r24, Z+4	; 0x04
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	88 73       	andi	r24, 0x38	; 56
     9c2:	90 70       	andi	r25, 0x00	; 0
     9c4:	53 e0       	ldi	r21, 0x03	; 3
     9c6:	96 95       	lsr	r25
     9c8:	87 95       	ror	r24
     9ca:	5a 95       	dec	r21
     9cc:	e1 f7       	brne	.-8      	; 0x9c6 <process_sensor+0x286>
     9ce:	d8 16       	cp	r13, r24
     9d0:	d9 f4       	brne	.+54     	; 0xa08 <process_sensor+0x2c8>
     9d2:	80 2f       	mov	r24, r16
     9d4:	29 83       	std	Y+1, r18	; 0x01
     9d6:	0e 94 12 03 	call	0x624	; 0x624 <qt_get_sensor_delta>
     9da:	f2 01       	movw	r30, r4
     9dc:	33 81       	ldd	r19, Z+3	; 0x03
     9de:	ac 01       	movw	r20, r24
     9e0:	43 1b       	sub	r20, r19
     9e2:	51 09       	sbc	r21, r1
     9e4:	f3 01       	movw	r30, r6
     9e6:	80 81       	ld	r24, Z
     9e8:	b4 01       	movw	r22, r8
     9ea:	68 1b       	sub	r22, r24
     9ec:	71 09       	sbc	r23, r1
     9ee:	29 81       	ldd	r18, Y+1	; 0x01
     9f0:	64 17       	cp	r22, r20
     9f2:	75 07       	cpc	r23, r21
     9f4:	34 f0       	brlt	.+12     	; 0xa02 <process_sensor+0x2c2>
     9f6:	f2 01       	movw	r30, r4
     9f8:	80 81       	ld	r24, Z
     9fa:	80 31       	cpi	r24, 0x10	; 16
     9fc:	11 f0       	breq	.+4      	; 0xa02 <process_sensor+0x2c2>
     9fe:	88 30       	cpi	r24, 0x08	; 8
     a00:	19 f4       	brne	.+6      	; 0xa08 <process_sensor+0x2c8>
     a02:	f7 01       	movw	r30, r14
     a04:	10 82       	st	Z, r1
     a06:	21 e0       	ldi	r18, 0x01	; 1
     a08:	0f 5f       	subi	r16, 0xFF	; 255
     a0a:	0c c0       	rjmp	.+24     	; 0xa24 <process_sensor+0x2e4>
     a0c:	20 e0       	ldi	r18, 0x00	; 0
     a0e:	00 e0       	ldi	r16, 0x00	; 0
     a10:	33 e0       	ldi	r19, 0x03	; 3
     a12:	63 2e       	mov	r6, r19
     a14:	71 2c       	mov	r7, r1
     a16:	6e 0e       	add	r6, r30
     a18:	7f 1e       	adc	r7, r31
     a1a:	7f 01       	movw	r14, r30
     a1c:	62 e0       	ldi	r22, 0x02	; 2
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	e6 0e       	add	r14, r22
     a22:	f7 1e       	adc	r15, r23
     a24:	80 91 ea 21 	lds	r24, 0x21EA
     a28:	08 17       	cp	r16, r24
     a2a:	08 f4       	brcc	.+2      	; 0xa2e <process_sensor+0x2ee>
     a2c:	b9 cf       	rjmp	.-142    	; 0x9a0 <process_sensor+0x260>
     a2e:	22 23       	and	r18, r18
     a30:	79 f4       	brne	.+30     	; 0xa50 <process_sensor+0x310>
     a32:	80 91 57 21 	lds	r24, 0x2157
     a36:	88 23       	and	r24, r24
     a38:	59 f0       	breq	.+22     	; 0xa50 <process_sensor+0x310>
     a3a:	80 91 e7 21 	lds	r24, 0x21E7
     a3e:	90 91 e8 21 	lds	r25, 0x21E8
     a42:	98 60       	ori	r25, 0x08	; 8
     a44:	80 93 e7 21 	sts	0x21E7, r24
     a48:	90 93 e8 21 	sts	0x21E8, r25
     a4c:	01 e0       	ldi	r16, 0x01	; 1
     a4e:	01 c0       	rjmp	.+2      	; 0xa52 <process_sensor+0x312>
     a50:	00 e0       	ldi	r16, 0x00	; 0
     a52:	f5 01       	movw	r30, r10
     a54:	e5 51       	subi	r30, 0x15	; 21
     a56:	fe 4d       	sbci	r31, 0xDE	; 222
     a58:	92 81       	ldd	r25, Z+2	; 0x02
     a5a:	80 91 57 21 	lds	r24, 0x2157
     a5e:	98 17       	cp	r25, r24
     a60:	08 f4       	brcc	.+2      	; 0xa64 <process_sensor+0x324>
     a62:	cb c0       	rjmp	.+406    	; 0xbfa <process_sensor+0x4ba>
     a64:	20 91 e7 21 	lds	r18, 0x21E7
     a68:	30 91 e8 21 	lds	r19, 0x21E8
     a6c:	23 60       	ori	r18, 0x03	; 3
     a6e:	20 93 e7 21 	sts	0x21E7, r18
     a72:	30 93 e8 21 	sts	0x21E8, r19
     a76:	80 e1       	ldi	r24, 0x10	; 16
     a78:	80 83       	st	Z, r24
     a7a:	11 82       	std	Z+1, r1	; 0x01
     a7c:	84 81       	ldd	r24, Z+4	; 0x04
     a7e:	80 7c       	andi	r24, 0xC0	; 192
     a80:	09 f4       	brne	.+2      	; 0xa84 <process_sensor+0x344>
     a82:	bb c0       	rjmp	.+374    	; 0xbfa <process_sensor+0x4ba>
     a84:	81 2f       	mov	r24, r17
     a86:	0e 94 dd 09 	call	0x13ba	; 0x13ba <rotor_slider_enter_detect>
     a8a:	b7 c0       	rjmp	.+366    	; 0xbfa <process_sensor+0x4ba>
     a8c:	20 91 e7 21 	lds	r18, 0x21E7
     a90:	30 91 e8 21 	lds	r19, 0x21E8
     a94:	42 ff       	sbrs	r20, 2
     a96:	0e c0       	rjmp	.+28     	; 0xab4 <process_sensor+0x374>
     a98:	a5 81       	ldd	r26, Z+5	; 0x05
     a9a:	b0 e0       	ldi	r27, 0x00	; 0
     a9c:	a6 5a       	subi	r26, 0xA6	; 166
     a9e:	bf 4d       	sbci	r27, 0xDF	; 223
     aa0:	80 e8       	ldi	r24, 0x80	; 128
     aa2:	8c 93       	st	X, r24
     aa4:	80 e2       	ldi	r24, 0x20	; 32
     aa6:	80 83       	st	Z, r24
     aa8:	30 61       	ori	r19, 0x10	; 16
     aaa:	20 93 e7 21 	sts	0x21E7, r18
     aae:	30 93 e8 21 	sts	0x21E8, r19
     ab2:	44 c0       	rjmp	.+136    	; 0xb3c <process_sensor+0x3fc>
     ab4:	c4 01       	movw	r24, r8
     ab6:	97 fe       	sbrs	r9, 7
     ab8:	02 c0       	rjmp	.+4      	; 0xabe <process_sensor+0x37e>
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	86 17       	cp	r24, r22
     ac0:	97 07       	cpc	r25, r23
     ac2:	58 f4       	brcc	.+22     	; 0xada <process_sensor+0x39a>
     ac4:	f5 01       	movw	r30, r10
     ac6:	e5 51       	subi	r30, 0x15	; 21
     ac8:	fe 4d       	sbci	r31, 0xDE	; 222
     aca:	88 e0       	ldi	r24, 0x08	; 8
     acc:	80 83       	st	Z, r24
     ace:	80 91 e7 21 	lds	r24, 0x21E7
     ad2:	90 91 e8 21 	lds	r25, 0x21E8
     ad6:	94 60       	ori	r25, 0x04	; 4
     ad8:	2d c0       	rjmp	.+90     	; 0xb34 <process_sensor+0x3f4>
     ada:	21 60       	ori	r18, 0x01	; 1
     adc:	20 93 e7 21 	sts	0x21E7, r18
     ae0:	30 93 e8 21 	sts	0x21E8, r19
     ae4:	f5 01       	movw	r30, r10
     ae6:	e5 51       	subi	r30, 0x15	; 21
     ae8:	fe 4d       	sbci	r31, 0xDE	; 222
     aea:	82 81       	ldd	r24, Z+2	; 0x02
     aec:	90 91 57 21 	lds	r25, 0x2157
     af0:	89 17       	cp	r24, r25
     af2:	10 f4       	brcc	.+4      	; 0xaf8 <process_sensor+0x3b8>
     af4:	8f 5f       	subi	r24, 0xFF	; 255
     af6:	82 83       	std	Z+2, r24	; 0x02
     af8:	f5 01       	movw	r30, r10
     afa:	e5 51       	subi	r30, 0x15	; 21
     afc:	fe 4d       	sbci	r31, 0xDE	; 222
     afe:	84 81       	ldd	r24, Z+4	; 0x04
     b00:	80 7c       	andi	r24, 0xC0	; 192
     b02:	19 f0       	breq	.+6      	; 0xb0a <process_sensor+0x3ca>
     b04:	81 2f       	mov	r24, r17
     b06:	0e 94 15 09 	call	0x122a	; 0x122a <calc_rotor_slider_value>
     b0a:	90 91 59 21 	lds	r25, 0x2159
     b0e:	99 23       	and	r25, r25
     b10:	b9 f0       	breq	.+46     	; 0xb40 <process_sensor+0x400>
     b12:	f5 01       	movw	r30, r10
     b14:	e5 51       	subi	r30, 0x15	; 21
     b16:	fe 4d       	sbci	r31, 0xDE	; 222
     b18:	81 81       	ldd	r24, Z+1	; 0x01
     b1a:	89 17       	cp	r24, r25
     b1c:	18 f4       	brcc	.+6      	; 0xb24 <process_sensor+0x3e4>
     b1e:	e8 0e       	add	r14, r24
     b20:	e1 82       	std	Z+1, r14	; 0x01
     b22:	0e c0       	rjmp	.+28     	; 0xb40 <process_sensor+0x400>
     b24:	81 2f       	mov	r24, r17
     b26:	0e 94 8d 03 	call	0x71a	; 0x71a <start_cal_sensor>
     b2a:	80 91 e7 21 	lds	r24, 0x21E7
     b2e:	90 91 e8 21 	lds	r25, 0x21E8
     b32:	92 60       	ori	r25, 0x02	; 2
     b34:	80 93 e7 21 	sts	0x21E7, r24
     b38:	90 93 e8 21 	sts	0x21E8, r25
     b3c:	01 e0       	ldi	r16, 0x01	; 1
     b3e:	01 c0       	rjmp	.+2      	; 0xb42 <process_sensor+0x402>
     b40:	00 e0       	ldi	r16, 0x00	; 0
     b42:	80 91 58 21 	lds	r24, 0x2158
     b46:	80 93 e9 21 	sts	0x21E9, r24
     b4a:	57 c0       	rjmp	.+174    	; 0xbfa <process_sensor+0x4ba>
     b4c:	80 91 58 21 	lds	r24, 0x2158
     b50:	80 93 e9 21 	sts	0x21E9, r24
     b54:	82 81       	ldd	r24, Z+2	; 0x02
     b56:	88 23       	and	r24, r24
     b58:	99 f1       	breq	.+102    	; 0xbc0 <process_sensor+0x480>
     b5a:	c4 01       	movw	r24, r8
     b5c:	97 fe       	sbrs	r9, 7
     b5e:	02 c0       	rjmp	.+4      	; 0xb64 <process_sensor+0x424>
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	20 91 e7 21 	lds	r18, 0x21E7
     b68:	30 91 e8 21 	lds	r19, 0x21E8
     b6c:	68 17       	cp	r22, r24
     b6e:	79 07       	cpc	r23, r25
     b70:	60 f4       	brcc	.+24     	; 0xb8a <process_sensor+0x44a>
     b72:	f5 01       	movw	r30, r10
     b74:	e5 51       	subi	r30, 0x15	; 21
     b76:	fe 4d       	sbci	r31, 0xDE	; 222
     b78:	80 e1       	ldi	r24, 0x10	; 16
     b7a:	80 83       	st	Z, r24
     b7c:	21 60       	ori	r18, 0x01	; 1
     b7e:	20 93 e7 21 	sts	0x21E7, r18
     b82:	30 93 e8 21 	sts	0x21E8, r19
     b86:	00 e0       	ldi	r16, 0x00	; 0
     b88:	06 c0       	rjmp	.+12     	; 0xb96 <process_sensor+0x456>
     b8a:	34 60       	ori	r19, 0x04	; 4
     b8c:	20 93 e7 21 	sts	0x21E7, r18
     b90:	30 93 e8 21 	sts	0x21E8, r19
     b94:	01 e0       	ldi	r16, 0x01	; 1
     b96:	f5 01       	movw	r30, r10
     b98:	e5 51       	subi	r30, 0x15	; 21
     b9a:	fe 4d       	sbci	r31, 0xDE	; 222
     b9c:	82 81       	ldd	r24, Z+2	; 0x02
     b9e:	81 50       	subi	r24, 0x01	; 1
     ba0:	82 83       	std	Z+2, r24	; 0x02
     ba2:	2b c0       	rjmp	.+86     	; 0xbfa <process_sensor+0x4ba>
     ba4:	a5 81       	ldd	r26, Z+5	; 0x05
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	a6 5a       	subi	r26, 0xA6	; 166
     baa:	bf 4d       	sbci	r27, 0xDF	; 223
     bac:	8c 91       	ld	r24, X
     bae:	8f 5f       	subi	r24, 0xFF	; 255
     bb0:	8c 93       	st	X, r24
     bb2:	42 fd       	sbrc	r20, 2
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <process_sensor+0x488>
     bb6:	87 ff       	sbrs	r24, 7
     bb8:	03 c0       	rjmp	.+6      	; 0xbc0 <process_sensor+0x480>
     bba:	80 e1       	ldi	r24, 0x10	; 16
     bbc:	80 83       	st	Z, r24
     bbe:	1c c0       	rjmp	.+56     	; 0xbf8 <process_sensor+0x4b8>
     bc0:	81 2f       	mov	r24, r17
     bc2:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <goto_no_detect>
     bc6:	18 c0       	rjmp	.+48     	; 0xbf8 <process_sensor+0x4b8>
     bc8:	90 91 5c 21 	lds	r25, 0x215C
     bcc:	89 17       	cp	r24, r25
     bce:	70 f0       	brcs	.+28     	; 0xbec <process_sensor+0x4ac>
     bd0:	81 2f       	mov	r24, r17
     bd2:	0e 94 8d 03 	call	0x71a	; 0x71a <start_cal_sensor>
     bd6:	80 91 e7 21 	lds	r24, 0x21E7
     bda:	90 91 e8 21 	lds	r25, 0x21E8
     bde:	90 61       	ori	r25, 0x10	; 16
     be0:	80 93 e7 21 	sts	0x21E7, r24
     be4:	90 93 e8 21 	sts	0x21E8, r25
     be8:	01 e0       	ldi	r16, 0x01	; 1
     bea:	07 c0       	rjmp	.+14     	; 0xbfa <process_sensor+0x4ba>
     bec:	80 91 e7 21 	lds	r24, 0x21E7
     bf0:	90 91 e8 21 	lds	r25, 0x21E8
     bf4:	94 60       	ori	r25, 0x04	; 4
     bf6:	f4 cf       	rjmp	.-24     	; 0xbe0 <process_sensor+0x4a0>
     bf8:	00 e0       	ldi	r16, 0x00	; 0
     bfa:	80 2f       	mov	r24, r16
     bfc:	0f 90       	pop	r0
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	1f 91       	pop	r17
     c04:	0f 91       	pop	r16
     c06:	ff 90       	pop	r15
     c08:	ef 90       	pop	r14
     c0a:	df 90       	pop	r13
     c0c:	bf 90       	pop	r11
     c0e:	af 90       	pop	r10
     c10:	9f 90       	pop	r9
     c12:	8f 90       	pop	r8
     c14:	7f 90       	pop	r7
     c16:	6f 90       	pop	r6
     c18:	5f 90       	pop	r5
     c1a:	4f 90       	pop	r4
     c1c:	08 95       	ret

00000c1e <get_channel_delta>:
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	fc 01       	movw	r30, r24
     c22:	b0 96       	adiw	r30, 0x20	; 32
     c24:	2f e5       	ldi	r18, 0x5F	; 95
     c26:	31 e2       	ldi	r19, 0x21	; 33
     c28:	ee 0f       	add	r30, r30
     c2a:	ff 1f       	adc	r31, r31
     c2c:	e2 0f       	add	r30, r18
     c2e:	f3 1f       	adc	r31, r19
     c30:	dc 01       	movw	r26, r24
     c32:	aa 0f       	add	r26, r26
     c34:	bb 1f       	adc	r27, r27
     c36:	a2 0f       	add	r26, r18
     c38:	b3 1f       	adc	r27, r19
     c3a:	80 81       	ld	r24, Z
     c3c:	91 81       	ldd	r25, Z+1	; 0x01
     c3e:	2d 91       	ld	r18, X+
     c40:	3c 91       	ld	r19, X
     c42:	11 97       	sbiw	r26, 0x01	; 1
     c44:	82 1b       	sub	r24, r18
     c46:	93 0b       	sbc	r25, r19
     c48:	08 95       	ret

00000c4a <for_all_enabled_channels>:
     c4a:	ff 92       	push	r15
     c4c:	0f 93       	push	r16
     c4e:	1f 93       	push	r17
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	ec 01       	movw	r28, r24
     c56:	10 e0       	ldi	r17, 0x00	; 0
     c58:	1a c0       	rjmp	.+52     	; 0xc8e <for_all_enabled_channels+0x44>
     c5a:	e1 2f       	mov	r30, r17
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	83 e0       	ldi	r24, 0x03	; 3
     c60:	ee 0f       	add	r30, r30
     c62:	ff 1f       	adc	r31, r31
     c64:	8a 95       	dec	r24
     c66:	e1 f7       	brne	.-8      	; 0xc60 <for_all_enabled_channels+0x16>
     c68:	e5 51       	subi	r30, 0x15	; 21
     c6a:	fe 4d       	sbci	r31, 0xDE	; 222
     c6c:	84 81       	ldd	r24, Z+4	; 0x04
     c6e:	80 7c       	andi	r24, 0xC0	; 192
     c70:	21 f4       	brne	.+8      	; 0xc7a <for_all_enabled_channels+0x30>
     c72:	85 81       	ldd	r24, Z+5	; 0x05
     c74:	fe 01       	movw	r30, r28
     c76:	09 95       	icall
     c78:	09 c0       	rjmp	.+18     	; 0xc8c <for_all_enabled_channels+0x42>
     c7a:	f6 80       	ldd	r15, Z+6	; 0x06
     c7c:	05 81       	ldd	r16, Z+5	; 0x05
     c7e:	04 c0       	rjmp	.+8      	; 0xc88 <for_all_enabled_channels+0x3e>
     c80:	80 2f       	mov	r24, r16
     c82:	fe 01       	movw	r30, r28
     c84:	09 95       	icall
     c86:	0f 5f       	subi	r16, 0xFF	; 255
     c88:	f0 16       	cp	r15, r16
     c8a:	d0 f7       	brcc	.-12     	; 0xc80 <for_all_enabled_channels+0x36>
     c8c:	1f 5f       	subi	r17, 0xFF	; 255
     c8e:	80 91 ea 21 	lds	r24, 0x21EA
     c92:	18 17       	cp	r17, r24
     c94:	10 f3       	brcs	.-60     	; 0xc5a <for_all_enabled_channels+0x10>
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	e5 e0       	ldi	r30, 0x05	; 5
     c9c:	0c 94 04 11 	jmp	0x2208	; 0x2208 <__epilogue_restores__+0x1a>

00000ca0 <set_burst_mask>:
     ca0:	48 2f       	mov	r20, r24
     ca2:	46 95       	lsr	r20
     ca4:	46 95       	lsr	r20
     ca6:	46 95       	lsr	r20
     ca8:	50 e0       	ldi	r21, 0x00	; 0
     caa:	44 0f       	add	r20, r20
     cac:	55 1f       	adc	r21, r21
     cae:	da 01       	movw	r26, r20
     cb0:	a7 5d       	subi	r26, 0xD7	; 215
     cb2:	bf 4d       	sbci	r27, 0xDF	; 223
     cb4:	21 e0       	ldi	r18, 0x01	; 1
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	b9 01       	movw	r22, r18
     cba:	0c 90       	ld	r0, X
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <set_burst_mask+0x22>
     cbe:	66 0f       	add	r22, r22
     cc0:	77 1f       	adc	r23, r23
     cc2:	0a 94       	dec	r0
     cc4:	e2 f7       	brpl	.-8      	; 0xcbe <set_burst_mask+0x1e>
     cc6:	90 91 f0 22 	lds	r25, 0x22F0
     cca:	96 2b       	or	r25, r22
     ccc:	90 93 f0 22 	sts	0x22F0, r25
     cd0:	4f 5d       	subi	r20, 0xDF	; 223
     cd2:	5f 4d       	sbci	r21, 0xDF	; 223
     cd4:	fa 01       	movw	r30, r20
     cd6:	00 80       	ld	r0, Z
     cd8:	02 c0       	rjmp	.+4      	; 0xcde <set_burst_mask+0x3e>
     cda:	22 0f       	add	r18, r18
     cdc:	33 1f       	adc	r19, r19
     cde:	0a 94       	dec	r0
     ce0:	e2 f7       	brpl	.-8      	; 0xcda <set_burst_mask+0x3a>
     ce2:	90 91 f1 22 	lds	r25, 0x22F1
     ce6:	92 2b       	or	r25, r18
     ce8:	90 93 f1 22 	sts	0x22F1, r25
     cec:	87 70       	andi	r24, 0x07	; 7
     cee:	e8 2f       	mov	r30, r24
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	ee 0f       	add	r30, r30
     cf4:	ff 1f       	adc	r31, r31
     cf6:	ee 0f       	add	r30, r30
     cf8:	ff 1f       	adc	r31, r31
     cfa:	ef 5c       	subi	r30, 0xCF	; 207
     cfc:	ff 4d       	sbci	r31, 0xDF	; 223
     cfe:	a3 81       	ldd	r26, Z+3	; 0x03
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	a0 51       	subi	r26, 0x10	; 16
     d04:	bd 4d       	sbci	r27, 0xDD	; 221
     d06:	8c 91       	ld	r24, X
     d08:	92 81       	ldd	r25, Z+2	; 0x02
     d0a:	89 2b       	or	r24, r25
     d0c:	8c 93       	st	X, r24
     d0e:	08 95       	ret

00000d10 <burst_channel>:
     d10:	a8 2f       	mov	r26, r24
     d12:	a7 70       	andi	r26, 0x07	; 7
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	aa 0f       	add	r26, r26
     d18:	bb 1f       	adc	r27, r27
     d1a:	aa 0f       	add	r26, r26
     d1c:	bb 1f       	adc	r27, r27
     d1e:	af 5c       	subi	r26, 0xCF	; 207
     d20:	bf 4d       	sbci	r27, 0xDF	; 223
     d22:	ed 91       	ld	r30, X+
     d24:	fc 91       	ld	r31, X
     d26:	11 97       	sbiw	r26, 0x01	; 1
     d28:	30 97       	sbiw	r30, 0x00	; 0
     d2a:	19 f0       	breq	.+6      	; 0xd32 <burst_channel+0x22>
     d2c:	12 96       	adiw	r26, 0x02	; 2
     d2e:	6c 91       	ld	r22, X
     d30:	09 95       	icall
     d32:	8f b7       	in	r24, 0x3f	; 63
     d34:	90 91 ec 22 	lds	r25, 0x22EC
     d38:	89 2b       	or	r24, r25
     d3a:	8f bf       	out	0x3f, r24	; 63
     d3c:	08 95       	ret

00000d3e <burst_init>:
     d3e:	0f 93       	push	r16
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	80 93 00 20 	sts	0x2000, r24
     d46:	10 92 f0 22 	sts	0x22F0, r1
     d4a:	10 92 f1 22 	sts	0x22F1, r1
     d4e:	10 92 f2 22 	sts	0x22F2, r1
     d52:	10 92 f3 22 	sts	0x22F3, r1
     d56:	10 92 f4 22 	sts	0x22F4, r1
     d5a:	80 e5       	ldi	r24, 0x50	; 80
     d5c:	96 e0       	ldi	r25, 0x06	; 6
     d5e:	0e 94 25 06 	call	0xc4a	; 0xc4a <for_all_enabled_channels>
     d62:	80 91 f1 22 	lds	r24, 0x22F1
     d66:	60 91 f0 22 	lds	r22, 0x22F0
     d6a:	40 91 f2 22 	lds	r20, 0x22F2
     d6e:	20 91 f3 22 	lds	r18, 0x22F3
     d72:	00 91 f4 22 	lds	r16, 0x22F4
     d76:	0e 94 1d 01 	call	0x23a	; 0x23a <_00110000001_>
     d7a:	0f 91       	pop	r16
     d7c:	08 95       	ret

00000d7e <burst_reset>:
     d7e:	e1 e0       	ldi	r30, 0x01	; 1
     d80:	f0 e2       	ldi	r31, 0x20	; 32
     d82:	80 e2       	ldi	r24, 0x20	; 32
     d84:	90 e4       	ldi	r25, 0x40	; 64
     d86:	91 93       	st	Z+, r25
     d88:	81 50       	subi	r24, 0x01	; 1
     d8a:	e9 f7       	brne	.-6      	; 0xd86 <burst_reset+0x8>
     d8c:	08 95       	ret

00000d8e <burst>:
     d8e:	a7 e0       	ldi	r26, 0x07	; 7
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	ed ec       	ldi	r30, 0xCD	; 205
     d94:	f6 e0       	ldi	r31, 0x06	; 6
     d96:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__prologue_saves__>
     d9a:	8f b7       	in	r24, 0x3f	; 63
     d9c:	80 78       	andi	r24, 0x80	; 128
     d9e:	80 93 ec 22 	sts	0x22EC, r24
     da2:	00 e8       	ldi	r16, 0x80	; 128
     da4:	11 e0       	ldi	r17, 0x01	; 1
     da6:	f8 01       	movw	r30, r16
     da8:	30 80       	ld	r3, Z
     daa:	e0 e8       	ldi	r30, 0x80	; 128
     dac:	f3 e0       	ldi	r31, 0x03	; 3
     dae:	20 80       	ld	r2, Z
     db0:	40 e4       	ldi	r20, 0x40	; 64
     db2:	e4 2e       	mov	r14, r20
     db4:	48 e0       	ldi	r20, 0x08	; 8
     db6:	f4 2e       	mov	r15, r20
     db8:	f7 01       	movw	r30, r14
     dba:	20 81       	ld	r18, Z
     dbc:	53 e4       	ldi	r21, 0x43	; 67
     dbe:	c5 2e       	mov	r12, r21
     dc0:	58 e0       	ldi	r21, 0x08	; 8
     dc2:	d5 2e       	mov	r13, r21
     dc4:	f6 01       	movw	r30, r12
     dc6:	30 81       	ld	r19, Z
     dc8:	6c e4       	ldi	r22, 0x4C	; 76
     dca:	a6 2e       	mov	r10, r22
     dcc:	68 e0       	ldi	r22, 0x08	; 8
     dce:	b6 2e       	mov	r11, r22
     dd0:	f5 01       	movw	r30, r10
     dd2:	40 81       	ld	r20, Z
     dd4:	70 e6       	ldi	r23, 0x60	; 96
     dd6:	87 2e       	mov	r8, r23
     dd8:	78 e0       	ldi	r23, 0x08	; 8
     dda:	97 2e       	mov	r9, r23
     ddc:	f4 01       	movw	r30, r8
     dde:	01 90       	ld	r0, Z+
     de0:	f0 81       	ld	r31, Z
     de2:	e0 2d       	mov	r30, r0
     de4:	e9 83       	std	Y+1, r30	; 0x01
     de6:	fa 83       	std	Y+2, r31	; 0x02
     de8:	81 e7       	ldi	r24, 0x71	; 113
     dea:	68 2e       	mov	r6, r24
     dec:	71 2c       	mov	r7, r1
     dee:	f3 01       	movw	r30, r6
     df0:	50 81       	ld	r21, Z
     df2:	92 e8       	ldi	r25, 0x82	; 130
     df4:	49 2e       	mov	r4, r25
     df6:	93 e0       	ldi	r25, 0x03	; 3
     df8:	59 2e       	mov	r5, r25
     dfa:	f2 01       	movw	r30, r4
     dfc:	60 81       	ld	r22, Z
     dfe:	e0 e8       	ldi	r30, 0x80	; 128
     e00:	f3 e0       	ldi	r31, 0x03	; 3
     e02:	80 81       	ld	r24, Z
     e04:	80 6c       	ori	r24, 0xC0	; 192
     e06:	80 83       	st	Z, r24
     e08:	88 e2       	ldi	r24, 0x28	; 40
     e0a:	f6 01       	movw	r30, r12
     e0c:	80 83       	st	Z, r24
     e0e:	80 e1       	ldi	r24, 0x10	; 16
     e10:	f8 01       	movw	r30, r16
     e12:	80 83       	st	Z, r24
     e14:	82 e0       	ldi	r24, 0x02	; 2
     e16:	f7 01       	movw	r30, r14
     e18:	80 83       	st	Z, r24
     e1a:	e0 e8       	ldi	r30, 0x80	; 128
     e1c:	f3 e0       	ldi	r31, 0x03	; 3
     e1e:	80 81       	ld	r24, Z
     e20:	81 60       	ori	r24, 0x01	; 1
     e22:	80 83       	st	Z, r24
     e24:	f8 94       	cli
     e26:	88 e8       	ldi	r24, 0x88	; 136
     e28:	96 e0       	ldi	r25, 0x06	; 6
     e2a:	2b 83       	std	Y+3, r18	; 0x03
     e2c:	3c 83       	std	Y+4, r19	; 0x04
     e2e:	4d 83       	std	Y+5, r20	; 0x05
     e30:	5e 83       	std	Y+6, r21	; 0x06
     e32:	6f 83       	std	Y+7, r22	; 0x07
     e34:	0e 94 25 06 	call	0xc4a	; 0xc4a <for_all_enabled_channels>
     e38:	f8 01       	movw	r30, r16
     e3a:	30 82       	st	Z, r3
     e3c:	e0 e8       	ldi	r30, 0x80	; 128
     e3e:	f3 e0       	ldi	r31, 0x03	; 3
     e40:	20 82       	st	Z, r2
     e42:	2b 81       	ldd	r18, Y+3	; 0x03
     e44:	f7 01       	movw	r30, r14
     e46:	20 83       	st	Z, r18
     e48:	3c 81       	ldd	r19, Y+4	; 0x04
     e4a:	f6 01       	movw	r30, r12
     e4c:	30 83       	st	Z, r19
     e4e:	4d 81       	ldd	r20, Y+5	; 0x05
     e50:	f5 01       	movw	r30, r10
     e52:	40 83       	st	Z, r20
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	9a 81       	ldd	r25, Y+2	; 0x02
     e58:	f4 01       	movw	r30, r8
     e5a:	80 83       	st	Z, r24
     e5c:	91 83       	std	Z+1, r25	; 0x01
     e5e:	5e 81       	ldd	r21, Y+6	; 0x06
     e60:	f3 01       	movw	r30, r6
     e62:	50 83       	st	Z, r21
     e64:	6f 81       	ldd	r22, Y+7	; 0x07
     e66:	f2 01       	movw	r30, r4
     e68:	60 83       	st	Z, r22
     e6a:	8f b7       	in	r24, 0x3f	; 63
     e6c:	90 91 ec 22 	lds	r25, 0x22EC
     e70:	89 2b       	or	r24, r25
     e72:	8f bf       	out	0x3f, r24	; 63
     e74:	27 96       	adiw	r28, 0x07	; 7
     e76:	e2 e1       	ldi	r30, 0x12	; 18
     e78:	0c 94 f7 10 	jmp	0x21ee	; 0x21ee <__epilogue_restores__>

00000e7c <init_rotor_slider>:
     e7c:	af 92       	push	r10
     e7e:	cf 92       	push	r12
     e80:	ef 92       	push	r14
     e82:	0f 93       	push	r16
     e84:	9c 2d       	mov	r25, r12
     e86:	e0 91 ea 21 	lds	r30, 0x21EA
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	33 e0       	ldi	r19, 0x03	; 3
     e8e:	ee 0f       	add	r30, r30
     e90:	ff 1f       	adc	r31, r31
     e92:	3a 95       	dec	r19
     e94:	e1 f7       	brne	.-8      	; 0xe8e <init_rotor_slider+0x12>
     e96:	e5 51       	subi	r30, 0x15	; 21
     e98:	fe 4d       	sbci	r31, 0xDE	; 222
     e9a:	23 83       	std	Z+3, r18	; 0x03
     e9c:	20 91 f6 22 	lds	r18, 0x22F6
     ea0:	27 83       	std	Z+7, r18	; 0x07
     ea2:	47 70       	andi	r20, 0x07	; 7
     ea4:	85 83       	std	Z+5, r24	; 0x05
     ea6:	66 83       	std	Z+6, r22	; 0x06
     ea8:	03 70       	andi	r16, 0x03	; 3
     eaa:	44 0f       	add	r20, r20
     eac:	44 0f       	add	r20, r20
     eae:	44 0f       	add	r20, r20
     eb0:	04 2b       	or	r16, r20
     eb2:	04 83       	std	Z+4, r16	; 0x04
     eb4:	e2 2f       	mov	r30, r18
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	97 70       	andi	r25, 0x07	; 7
     eba:	e2 94       	swap	r14
     ebc:	ee 0c       	add	r14, r14
     ebe:	40 ee       	ldi	r20, 0xE0	; 224
     ec0:	e4 22       	and	r14, r20
     ec2:	9e 29       	or	r25, r14
     ec4:	53 e0       	ldi	r21, 0x03	; 3
     ec6:	ee 0f       	add	r30, r30
     ec8:	ff 1f       	adc	r31, r31
     eca:	5a 95       	dec	r21
     ecc:	e1 f7       	brne	.-8      	; 0xec6 <init_rotor_slider+0x4a>
     ece:	e6 58       	subi	r30, 0x86	; 134
     ed0:	ff 4d       	sbci	r31, 0xDF	; 223
     ed2:	90 83       	st	Z, r25
     ed4:	aa 20       	and	r10, r10
     ed6:	11 f0       	breq	.+4      	; 0xedc <init_rotor_slider+0x60>
     ed8:	98 60       	ori	r25, 0x08	; 8
     eda:	90 83       	st	Z, r25
     edc:	2f 5f       	subi	r18, 0xFF	; 255
     ede:	20 93 f6 22 	sts	0x22F6, r18
     ee2:	0f 91       	pop	r16
     ee4:	ef 90       	pop	r14
     ee6:	cf 90       	pop	r12
     ee8:	af 90       	pop	r10
     eea:	08 95       	ret

00000eec <divide>:
     eec:	9c 01       	movw	r18, r24
     eee:	61 15       	cp	r22, r1
     ef0:	71 05       	cpc	r23, r1
     ef2:	21 f1       	breq	.+72     	; 0xf3c <divide+0x50>
     ef4:	4f 5f       	subi	r20, 0xFF	; 255
     ef6:	03 c0       	rjmp	.+6      	; 0xefe <divide+0x12>
     ef8:	41 50       	subi	r20, 0x01	; 1
     efa:	22 0f       	add	r18, r18
     efc:	33 1f       	adc	r19, r19
     efe:	37 fd       	sbrc	r19, 7
     f00:	06 c0       	rjmp	.+12     	; 0xf0e <divide+0x22>
     f02:	44 23       	and	r20, r20
     f04:	c9 f7       	brne	.-14     	; 0xef8 <divide+0xc>
     f06:	03 c0       	rjmp	.+6      	; 0xf0e <divide+0x22>
     f08:	4f 5f       	subi	r20, 0xFF	; 255
     f0a:	66 0f       	add	r22, r22
     f0c:	77 1f       	adc	r23, r23
     f0e:	77 ff       	sbrs	r23, 7
     f10:	fb cf       	rjmp	.-10     	; 0xf08 <divide+0x1c>
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	0b c0       	rjmp	.+22     	; 0xf2e <divide+0x42>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	41 50       	subi	r20, 0x01	; 1
     f1e:	26 17       	cp	r18, r22
     f20:	37 07       	cpc	r19, r23
     f22:	18 f0       	brcs	.+6      	; 0xf2a <divide+0x3e>
     f24:	26 1b       	sub	r18, r22
     f26:	37 0b       	sbc	r19, r23
     f28:	01 96       	adiw	r24, 0x01	; 1
     f2a:	76 95       	lsr	r23
     f2c:	67 95       	ror	r22
     f2e:	44 23       	and	r20, r20
     f30:	39 f0       	breq	.+14     	; 0xf40 <divide+0x54>
     f32:	97 ff       	sbrs	r25, 7
     f34:	f1 cf       	rjmp	.-30     	; 0xf18 <divide+0x2c>
     f36:	8f ef       	ldi	r24, 0xFF	; 255
     f38:	9f ef       	ldi	r25, 0xFF	; 255
     f3a:	08 95       	ret
     f3c:	8f ef       	ldi	r24, 0xFF	; 255
     f3e:	9f ef       	ldi	r25, 0xFF	; 255
     f40:	08 95       	ret

00000f42 <movement>:
     f42:	fb 01       	movw	r30, r22
     f44:	23 81       	ldd	r18, Z+3	; 0x03
     f46:	34 81       	ldd	r19, Z+4	; 0x04
     f48:	46 e0       	ldi	r20, 0x06	; 6
     f4a:	36 95       	lsr	r19
     f4c:	27 95       	ror	r18
     f4e:	4a 95       	dec	r20
     f50:	e1 f7       	brne	.-8      	; 0xf4a <movement+0x8>
     f52:	82 1b       	sub	r24, r18
     f54:	93 0b       	sbc	r25, r19
     f56:	20 81       	ld	r18, Z
     f58:	23 ff       	sbrs	r18, 3
     f5a:	0c c0       	rjmp	.+24     	; 0xf74 <movement+0x32>
     f5c:	81 38       	cpi	r24, 0x81	; 129
     f5e:	91 05       	cpc	r25, r1
     f60:	1c f0       	brlt	.+6      	; 0xf68 <movement+0x26>
     f62:	80 50       	subi	r24, 0x00	; 0
     f64:	91 40       	sbci	r25, 0x01	; 1
     f66:	08 95       	ret
     f68:	2f ef       	ldi	r18, 0xFF	; 255
     f6a:	80 38       	cpi	r24, 0x80	; 128
     f6c:	92 07       	cpc	r25, r18
     f6e:	14 f4       	brge	.+4      	; 0xf74 <movement+0x32>
     f70:	80 50       	subi	r24, 0x00	; 0
     f72:	9f 4f       	sbci	r25, 0xFF	; 255
     f74:	08 95       	ret

00000f76 <slider_position>:
     f76:	a0 e0       	ldi	r26, 0x00	; 0
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e1 ec       	ldi	r30, 0xC1	; 193
     f7c:	f7 e0       	ldi	r31, 0x07	; 7
     f7e:	0c 94 e9 10 	jmp	0x21d2	; 0x21d2 <__prologue_saves__+0x16>
     f82:	e8 2f       	mov	r30, r24
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	53 e0       	ldi	r21, 0x03	; 3
     f88:	ee 0f       	add	r30, r30
     f8a:	ff 1f       	adc	r31, r31
     f8c:	5a 95       	dec	r21
     f8e:	e1 f7       	brne	.-8      	; 0xf88 <slider_position+0x12>
     f90:	e5 51       	subi	r30, 0x15	; 21
     f92:	fe 4d       	sbci	r31, 0xDE	; 222
     f94:	a7 81       	ldd	r26, Z+7	; 0x07
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	63 e0       	ldi	r22, 0x03	; 3
     f9a:	aa 0f       	add	r26, r26
     f9c:	bb 1f       	adc	r27, r27
     f9e:	6a 95       	dec	r22
     fa0:	e1 f7       	brne	.-8      	; 0xf9a <slider_position+0x24>
     fa2:	a6 58       	subi	r26, 0x86	; 134
     fa4:	bf 4d       	sbci	r27, 0xDF	; 223
     fa6:	0c 91       	ld	r16, X
     fa8:	08 70       	andi	r16, 0x08	; 8
     faa:	c6 81       	ldd	r28, Z+6	; 0x06
     fac:	d5 81       	ldd	r29, Z+5	; 0x05
     fae:	dc 2e       	mov	r13, r28
     fb0:	dd 1a       	sub	r13, r29
     fb2:	1d 2d       	mov	r17, r13
     fb4:	1f 5f       	subi	r17, 0xFF	; 255
     fb6:	ed 2e       	mov	r14, r29
     fb8:	ff 24       	eor	r15, r15
     fba:	14 c0       	rjmp	.+40     	; 0xfe4 <slider_position+0x6e>
     fbc:	8d 2f       	mov	r24, r29
     fbe:	0e 94 0f 06 	call	0xc1e	; 0xc1e <get_channel_delta>
     fc2:	ed 2f       	mov	r30, r29
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	ee 19       	sub	r30, r14
     fc8:	ff 09       	sbc	r31, r15
     fca:	ee 0f       	add	r30, r30
     fcc:	ff 1f       	adc	r31, r31
     fce:	e6 56       	subi	r30, 0x66	; 102
     fd0:	ff 4d       	sbci	r31, 0xDF	; 223
     fd2:	18 16       	cp	r1, r24
     fd4:	19 06       	cpc	r1, r25
     fd6:	1c f4       	brge	.+6      	; 0xfde <slider_position+0x68>
     fd8:	80 83       	st	Z, r24
     fda:	91 83       	std	Z+1, r25	; 0x01
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <slider_position+0x6c>
     fde:	10 82       	st	Z, r1
     fe0:	11 82       	std	Z+1, r1	; 0x01
     fe2:	df 5f       	subi	r29, 0xFF	; 255
     fe4:	cd 17       	cp	r28, r29
     fe6:	50 f7       	brcc	.-44     	; 0xfbc <slider_position+0x46>
     fe8:	60 91 9a 20 	lds	r22, 0x209A
     fec:	50 91 9b 20 	lds	r21, 0x209B
     ff0:	ec e9       	ldi	r30, 0x9C	; 156
     ff2:	f0 e2       	ldi	r31, 0x20	; 32
     ff4:	a6 2f       	mov	r26, r22
     ff6:	b5 2f       	mov	r27, r21
     ff8:	40 e0       	ldi	r20, 0x00	; 0
     ffa:	21 e0       	ldi	r18, 0x01	; 1
     ffc:	08 c0       	rjmp	.+16     	; 0x100e <slider_position+0x98>
     ffe:	81 91       	ld	r24, Z+
    1000:	91 91       	ld	r25, Z+
    1002:	a8 17       	cp	r26, r24
    1004:	b9 07       	cpc	r27, r25
    1006:	10 f4       	brcc	.+4      	; 0x100c <slider_position+0x96>
    1008:	dc 01       	movw	r26, r24
    100a:	42 2f       	mov	r20, r18
    100c:	2f 5f       	subi	r18, 0xFF	; 255
    100e:	21 17       	cp	r18, r17
    1010:	b0 f3       	brcs	.-20     	; 0xffe <slider_position+0x88>
    1012:	44 23       	and	r20, r20
    1014:	91 f4       	brne	.+36     	; 0x103a <slider_position+0xc4>
    1016:	00 23       	and	r16, r16
    1018:	d1 f0       	breq	.+52     	; 0x104e <slider_position+0xd8>
    101a:	e1 2f       	mov	r30, r17
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	ee 0f       	add	r30, r30
    1020:	ff 1f       	adc	r31, r31
    1022:	e8 56       	subi	r30, 0x68	; 104
    1024:	ff 4d       	sbci	r31, 0xDF	; 223
    1026:	20 81       	ld	r18, Z
    1028:	31 81       	ldd	r19, Z+1	; 0x01
    102a:	80 91 9c 20 	lds	r24, 0x209C
    102e:	90 91 9d 20 	lds	r25, 0x209D
    1032:	82 17       	cp	r24, r18
    1034:	93 07       	cpc	r25, r19
    1036:	70 f0       	brcs	.+28     	; 0x1054 <slider_position+0xde>
    1038:	08 c0       	rjmp	.+16     	; 0x104a <slider_position+0xd4>
    103a:	e4 2f       	mov	r30, r20
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	ee 0f       	add	r30, r30
    1040:	ff 1f       	adc	r31, r31
    1042:	e8 56       	subi	r30, 0x68	; 104
    1044:	ff 4d       	sbci	r31, 0xDF	; 223
    1046:	20 81       	ld	r18, Z
    1048:	31 81       	ldd	r19, Z+1	; 0x01
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	04 c0       	rjmp	.+8      	; 0x1056 <slider_position+0xe0>
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	fb cf       	rjmp	.-10     	; 0x104a <slider_position+0xd4>
    1054:	71 e0       	ldi	r23, 0x01	; 1
    1056:	4d 15       	cp	r20, r13
    1058:	29 f4       	brne	.+10     	; 0x1064 <slider_position+0xee>
    105a:	00 23       	and	r16, r16
    105c:	61 f0       	breq	.+24     	; 0x1076 <slider_position+0x100>
    105e:	86 2f       	mov	r24, r22
    1060:	95 2f       	mov	r25, r21
    1062:	0b c0       	rjmp	.+22     	; 0x107a <slider_position+0x104>
    1064:	e4 2f       	mov	r30, r20
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	ee 0f       	add	r30, r30
    106a:	ff 1f       	adc	r31, r31
    106c:	e4 56       	subi	r30, 0x64	; 100
    106e:	ff 4d       	sbci	r31, 0xDF	; 223
    1070:	80 81       	ld	r24, Z
    1072:	91 81       	ldd	r25, Z+1	; 0x01
    1074:	02 c0       	rjmp	.+4      	; 0x107a <slider_position+0x104>
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	77 23       	and	r23, r23
    107c:	11 f0       	breq	.+4      	; 0x1082 <slider_position+0x10c>
    107e:	d1 2f       	mov	r29, r17
    1080:	01 c0       	rjmp	.+2      	; 0x1084 <slider_position+0x10e>
    1082:	d4 2f       	mov	r29, r20
    1084:	dd 0f       	add	r29, r29
    1086:	dd 0f       	add	r29, r29
    1088:	40 e0       	ldi	r20, 0x00	; 0
    108a:	c4 2f       	mov	r28, r20
    108c:	28 17       	cp	r18, r24
    108e:	39 07       	cpc	r19, r25
    1090:	78 f0       	brcs	.+30     	; 0x10b0 <slider_position+0x13a>
    1092:	ad 01       	movw	r20, r26
    1094:	48 1b       	sub	r20, r24
    1096:	59 0b       	sbc	r21, r25
    1098:	ba 01       	movw	r22, r20
    109a:	68 1b       	sub	r22, r24
    109c:	79 0b       	sbc	r23, r25
    109e:	62 0f       	add	r22, r18
    10a0:	73 1f       	adc	r23, r19
    10a2:	ca 01       	movw	r24, r20
    10a4:	4a e0       	ldi	r20, 0x0A	; 10
    10a6:	0e 94 76 07 	call	0xeec	; 0xeec <divide>
    10aa:	80 50       	subi	r24, 0x00	; 0
    10ac:	94 40       	sbci	r25, 0x04	; 4
    10ae:	0a c0       	rjmp	.+20     	; 0x10c4 <slider_position+0x14e>
    10b0:	82 1b       	sub	r24, r18
    10b2:	93 0b       	sbc	r25, r19
    10b4:	bd 01       	movw	r22, r26
    10b6:	62 1b       	sub	r22, r18
    10b8:	73 0b       	sbc	r23, r19
    10ba:	68 0f       	add	r22, r24
    10bc:	79 1f       	adc	r23, r25
    10be:	4a e0       	ldi	r20, 0x0A	; 10
    10c0:	0e 94 76 07 	call	0xeec	; 0xeec <divide>
    10c4:	c8 0f       	add	r28, r24
    10c6:	d9 1f       	adc	r29, r25
    10c8:	13 30       	cpi	r17, 0x03	; 3
    10ca:	78 f0       	brcs	.+30     	; 0x10ea <slider_position+0x174>
    10cc:	00 23       	and	r16, r16
    10ce:	21 f0       	breq	.+8      	; 0x10d8 <slider_position+0x162>
    10d0:	ce 01       	movw	r24, r28
    10d2:	61 2f       	mov	r22, r17
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	05 c0       	rjmp	.+10     	; 0x10e2 <slider_position+0x16c>
    10d8:	61 2f       	mov	r22, r17
    10da:	70 e0       	ldi	r23, 0x00	; 0
    10dc:	61 50       	subi	r22, 0x01	; 1
    10de:	70 40       	sbci	r23, 0x00	; 0
    10e0:	ce 01       	movw	r24, r28
    10e2:	40 e0       	ldi	r20, 0x00	; 0
    10e4:	0e 94 76 07 	call	0xeec	; 0xeec <divide>
    10e8:	ec 01       	movw	r28, r24
    10ea:	ce 01       	movw	r24, r28
    10ec:	80 70       	andi	r24, 0x00	; 0
    10ee:	9c 7f       	andi	r25, 0xFC	; 252
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	11 f0       	breq	.+4      	; 0x10f8 <slider_position+0x182>
    10f4:	cf ef       	ldi	r28, 0xFF	; 255
    10f6:	d3 e0       	ldi	r29, 0x03	; 3
    10f8:	00 23       	and	r16, r16
    10fa:	29 f0       	breq	.+10     	; 0x1106 <slider_position+0x190>
    10fc:	d6 95       	lsr	r29
    10fe:	c7 95       	ror	r28
    1100:	d6 95       	lsr	r29
    1102:	c7 95       	ror	r28
    1104:	22 c0       	rjmp	.+68     	; 0x114a <slider_position+0x1d4>
    1106:	c6 36       	cpi	r28, 0x66	; 102
    1108:	d1 05       	cpc	r29, r1
    110a:	18 f0       	brcs	.+6      	; 0x1112 <slider_position+0x19c>
    110c:	c6 56       	subi	r28, 0x66	; 102
    110e:	d0 40       	sbci	r29, 0x00	; 0
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <slider_position+0x1a0>
    1112:	c0 e0       	ldi	r28, 0x00	; 0
    1114:	d0 e0       	ldi	r29, 0x00	; 0
    1116:	be 01       	movw	r22, r28
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	28 e3       	ldi	r18, 0x38	; 56
    111e:	3f e9       	ldi	r19, 0x9F	; 159
    1120:	40 e0       	ldi	r20, 0x00	; 0
    1122:	50 e0       	ldi	r21, 0x00	; 0
    1124:	0e 94 c3 10 	call	0x2186	; 0x2186 <__mulsi3>
    1128:	ab 01       	movw	r20, r22
    112a:	bc 01       	movw	r22, r24
    112c:	e1 e1       	ldi	r30, 0x11	; 17
    112e:	76 95       	lsr	r23
    1130:	67 95       	ror	r22
    1132:	57 95       	ror	r21
    1134:	47 95       	ror	r20
    1136:	ea 95       	dec	r30
    1138:	d1 f7       	brne	.-12     	; 0x112e <slider_position+0x1b8>
    113a:	c4 2f       	mov	r28, r20
    113c:	d5 2f       	mov	r29, r21
    113e:	cf 3f       	cpi	r28, 0xFF	; 255
    1140:	d1 05       	cpc	r29, r1
    1142:	19 f0       	breq	.+6      	; 0x114a <slider_position+0x1d4>
    1144:	10 f0       	brcs	.+4      	; 0x114a <slider_position+0x1d4>
    1146:	cf ef       	ldi	r28, 0xFF	; 255
    1148:	d0 e0       	ldi	r29, 0x00	; 0
    114a:	ce 01       	movw	r24, r28
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
    1150:	e7 e0       	ldi	r30, 0x07	; 7
    1152:	0c 94 02 11 	jmp	0x2204	; 0x2204 <__epilogue_restores__+0x16>

00001156 <qt_enable_rotor>:
    1156:	af 92       	push	r10
    1158:	cf 92       	push	r12
    115a:	ef 92       	push	r14
    115c:	0f 93       	push	r16
    115e:	aa 24       	eor	r10, r10
    1160:	a3 94       	inc	r10
    1162:	0e 94 3e 07 	call	0xe7c	; 0xe7c <init_rotor_slider>
    1166:	90 91 ea 21 	lds	r25, 0x21EA
    116a:	e9 2f       	mov	r30, r25
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	73 e0       	ldi	r23, 0x03	; 3
    1170:	ee 0f       	add	r30, r30
    1172:	ff 1f       	adc	r31, r31
    1174:	7a 95       	dec	r23
    1176:	e1 f7       	brne	.-8      	; 0x1170 <qt_enable_rotor+0x1a>
    1178:	e5 51       	subi	r30, 0x15	; 21
    117a:	fe 4d       	sbci	r31, 0xDE	; 222
    117c:	84 81       	ldd	r24, Z+4	; 0x04
    117e:	80 64       	ori	r24, 0x40	; 64
    1180:	84 83       	std	Z+4, r24	; 0x04
    1182:	9f 5f       	subi	r25, 0xFF	; 255
    1184:	90 93 ea 21 	sts	0x21EA, r25
    1188:	0f 91       	pop	r16
    118a:	ef 90       	pop	r14
    118c:	cf 90       	pop	r12
    118e:	af 90       	pop	r10
    1190:	08 95       	ret

00001192 <qt_enable_slider>:
    1192:	af 92       	push	r10
    1194:	cf 92       	push	r12
    1196:	ef 92       	push	r14
    1198:	0f 93       	push	r16
    119a:	aa 24       	eor	r10, r10
    119c:	0e 94 3e 07 	call	0xe7c	; 0xe7c <init_rotor_slider>
    11a0:	90 91 ea 21 	lds	r25, 0x21EA
    11a4:	e9 2f       	mov	r30, r25
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	a3 e0       	ldi	r26, 0x03	; 3
    11aa:	ee 0f       	add	r30, r30
    11ac:	ff 1f       	adc	r31, r31
    11ae:	aa 95       	dec	r26
    11b0:	e1 f7       	brne	.-8      	; 0x11aa <qt_enable_slider+0x18>
    11b2:	e5 51       	subi	r30, 0x15	; 21
    11b4:	fe 4d       	sbci	r31, 0xDE	; 222
    11b6:	84 81       	ldd	r24, Z+4	; 0x04
    11b8:	80 68       	ori	r24, 0x80	; 128
    11ba:	84 83       	std	Z+4, r24	; 0x04
    11bc:	9f 5f       	subi	r25, 0xFF	; 255
    11be:	90 93 ea 21 	sts	0x21EA, r25
    11c2:	0f 91       	pop	r16
    11c4:	ef 90       	pop	r14
    11c6:	cf 90       	pop	r12
    11c8:	af 90       	pop	r10
    11ca:	08 95       	ret

000011cc <calc_rotor_slider_sensor_delta>:
    11cc:	a0 e0       	ldi	r26, 0x00	; 0
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	ec ee       	ldi	r30, 0xEC	; 236
    11d2:	f8 e0       	ldi	r31, 0x08	; 8
    11d4:	0c 94 e8 10 	jmp	0x21d0	; 0x21d0 <__prologue_saves__+0x14>
    11d8:	c8 2f       	mov	r28, r24
    11da:	d0 e0       	ldi	r29, 0x00	; 0
    11dc:	13 e0       	ldi	r17, 0x03	; 3
    11de:	cc 0f       	add	r28, r28
    11e0:	dd 1f       	adc	r29, r29
    11e2:	1a 95       	dec	r17
    11e4:	e1 f7       	brne	.-8      	; 0x11de <calc_rotor_slider_sensor_delta+0x12>
    11e6:	c5 51       	subi	r28, 0x15	; 21
    11e8:	de 4d       	sbci	r29, 0xDE	; 222
    11ea:	0e 81       	ldd	r16, Y+6	; 0x06
    11ec:	16 2f       	mov	r17, r22
    11ee:	ee 24       	eor	r14, r14
    11f0:	ff 24       	eor	r15, r15
    11f2:	50 e0       	ldi	r21, 0x00	; 0
    11f4:	cc 24       	eor	r12, r12
    11f6:	dd 24       	eor	r13, r13
    11f8:	c4 1a       	sub	r12, r20
    11fa:	d5 0a       	sbc	r13, r21
    11fc:	24 96       	adiw	r28, 0x04	; 4
    11fe:	0d c0       	rjmp	.+26     	; 0x121a <calc_rotor_slider_sensor_delta+0x4e>
    1200:	81 2f       	mov	r24, r17
    1202:	0e 94 0f 06 	call	0xc1e	; 0xc1e <get_channel_delta>
    1206:	9c 01       	movw	r18, r24
    1208:	c8 16       	cp	r12, r24
    120a:	d9 06       	cpc	r13, r25
    120c:	1c f0       	brlt	.+6      	; 0x1214 <calc_rotor_slider_sensor_delta+0x48>
    120e:	88 81       	ld	r24, Y
    1210:	84 60       	ori	r24, 0x04	; 4
    1212:	88 83       	st	Y, r24
    1214:	e2 0e       	add	r14, r18
    1216:	f3 1e       	adc	r15, r19
    1218:	1f 5f       	subi	r17, 0xFF	; 255
    121a:	01 17       	cp	r16, r17
    121c:	88 f7       	brcc	.-30     	; 0x1200 <calc_rotor_slider_sensor_delta+0x34>
    121e:	c7 01       	movw	r24, r14
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	e8 e0       	ldi	r30, 0x08	; 8
    1226:	0c 94 01 11 	jmp	0x2202	; 0x2202 <__epilogue_restores__+0x14>

0000122a <calc_rotor_slider_value>:
    122a:	a0 e0       	ldi	r26, 0x00	; 0
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	eb e1       	ldi	r30, 0x1B	; 27
    1230:	f9 e0       	ldi	r31, 0x09	; 9
    1232:	0c 94 e9 10 	jmp	0x21d2	; 0x21d2 <__prologue_saves__+0x16>
    1236:	e8 2f       	mov	r30, r24
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	73 e0       	ldi	r23, 0x03	; 3
    123c:	ee 0f       	add	r30, r30
    123e:	ff 1f       	adc	r31, r31
    1240:	7a 95       	dec	r23
    1242:	e1 f7       	brne	.-8      	; 0x123c <calc_rotor_slider_value+0x12>
    1244:	e5 51       	subi	r30, 0x15	; 21
    1246:	fe 4d       	sbci	r31, 0xDE	; 222
    1248:	d7 80       	ldd	r13, Z+7	; 0x07
    124a:	0e 94 bb 07 	call	0xf76	; 0xf76 <slider_position>
    124e:	7c 01       	movw	r14, r24
    1250:	cd 2d       	mov	r28, r13
    1252:	d0 e0       	ldi	r29, 0x00	; 0
    1254:	13 e0       	ldi	r17, 0x03	; 3
    1256:	cc 0f       	add	r28, r28
    1258:	dd 1f       	adc	r29, r29
    125a:	1a 95       	dec	r17
    125c:	e1 f7       	brne	.-8      	; 0x1256 <calc_rotor_slider_value+0x2c>
    125e:	c6 58       	subi	r28, 0x86	; 134
    1260:	df 4d       	sbci	r29, 0xDF	; 223
    1262:	be 01       	movw	r22, r28
    1264:	0e 94 a1 07 	call	0xf42	; 0xf42 <movement>
    1268:	9c 01       	movw	r18, r24
    126a:	97 ff       	sbrs	r25, 7
    126c:	03 c0       	rjmp	.+6      	; 0x1274 <calc_rotor_slider_value+0x4a>
    126e:	30 95       	com	r19
    1270:	21 95       	neg	r18
    1272:	3f 4f       	sbci	r19, 0xFF	; 255
    1274:	40 e0       	ldi	r20, 0x00	; 0
    1276:	50 e0       	ldi	r21, 0x00	; 0
    1278:	60 e4       	ldi	r22, 0x40	; 64
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	cb 01       	movw	r24, r22
    127e:	04 2e       	mov	r0, r20
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <calc_rotor_slider_value+0x5c>
    1282:	96 95       	lsr	r25
    1284:	87 95       	ror	r24
    1286:	0a 94       	dec	r0
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <calc_rotor_slider_value+0x58>
    128a:	82 17       	cp	r24, r18
    128c:	93 07       	cpc	r25, r19
    128e:	40 f4       	brcc	.+16     	; 0x12a0 <calc_rotor_slider_value+0x76>
    1290:	8f 81       	ldd	r24, Y+7	; 0x07
    1292:	48 17       	cp	r20, r24
    1294:	10 f4       	brcc	.+4      	; 0x129a <calc_rotor_slider_value+0x70>
    1296:	81 50       	subi	r24, 0x01	; 1
    1298:	01 c0       	rjmp	.+2      	; 0x129c <calc_rotor_slider_value+0x72>
    129a:	8f 5f       	subi	r24, 0xFF	; 255
    129c:	8f 83       	std	Y+7, r24	; 0x07
    129e:	05 c0       	rjmp	.+10     	; 0x12aa <calc_rotor_slider_value+0x80>
    12a0:	4f 5f       	subi	r20, 0xFF	; 255
    12a2:	5f 4f       	sbci	r21, 0xFF	; 255
    12a4:	46 30       	cpi	r20, 0x06	; 6
    12a6:	51 05       	cpc	r21, r1
    12a8:	49 f7       	brne	.-46     	; 0x127c <calc_rotor_slider_value+0x52>
    12aa:	18 81       	ld	r17, Y
    12ac:	01 2f       	mov	r16, r17
    12ae:	07 70       	andi	r16, 0x07	; 7
    12b0:	c7 01       	movw	r24, r14
    12b2:	be 01       	movw	r22, r28
    12b4:	0e 94 a1 07 	call	0xf42	; 0xf42 <movement>
    12b8:	4f 81       	ldd	r20, Y+7	; 0x07
    12ba:	2b 81       	ldd	r18, Y+3	; 0x03
    12bc:	3c 81       	ldd	r19, Y+4	; 0x04
    12be:	18 16       	cp	r1, r24
    12c0:	19 06       	cpc	r1, r25
    12c2:	a4 f4       	brge	.+40     	; 0x12ec <calc_rotor_slider_value+0xc2>
    12c4:	66 e0       	ldi	r22, 0x06	; 6
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	6a 95       	dec	r22
    12cc:	e1 f7       	brne	.-8      	; 0x12c6 <calc_rotor_slider_value+0x9c>
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <calc_rotor_slider_value+0xaa>
    12d0:	96 95       	lsr	r25
    12d2:	87 95       	ror	r24
    12d4:	4a 95       	dec	r20
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <calc_rotor_slider_value+0xa6>
    12d8:	82 0f       	add	r24, r18
    12da:	93 1f       	adc	r25, r19
    12dc:	8b 83       	std	Y+3, r24	; 0x03
    12de:	9c 83       	std	Y+4, r25	; 0x04
    12e0:	13 ff       	sbrs	r17, 3
    12e2:	1a c0       	rjmp	.+52     	; 0x1318 <calc_rotor_slider_value+0xee>
    12e4:	9f 73       	andi	r25, 0x3F	; 63
    12e6:	8b 83       	std	Y+3, r24	; 0x03
    12e8:	9c 83       	std	Y+4, r25	; 0x04
    12ea:	16 c0       	rjmp	.+44     	; 0x1318 <calc_rotor_slider_value+0xee>
    12ec:	90 95       	com	r25
    12ee:	81 95       	neg	r24
    12f0:	9f 4f       	sbci	r25, 0xFF	; 255
    12f2:	56 e0       	ldi	r21, 0x06	; 6
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	5a 95       	dec	r21
    12fa:	e1 f7       	brne	.-8      	; 0x12f4 <calc_rotor_slider_value+0xca>
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <calc_rotor_slider_value+0xd8>
    12fe:	96 95       	lsr	r25
    1300:	87 95       	ror	r24
    1302:	4a 95       	dec	r20
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <calc_rotor_slider_value+0xd4>
    1306:	28 1b       	sub	r18, r24
    1308:	39 0b       	sbc	r19, r25
    130a:	2b 83       	std	Y+3, r18	; 0x03
    130c:	3c 83       	std	Y+4, r19	; 0x04
    130e:	13 ff       	sbrs	r17, 3
    1310:	03 c0       	rjmp	.+6      	; 0x1318 <calc_rotor_slider_value+0xee>
    1312:	3f 73       	andi	r19, 0x3F	; 63
    1314:	2b 83       	std	Y+3, r18	; 0x03
    1316:	3c 83       	std	Y+4, r19	; 0x04
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	9a 81       	ldd	r25, Y+2	; 0x02
    131c:	be 01       	movw	r22, r28
    131e:	0e 94 a1 07 	call	0xf42	; 0xf42 <movement>
    1322:	2d 81       	ldd	r18, Y+5	; 0x05
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	28 17       	cp	r18, r24
    1328:	39 07       	cpc	r19, r25
    132a:	1c f4       	brge	.+6      	; 0x1332 <calc_rotor_slider_value+0x108>
    132c:	0e 83       	std	Y+6, r16	; 0x06
    132e:	1d 82       	std	Y+5, r1	; 0x05
    1330:	0a c0       	rjmp	.+20     	; 0x1346 <calc_rotor_slider_value+0x11c>
    1332:	2e 81       	ldd	r18, Y+6	; 0x06
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	30 95       	com	r19
    1338:	21 95       	neg	r18
    133a:	3f 4f       	sbci	r19, 0xFF	; 255
    133c:	82 17       	cp	r24, r18
    133e:	93 07       	cpc	r25, r19
    1340:	5c f4       	brge	.+22     	; 0x1358 <calc_rotor_slider_value+0x12e>
    1342:	1e 82       	std	Y+6, r1	; 0x06
    1344:	0d 83       	std	Y+5, r16	; 0x05
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	9c 81       	ldd	r25, Y+4	; 0x04
    134a:	26 e0       	ldi	r18, 0x06	; 6
    134c:	96 95       	lsr	r25
    134e:	87 95       	ror	r24
    1350:	2a 95       	dec	r18
    1352:	e1 f7       	brne	.-8      	; 0x134c <calc_rotor_slider_value+0x122>
    1354:	89 83       	std	Y+1, r24	; 0x01
    1356:	9a 83       	std	Y+2, r25	; 0x02
    1358:	2d 2d       	mov	r18, r13
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	f9 01       	movw	r30, r18
    135e:	83 e0       	ldi	r24, 0x03	; 3
    1360:	ee 0f       	add	r30, r30
    1362:	ff 1f       	adc	r31, r31
    1364:	8a 95       	dec	r24
    1366:	e1 f7       	brne	.-8      	; 0x1360 <calc_rotor_slider_value+0x136>
    1368:	e6 58       	subi	r30, 0x86	; 134
    136a:	ff 4d       	sbci	r31, 0xDF	; 223
    136c:	80 81       	ld	r24, Z
    136e:	82 95       	swap	r24
    1370:	86 95       	lsr	r24
    1372:	87 70       	andi	r24, 0x07	; 7
    1374:	8f 5f       	subi	r24, 0xFF	; 255
    1376:	48 e0       	ldi	r20, 0x08	; 8
    1378:	50 e0       	ldi	r21, 0x00	; 0
    137a:	48 1b       	sub	r20, r24
    137c:	51 09       	sbc	r21, r1
    137e:	81 81       	ldd	r24, Z+1	; 0x01
    1380:	92 81       	ldd	r25, Z+2	; 0x02
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <calc_rotor_slider_value+0x15e>
    1384:	96 95       	lsr	r25
    1386:	87 95       	ror	r24
    1388:	4a 95       	dec	r20
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <calc_rotor_slider_value+0x15a>
    138c:	f9 01       	movw	r30, r18
    138e:	ed 51       	subi	r30, 0x1D	; 29
    1390:	fe 4d       	sbci	r31, 0xDE	; 222
    1392:	20 81       	ld	r18, Z
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	28 17       	cp	r18, r24
    1398:	39 07       	cpc	r19, r25
    139a:	51 f0       	breq	.+20     	; 0x13b0 <calc_rotor_slider_value+0x186>
    139c:	80 83       	st	Z, r24
    139e:	80 91 e7 21 	lds	r24, 0x21E7
    13a2:	90 91 e8 21 	lds	r25, 0x21E8
    13a6:	84 60       	ori	r24, 0x04	; 4
    13a8:	80 93 e7 21 	sts	0x21E7, r24
    13ac:	90 93 e8 21 	sts	0x21E8, r25
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	e7 e0       	ldi	r30, 0x07	; 7
    13b6:	0c 94 02 11 	jmp	0x2204	; 0x2204 <__epilogue_restores__+0x16>

000013ba <rotor_slider_enter_detect>:
    13ba:	cf 93       	push	r28
    13bc:	e8 2f       	mov	r30, r24
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	93 e0       	ldi	r25, 0x03	; 3
    13c2:	ee 0f       	add	r30, r30
    13c4:	ff 1f       	adc	r31, r31
    13c6:	9a 95       	dec	r25
    13c8:	e1 f7       	brne	.-8      	; 0x13c2 <rotor_slider_enter_detect+0x8>
    13ca:	e5 51       	subi	r30, 0x15	; 21
    13cc:	fe 4d       	sbci	r31, 0xDE	; 222
    13ce:	c7 81       	ldd	r28, Z+7	; 0x07
    13d0:	0e 94 bb 07 	call	0xf76	; 0xf76 <slider_position>
    13d4:	ec 2f       	mov	r30, r28
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	23 e0       	ldi	r18, 0x03	; 3
    13da:	ee 0f       	add	r30, r30
    13dc:	ff 1f       	adc	r31, r31
    13de:	2a 95       	dec	r18
    13e0:	e1 f7       	brne	.-8      	; 0x13da <rotor_slider_enter_detect+0x20>
    13e2:	e6 58       	subi	r30, 0x86	; 134
    13e4:	ff 4d       	sbci	r31, 0xDF	; 223
    13e6:	20 81       	ld	r18, Z
    13e8:	27 70       	andi	r18, 0x07	; 7
    13ea:	81 83       	std	Z+1, r24	; 0x01
    13ec:	92 83       	std	Z+2, r25	; 0x02
    13ee:	26 83       	std	Z+6, r18	; 0x06
    13f0:	25 83       	std	Z+5, r18	; 0x05
    13f2:	17 82       	std	Z+7, r1	; 0x07
    13f4:	36 e0       	ldi	r19, 0x06	; 6
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	3a 95       	dec	r19
    13fc:	e1 f7       	brne	.-8      	; 0x13f6 <rotor_slider_enter_detect+0x3c>
    13fe:	83 83       	std	Z+3, r24	; 0x03
    1400:	94 83       	std	Z+4, r25	; 0x04
    1402:	cf 91       	pop	r28
    1404:	08 95       	ret

00001406 <BitBangSPI_Master_Init>:
Output  :   n/a
Notes   :	Called from QDebug_Init in QDebug.c
============================================================================*/
void BitBangSPI_Master_Init (void)
{
    CONCAT( PORT, SPI_BB_SS, _DIRSET) =  ((1<<SS_BB));
    1406:	e1 e6       	ldi	r30, 0x61	; 97
    1408:	f6 e0       	ldi	r31, 0x06	; 6
    140a:	30 e1       	ldi	r19, 0x10	; 16
    140c:	30 83       	st	Z, r19
    CONCAT( PORT, SPI_BB_MOSI, _DIRSET) =  (( 1 << MOSI_BB ));
    140e:	20 e2       	ldi	r18, 0x20	; 32
    1410:	20 83       	st	Z, r18
    CONCAT( PORT, SPI_BB_SCK, _DIRSET) =  (( 1 << SCK_BB ));
    1412:	90 e8       	ldi	r25, 0x80	; 128
    1414:	90 83       	st	Z, r25

    CONCAT( PORT, SPI_BB_MISO, _DIRCLR) =  ( 1 << MISO_BB );
    1416:	80 e4       	ldi	r24, 0x40	; 64
    1418:	80 93 62 06 	sts	0x0662, r24

    CONCAT( PORT, SPI_BB_SS, _OUTCLR) =  ((1<<SS_BB));
    141c:	e6 e6       	ldi	r30, 0x66	; 102
    141e:	f6 e0       	ldi	r31, 0x06	; 6
    1420:	30 83       	st	Z, r19
    CONCAT( PORT, SPI_BB_MOSI, _OUTCLR) =  (( 1 << MOSI_BB ));
    1422:	20 83       	st	Z, r18
    CONCAT( PORT, SPI_BB_SCK, _OUTCLR) =  (( 1 << SCK_BB ));
    1424:	90 83       	st	Z, r25
    CONCAT( PORT, SPI_BB_MISO, _OUTSET) =  ( 1 << MISO_BB );
    1426:	80 93 65 06 	sts	0x0665, r24
    142a:	08 95       	ret

0000142c <BitBangSPI_Send_Byte>:
Input   :   Data to send to slave
Output  :   Data read from slave
Notes   :	Called from BitBangSPI_Send_Message in this file
============================================================================*/
uint8_t BitBangSPI_Send_Byte(uint8_t c)
{
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	28 e0       	ldi	r18, 0x08	; 8
    1432:	30 e0       	ldi	r19, 0x00	; 0
    for (bit = 0; bit < 8; bit++) {
        /* write MOSI on trailing edge of previous clock */
        if (c & 0x80)
            CONCAT( PORT, SPI_BB_MOSI, _OUTSET) =  ( 1 << MOSI_BB );
        else
            CONCAT( PORT, SPI_BB_MOSI, _OUTCLR) =  ( 1 << MOSI_BB );
    1434:	e6 e6       	ldi	r30, 0x66	; 102
    1436:	f6 e0       	ldi	r31, 0x06	; 6
    1438:	50 e2       	ldi	r21, 0x20	; 32
{
    unsigned bit;
    for (bit = 0; bit < 8; bit++) {
        /* write MOSI on trailing edge of previous clock */
        if (c & 0x80)
            CONCAT( PORT, SPI_BB_MOSI, _OUTSET) =  ( 1 << MOSI_BB );
    143a:	a5 e6       	ldi	r26, 0x65	; 101
    143c:	b6 e0       	ldi	r27, 0x06	; 6
        c <<= 1;

        /* half a clock cycle before leading/rising edge */
        DELAYUS(1);

        CONCAT( PORT, SPI_BB_SCK, _OUTSET) = (1 << SCK_BB );
    143e:	90 e8       	ldi	r25, 0x80	; 128

        /* half a clock cycle before trailing/falling edge */
        DELAYUS(1);

        /* read MISO on trailing edge */
        c |= ((CONCAT( PORT, SPI_BB_MISO, _IN) >> MISO_BB) & 0x01);
    1440:	c8 e6       	ldi	r28, 0x68	; 104
    1442:	d6 e0       	ldi	r29, 0x06	; 6
uint8_t BitBangSPI_Send_Byte(uint8_t c)
{
    unsigned bit;
    for (bit = 0; bit < 8; bit++) {
        /* write MOSI on trailing edge of previous clock */
        if (c & 0x80)
    1444:	88 23       	and	r24, r24
    1446:	14 f4       	brge	.+4      	; 0x144c <BitBangSPI_Send_Byte+0x20>
            CONCAT( PORT, SPI_BB_MOSI, _OUTSET) =  ( 1 << MOSI_BB );
    1448:	5c 93       	st	X, r21
    144a:	01 c0       	rjmp	.+2      	; 0x144e <BitBangSPI_Send_Byte+0x22>
        else
            CONCAT( PORT, SPI_BB_MOSI, _OUTCLR) =  ( 1 << MOSI_BB );
    144c:	50 83       	st	Z, r21

        c <<= 1;
    144e:	88 0f       	add	r24, r24

        /* half a clock cycle before leading/rising edge */
        DELAYUS(1);
    1450:	00 c0       	rjmp	.+0      	; 0x1452 <BitBangSPI_Send_Byte+0x26>
    1452:	00 c0       	rjmp	.+0      	; 0x1454 <BitBangSPI_Send_Byte+0x28>

        CONCAT( PORT, SPI_BB_SCK, _OUTSET) = (1 << SCK_BB );
    1454:	9c 93       	st	X, r25

        /* half a clock cycle before trailing/falling edge */
        DELAYUS(1);
    1456:	00 c0       	rjmp	.+0      	; 0x1458 <BitBangSPI_Send_Byte+0x2c>
    1458:	00 c0       	rjmp	.+0      	; 0x145a <BitBangSPI_Send_Byte+0x2e>

        /* read MISO on trailing edge */
        c |= ((CONCAT( PORT, SPI_BB_MISO, _IN) >> MISO_BB) & 0x01);
    145a:	48 81       	ld	r20, Y
    145c:	46 fb       	bst	r20, 6
    145e:	44 27       	eor	r20, r20
    1460:	40 f9       	bld	r20, 0
    1462:	84 2b       	or	r24, r20
        CONCAT( PORT, SPI_BB_SCK, _OUTCLR) = (1 << SCK_BB );
    1464:	90 83       	st	Z, r25
    1466:	21 50       	subi	r18, 0x01	; 1
    1468:	31 09       	sbc	r19, r1
Notes   :	Called from BitBangSPI_Send_Message in this file
============================================================================*/
uint8_t BitBangSPI_Send_Byte(uint8_t c)
{
    unsigned bit;
    for (bit = 0; bit < 8; bit++) {
    146a:	61 f7       	brne	.-40     	; 0x1444 <BitBangSPI_Send_Byte+0x18>
        /* read MISO on trailing edge */
        c |= ((CONCAT( PORT, SPI_BB_MISO, _IN) >> MISO_BB) & 0x01);
        CONCAT( PORT, SPI_BB_SCK, _OUTCLR) = (1 << SCK_BB );
    }

    CONCAT( PORT, SPI_BB_MOSI, _OUTCLR) =  ( 1 << MOSI_BB );
    146c:	90 e2       	ldi	r25, 0x20	; 32
    146e:	90 93 66 06 	sts	0x0666, r25

    DELAYUS(50);
    1472:	92 e4       	ldi	r25, 0x42	; 66
    1474:	9a 95       	dec	r25
    1476:	f1 f7       	brne	.-4      	; 0x1474 <BitBangSPI_Send_Byte+0x48>
    1478:	00 c0       	rjmp	.+0      	; 0x147a <BitBangSPI_Send_Byte+0x4e>

    return c;
}
    147a:	df 91       	pop	r29
    147c:	cf 91       	pop	r28
    147e:	08 95       	ret

00001480 <BitBangSPI_Send_Message>:
Input   :   n/a
Output  :   n/a
Notes   :	Called from Send_Message in QDebugTransport.c
============================================================================*/
void BitBangSPI_Send_Message(void)
{
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	03 e5       	ldi	r16, 0x53	; 83
    148a:	11 e2       	ldi	r17, 0x21	; 33
    unsigned int i;
    uint8_t FrameInProgress;

    // Send our message upstream
    for (i=0; i <= TX_index; i++)
    148c:	c0 e0       	ldi	r28, 0x00	; 0
    148e:	d0 e0       	ldi	r29, 0x00	; 0
    {
        FrameInProgress = RxHandler(BitBangSPI_Send_Byte(TX_Buffer[i]));
    1490:	f8 01       	movw	r30, r16
    1492:	81 91       	ld	r24, Z+
    1494:	8f 01       	movw	r16, r30
    1496:	0e 94 16 0a 	call	0x142c	; 0x142c <BitBangSPI_Send_Byte>
    149a:	0e 94 5d 10 	call	0x20ba	; 0x20ba <RxHandler>
{
    unsigned int i;
    uint8_t FrameInProgress;

    // Send our message upstream
    for (i=0; i <= TX_index; i++)
    149e:	21 96       	adiw	r28, 0x01	; 1
    14a0:	20 91 54 21 	lds	r18, 0x2154
    14a4:	30 91 55 21 	lds	r19, 0x2155
    14a8:	2c 17       	cp	r18, r28
    14aa:	3d 07       	cpc	r19, r29
    14ac:	88 f7       	brcc	.-30     	; 0x1490 <BitBangSPI_Send_Message+0x10>
    {
        FrameInProgress = RxHandler(BitBangSPI_Send_Byte(TX_Buffer[i]));
    }

    // Do we need to receive even more bytes?
    while (FrameInProgress)
    14ae:	88 23       	and	r24, r24
    14b0:	39 f0       	breq	.+14     	; 0x14c0 <BitBangSPI_Send_Message+0x40>
        FrameInProgress = RxHandler(BitBangSPI_Send_Byte(0));
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	0e 94 16 0a 	call	0x142c	; 0x142c <BitBangSPI_Send_Byte>
    14b8:	0e 94 5d 10 	call	0x20ba	; 0x20ba <RxHandler>
    {
        FrameInProgress = RxHandler(BitBangSPI_Send_Byte(TX_Buffer[i]));
    }

    // Do we need to receive even more bytes?
    while (FrameInProgress)
    14bc:	81 11       	cpse	r24, r1
    14be:	f9 cf       	rjmp	.-14     	; 0x14b2 <BitBangSPI_Send_Message+0x32>
        FrameInProgress = RxHandler(BitBangSPI_Send_Byte(0));
}
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	1f 91       	pop	r17
    14c6:	0f 91       	pop	r16
    14c8:	08 95       	ret

000014ca <eeprom_write>:
Input   : Address where the data must be saved, data
Output  :
Notes   :
==============================================================================*/
void eeprom_write(uint16_t ui_address, uint8_t ui_data)
{
    14ca:	39 2f       	mov	r19, r25
   EEDR = ui_data;
   EEPROM_WRITE();
#else
   /* FOR XMEGA EEPROM ACCESS */
   /* Wait for pending NVM operation */
   do{} while(( NVM.STATUS & NVM_NVMBUSY_bm ) == NVM_NVMBUSY_bm );
    14cc:	e0 ec       	ldi	r30, 0xC0	; 192
    14ce:	f1 e0       	ldi	r31, 0x01	; 1
    14d0:	27 85       	ldd	r18, Z+15	; 0x0f
    14d2:	22 23       	and	r18, r18
    14d4:	ec f3       	brlt	.-6      	; 0x14d0 <eeprom_write+0x6>
   if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    14d6:	e0 ec       	ldi	r30, 0xC0	; 192
    14d8:	f1 e0       	ldi	r31, 0x01	; 1
    14da:	97 85       	ldd	r25, Z+15	; 0x0f
    14dc:	91 ff       	sbrs	r25, 1
    14de:	10 c0       	rjmp	.+32     	; 0x1500 <eeprom_write+0x36>
      /* Command - Erase eeprom buffer */
      NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    14e0:	96 e3       	ldi	r25, 0x36	; 54
    14e2:	92 87       	std	Z+10, r25	; 0x0a
      /* Command - Execute */
      NVM_EXEC();
    14e4:	ef 93       	push	r30
    14e6:	ff 93       	push	r31
    14e8:	0f 93       	push	r16
    14ea:	2f 93       	push	r18
    14ec:	eb ec       	ldi	r30, 0xCB	; 203
    14ee:	f1 e0       	ldi	r31, 0x01	; 1
    14f0:	08 ed       	ldi	r16, 0xD8	; 216
    14f2:	21 e0       	ldi	r18, 0x01	; 1
    14f4:	04 bf       	out	0x34, r16	; 52
    14f6:	20 83       	st	Z, r18
    14f8:	2f 91       	pop	r18
    14fa:	0f 91       	pop	r16
    14fc:	ff 91       	pop	r31
    14fe:	ef 91       	pop	r30
   }
   /* Command - Load EEPROM buffer */
   NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    1500:	e0 ec       	ldi	r30, 0xC0	; 192
    1502:	f1 e0       	ldi	r31, 0x01	; 1
    1504:	93 e3       	ldi	r25, 0x33	; 51
    1506:	92 87       	std	Z+10, r25	; 0x0a
   /* Load address to write to. */
   NVM.ADDR0 = ui_address & 0xFF;
    1508:	80 83       	st	Z, r24
   NVM.ADDR1 = (ui_address >> 8) & 0x1F;
    150a:	83 2f       	mov	r24, r19
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	8f 71       	andi	r24, 0x1F	; 31
    1510:	99 27       	eor	r25, r25
    1512:	81 83       	std	Z+1, r24	; 0x01
   NVM.ADDR2 = 0x00;
    1514:	12 82       	std	Z+2, r1	; 0x02
   /* Load data to write */
   NVM.DATA0 = ui_data;
    1516:	64 83       	std	Z+4, r22	; 0x04
   /* Load Atomic write command */
   NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    1518:	85 e3       	ldi	r24, 0x35	; 53
    151a:	82 87       	std	Z+10, r24	; 0x0a
   NVM_EXEC();
    151c:	ef 93       	push	r30
    151e:	ff 93       	push	r31
    1520:	0f 93       	push	r16
    1522:	2f 93       	push	r18
    1524:	eb ec       	ldi	r30, 0xCB	; 203
    1526:	f1 e0       	ldi	r31, 0x01	; 1
    1528:	08 ed       	ldi	r16, 0xD8	; 216
    152a:	21 e0       	ldi	r18, 0x01	; 1
    152c:	04 bf       	out	0x34, r16	; 52
    152e:	20 83       	st	Z, r18
    1530:	2f 91       	pop	r18
    1532:	0f 91       	pop	r16
    1534:	ff 91       	pop	r31
    1536:	ef 91       	pop	r30
   /* Wait for pending NVM operation */
   do{} while(( NVM.STATUS & NVM_NVMBUSY_bm ) == NVM_NVMBUSY_bm );
    1538:	87 85       	ldd	r24, Z+15	; 0x0f
    153a:	88 23       	and	r24, r24
    153c:	ec f3       	brlt	.-6      	; 0x1538 <eeprom_write+0x6e>
#endif
}
    153e:	08 95       	ret

00001540 <eeprom_read>:
Input   : EEPROM address where the data must be read
Output  : 8 Bit data
Notes   :
==============================================================================*/
uint8_t eeprom_read(uint16_t ui_address)
{
    1540:	39 2f       	mov	r19, r25
   /* Return data from Data Register */
   return EEDR;
#else
   /* FOR XMEGA EEPROM ACCESS */
   /* Wait for pending NVM operation */
   do{} while(( NVM.STATUS & NVM_NVMBUSY_bm ) == NVM_NVMBUSY_bm );
    1542:	e0 ec       	ldi	r30, 0xC0	; 192
    1544:	f1 e0       	ldi	r31, 0x01	; 1
    1546:	27 85       	ldd	r18, Z+15	; 0x0f
    1548:	22 23       	and	r18, r18
    154a:	ec f3       	brlt	.-6      	; 0x1546 <eeprom_read+0x6>
   /* Load address for reading */
   NVM.ADDR0 = ui_address & 0xFF;
    154c:	e0 ec       	ldi	r30, 0xC0	; 192
    154e:	f1 e0       	ldi	r31, 0x01	; 1
    1550:	80 83       	st	Z, r24
   NVM.ADDR1 = (ui_address >> 8) & 0x1F;
    1552:	83 2f       	mov	r24, r19
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	8f 71       	andi	r24, 0x1F	; 31
    1558:	99 27       	eor	r25, r25
    155a:	81 83       	std	Z+1, r24	; 0x01
   NVM.ADDR2 = 0x00;
    155c:	12 82       	std	Z+2, r1	; 0x02
   /* Command - Read EEPROM */
   NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    155e:	86 e0       	ldi	r24, 0x06	; 6
    1560:	82 87       	std	Z+10, r24	; 0x0a
   /* Command - Execute */
   NVM_EXEC();
    1562:	ef 93       	push	r30
    1564:	ff 93       	push	r31
    1566:	0f 93       	push	r16
    1568:	2f 93       	push	r18
    156a:	eb ec       	ldi	r30, 0xCB	; 203
    156c:	f1 e0       	ldi	r31, 0x01	; 1
    156e:	08 ed       	ldi	r16, 0xD8	; 216
    1570:	21 e0       	ldi	r18, 0x01	; 1
    1572:	04 bf       	out	0x34, r16	; 52
    1574:	20 83       	st	Z, r18
    1576:	2f 91       	pop	r18
    1578:	0f 91       	pop	r16
    157a:	ff 91       	pop	r31
    157c:	ef 91       	pop	r30
   /* Data available */
   return NVM.DATA0;
    157e:	84 81       	ldd	r24, Z+4	; 0x04
#endif
}
    1580:	08 95       	ret

00001582 <read_info_from_eeprom>:
Input   :
Output  :
Notes   : Returns library version currently on chip
==============================================================================*/
uint16_t read_info_from_eeprom( void )
{
    1582:	cf 93       	push	r28
    1584:	df 93       	push	r29
   uint16_t rtnval;

   /* The first two bytes stored in EEPROM is the library version */
   rtnval = (uint16_t)(eeprom_read(EEPROM_START_ADDRESS));
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	90 e1       	ldi	r25, 0x10	; 16
    158a:	0e 94 a0 0a 	call	0x1540	; 0x1540 <eeprom_read>
    158e:	c8 2f       	mov	r28, r24
    1590:	d0 e0       	ldi	r29, 0x00	; 0
   rtnval |= (uint16_t)(eeprom_read(EEPROM_START_ADDRESS + 1u)) << 8u;
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e1       	ldi	r25, 0x10	; 16
    1596:	0e 94 a0 0a 	call	0x1540	; 0x1540 <eeprom_read>
    159a:	38 2f       	mov	r19, r24
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	2c 2b       	or	r18, r28
    15a0:	3d 2b       	or	r19, r29
   return rtnval;
}
    15a2:	82 2f       	mov	r24, r18
    15a4:	93 2f       	mov	r25, r19
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	08 95       	ret

000015ac <write_info_to_eeprom>:
Input   :
Output  :
Notes   : Will write the current library version to EEPROM
==============================================================================*/
void write_info_to_eeprom( uint16_t lib_version )
{
    15ac:	cf 93       	push	r28
    15ae:	c9 2f       	mov	r28, r25
   eeprom_write((EEPROM_START_ADDRESS), (uint8_t)(lib_version));
    15b0:	68 2f       	mov	r22, r24
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	90 e1       	ldi	r25, 0x10	; 16
    15b6:	0e 94 65 0a 	call	0x14ca	; 0x14ca <eeprom_write>
   eeprom_write((EEPROM_START_ADDRESS + 1u), (uint8_t)(lib_version >> 8u));
    15ba:	6c 2f       	mov	r22, r28
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e1       	ldi	r25, 0x10	; 16
    15c0:	0e 94 65 0a 	call	0x14ca	; 0x14ca <eeprom_write>
}
    15c4:	cf 91       	pop	r28
    15c6:	08 95       	ret

000015c8 <write_global_settings_to_eeprom>:
Output  :
Notes   :
==============================================================================*/
void write_global_settings_to_eeprom(void)
{
   eeprom_write((EEPROM_LIB_CONFIG_START_ADDRESS + 0u),
    15c8:	60 91 56 21 	lds	r22, 0x2156
    15cc:	82 e0       	ldi	r24, 0x02	; 2
    15ce:	90 e1       	ldi	r25, 0x10	; 16
    15d0:	0e 94 65 0a 	call	0x14ca	; 0x14ca <eeprom_write>
                qt_config_data.qt_recal_threshold);
   eeprom_write((EEPROM_LIB_CONFIG_START_ADDRESS + 1u),
    15d4:	60 91 57 21 	lds	r22, 0x2157
    15d8:	83 e0       	ldi	r24, 0x03	; 3
    15da:	90 e1       	ldi	r25, 0x10	; 16
    15dc:	0e 94 65 0a 	call	0x14ca	; 0x14ca <eeprom_write>
                qt_config_data.qt_di);
   eeprom_write((EEPROM_LIB_CONFIG_START_ADDRESS + 2u),
    15e0:	60 91 58 21 	lds	r22, 0x2158
    15e4:	84 e0       	ldi	r24, 0x04	; 4
    15e6:	90 e1       	ldi	r25, 0x10	; 16
    15e8:	0e 94 65 0a 	call	0x14ca	; 0x14ca <eeprom_write>
                qt_config_data.qt_drift_hold_time);
   eeprom_write((EEPROM_LIB_CONFIG_START_ADDRESS + 3u),
    15ec:	60 91 59 21 	lds	r22, 0x2159
    15f0:	85 e0       	ldi	r24, 0x05	; 5
    15f2:	90 e1       	ldi	r25, 0x10	; 16
    15f4:	0e 94 65 0a 	call	0x14ca	; 0x14ca <eeprom_write>
                qt_config_data.qt_max_on_duration);
   eeprom_write((EEPROM_LIB_CONFIG_START_ADDRESS + 4u),
    15f8:	60 91 5a 21 	lds	r22, 0x215A
    15fc:	86 e0       	ldi	r24, 0x06	; 6
    15fe:	90 e1       	ldi	r25, 0x10	; 16
    1600:	0e 94 65 0a 	call	0x14ca	; 0x14ca <eeprom_write>
                qt_config_data.qt_neg_drift_rate);
   eeprom_write((EEPROM_LIB_CONFIG_START_ADDRESS + 5u),
    1604:	60 91 5b 21 	lds	r22, 0x215B
    1608:	87 e0       	ldi	r24, 0x07	; 7
    160a:	90 e1       	ldi	r25, 0x10	; 16
    160c:	0e 94 65 0a 	call	0x14ca	; 0x14ca <eeprom_write>
                qt_config_data.qt_pos_drift_rate);
   eeprom_write((EEPROM_LIB_CONFIG_START_ADDRESS + 6u),
    1610:	60 91 5c 21 	lds	r22, 0x215C
    1614:	88 e0       	ldi	r24, 0x08	; 8
    1616:	90 e1       	ldi	r25, 0x10	; 16
    1618:	0e 94 65 0a 	call	0x14ca	; 0x14ca <eeprom_write>
    161c:	08 95       	ret

0000161e <write_sensor_settings_to_eeprom>:
Input   :
Output  :
Notes   :
==============================================================================*/
void write_sensor_settings_to_eeprom(void)
{
    161e:	ff 92       	push	r15
    1620:	0f 93       	push	r16
    1622:	1f 93       	push	r17
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
   uint8_t i;
   for(i = 0u; i < num_sensors; i++)
    1628:	80 91 ea 21 	lds	r24, 0x21EA
    162c:	88 23       	and	r24, r24
    162e:	19 f1       	breq	.+70     	; 0x1676 <write_sensor_settings_to_eeprom+0x58>
    1630:	f1 2c       	mov	r15, r1
   {
      eeprom_write((EEPROM_LIB_CONFIG_START_ADDRESS + 7u + (i * 2u)),
    1632:	cf 2d       	mov	r28, r15
    1634:	d0 e0       	ldi	r29, 0x00	; 0
    1636:	8e 01       	movw	r16, r28
    1638:	00 0f       	add	r16, r16
    163a:	11 1f       	adc	r17, r17
    163c:	00 0f       	add	r16, r16
    163e:	11 1f       	adc	r17, r17
    1640:	00 0f       	add	r16, r16
    1642:	11 1f       	adc	r17, r17
    1644:	05 51       	subi	r16, 0x15	; 21
    1646:	1e 4d       	sbci	r17, 0xDE	; 222
    1648:	ce 01       	movw	r24, r28
    164a:	88 0f       	add	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	f8 01       	movw	r30, r16
    1650:	63 81       	ldd	r22, Z+3	; 0x03
    1652:	87 5f       	subi	r24, 0xF7	; 247
    1654:	9f 4e       	sbci	r25, 0xEF	; 239
    1656:	0e 94 65 0a 	call	0x14ca	; 0x14ca <eeprom_write>
                   sensors[i].threshold);
      eeprom_write((EEPROM_LIB_CONFIG_START_ADDRESS + 8u + (i * 2u)),
    165a:	ce 01       	movw	r24, r28
    165c:	8b 5f       	subi	r24, 0xFB	; 251
    165e:	97 4f       	sbci	r25, 0xF7	; 247
    1660:	f8 01       	movw	r30, r16
    1662:	64 81       	ldd	r22, Z+4	; 0x04
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	0e 94 65 0a 	call	0x14ca	; 0x14ca <eeprom_write>
Notes   :
==============================================================================*/
void write_sensor_settings_to_eeprom(void)
{
   uint8_t i;
   for(i = 0u; i < num_sensors; i++)
    166c:	f3 94       	inc	r15
    166e:	80 91 ea 21 	lds	r24, 0x21EA
    1672:	f8 16       	cp	r15, r24
    1674:	f0 f2       	brcs	.-68     	; 0x1632 <write_sensor_settings_to_eeprom+0x14>
      eeprom_write((EEPROM_LIB_CONFIG_START_ADDRESS + 7u + (i * 2u)),
                   sensors[i].threshold);
      eeprom_write((EEPROM_LIB_CONFIG_START_ADDRESS + 8u + (i * 2u)),
                   sensors[i].type_aks_pos_hyst);
   }
}
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	1f 91       	pop	r17
    167c:	0f 91       	pop	r16
    167e:	ff 90       	pop	r15
    1680:	08 95       	ret

00001682 <write_burst_lenghts_to_eeprom>:
Input   :
Output  :
Notes   :
==============================================================================*/
void write_burst_lenghts_to_eeprom(void)
{
    1682:	ef 92       	push	r14
    1684:	ff 92       	push	r15
    1686:	0f 93       	push	r16
    1688:	1f 93       	push	r17
    168a:	cf 93       	push	r28
    168c:	df 93       	push	r29
   uint16_t address = EEPROM_LIB_CONFIG_START_ADDRESS + 7u + (num_sensors * 2u);
    168e:	00 91 ea 21 	lds	r16, 0x21EA
    1692:	10 e0       	ldi	r17, 0x00	; 0
    1694:	00 0f       	add	r16, r16
    1696:	11 1f       	adc	r17, r17
    1698:	c1 e0       	ldi	r28, 0x01	; 1
    169a:	d0 e2       	ldi	r29, 0x20	; 32
Purpose : Save burst length settings to EEPROM
Input   :
Output  :
Notes   :
==============================================================================*/
void write_burst_lenghts_to_eeprom(void)
    169c:	0f 2e       	mov	r0, r31
    169e:	f1 e2       	ldi	r31, 0x21	; 33
    16a0:	ef 2e       	mov	r14, r31
    16a2:	f0 e2       	ldi	r31, 0x20	; 32
    16a4:	ff 2e       	mov	r15, r31
    16a6:	f0 2d       	mov	r31, r0
    16a8:	09 5f       	subi	r16, 0xF9	; 249
    16aa:	1f 40       	sbci	r17, 0x0F	; 15
   uint16_t address = EEPROM_LIB_CONFIG_START_ADDRESS + 7u + (num_sensors * 2u);
   uint8_t i;

   for(i = 0u; i < QT_NUM_CHANNELS; i++)
   {
      eeprom_write((address + i), qt_burst_lengths[i]);
    16ac:	69 91       	ld	r22, Y+
    16ae:	c8 01       	movw	r24, r16
    16b0:	8c 0f       	add	r24, r28
    16b2:	9d 1f       	adc	r25, r29
    16b4:	0e 94 65 0a 	call	0x14ca	; 0x14ca <eeprom_write>
void write_burst_lenghts_to_eeprom(void)
{
   uint16_t address = EEPROM_LIB_CONFIG_START_ADDRESS + 7u + (num_sensors * 2u);
   uint8_t i;

   for(i = 0u; i < QT_NUM_CHANNELS; i++)
    16b8:	ce 15       	cp	r28, r14
    16ba:	df 05       	cpc	r29, r15
    16bc:	b9 f7       	brne	.-18     	; 0x16ac <write_burst_lenghts_to_eeprom+0x2a>
   {
      eeprom_write((address + i), qt_burst_lengths[i]);
   }
}
    16be:	df 91       	pop	r29
    16c0:	cf 91       	pop	r28
    16c2:	1f 91       	pop	r17
    16c4:	0f 91       	pop	r16
    16c6:	ff 90       	pop	r15
    16c8:	ef 90       	pop	r14
    16ca:	08 95       	ret

000016cc <read_settings_from_eeprom>:
Input   :
Output  :
Notes   : Data is stored in 'eeprom_gv_block[]' in the format shown above
==============================================================================*/
void read_settings_from_eeprom(void)
{
    16cc:	ef 92       	push	r14
    16ce:	ff 92       	push	r15
    16d0:	0f 93       	push	r16
    16d2:	1f 93       	push	r17
    16d4:	cf 93       	push	r28
    16d6:	df 93       	push	r29
   uint8_t i;
   /* Read Global configuration */
   qt_config_data.qt_recal_threshold =(recal_threshold_t)
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 0u);
    16d8:	82 e0       	ldi	r24, 0x02	; 2
    16da:	90 e1       	ldi	r25, 0x10	; 16
    16dc:	0e 94 a0 0a 	call	0x1540	; 0x1540 <eeprom_read>
==============================================================================*/
void read_settings_from_eeprom(void)
{
   uint8_t i;
   /* Read Global configuration */
   qt_config_data.qt_recal_threshold =(recal_threshold_t)
    16e0:	80 93 56 21 	sts	0x2156, r24
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 0u);
   qt_config_data.qt_di              =
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 1u);
    16e4:	83 e0       	ldi	r24, 0x03	; 3
    16e6:	90 e1       	ldi	r25, 0x10	; 16
    16e8:	0e 94 a0 0a 	call	0x1540	; 0x1540 <eeprom_read>
{
   uint8_t i;
   /* Read Global configuration */
   qt_config_data.qt_recal_threshold =(recal_threshold_t)
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 0u);
   qt_config_data.qt_di              =
    16ec:	80 93 57 21 	sts	0x2157, r24
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 1u);
   qt_config_data.qt_drift_hold_time =
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 2u);
    16f0:	84 e0       	ldi	r24, 0x04	; 4
    16f2:	90 e1       	ldi	r25, 0x10	; 16
    16f4:	0e 94 a0 0a 	call	0x1540	; 0x1540 <eeprom_read>
   /* Read Global configuration */
   qt_config_data.qt_recal_threshold =(recal_threshold_t)
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 0u);
   qt_config_data.qt_di              =
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 1u);
   qt_config_data.qt_drift_hold_time =
    16f8:	80 93 58 21 	sts	0x2158, r24
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 2u);
   qt_config_data.qt_max_on_duration =
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 3u);
    16fc:	85 e0       	ldi	r24, 0x05	; 5
    16fe:	90 e1       	ldi	r25, 0x10	; 16
    1700:	0e 94 a0 0a 	call	0x1540	; 0x1540 <eeprom_read>
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 0u);
   qt_config_data.qt_di              =
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 1u);
   qt_config_data.qt_drift_hold_time =
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 2u);
   qt_config_data.qt_max_on_duration =
    1704:	80 93 59 21 	sts	0x2159, r24
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 3u);
   qt_config_data.qt_neg_drift_rate  =
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 4u);
    1708:	86 e0       	ldi	r24, 0x06	; 6
    170a:	90 e1       	ldi	r25, 0x10	; 16
    170c:	0e 94 a0 0a 	call	0x1540	; 0x1540 <eeprom_read>
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 1u);
   qt_config_data.qt_drift_hold_time =
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 2u);
   qt_config_data.qt_max_on_duration =
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 3u);
   qt_config_data.qt_neg_drift_rate  =
    1710:	80 93 5a 21 	sts	0x215A, r24
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 4u);
   qt_config_data.qt_pos_drift_rate  =
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 5u);
    1714:	87 e0       	ldi	r24, 0x07	; 7
    1716:	90 e1       	ldi	r25, 0x10	; 16
    1718:	0e 94 a0 0a 	call	0x1540	; 0x1540 <eeprom_read>
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 2u);
   qt_config_data.qt_max_on_duration =
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 3u);
   qt_config_data.qt_neg_drift_rate  =
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 4u);
   qt_config_data.qt_pos_drift_rate  =
    171c:	80 93 5b 21 	sts	0x215B, r24
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 5u);
   qt_config_data.qt_pos_recal_delay =
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 6u);
    1720:	88 e0       	ldi	r24, 0x08	; 8
    1722:	90 e1       	ldi	r25, 0x10	; 16
    1724:	0e 94 a0 0a 	call	0x1540	; 0x1540 <eeprom_read>
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 3u);
   qt_config_data.qt_neg_drift_rate  =
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 4u);
   qt_config_data.qt_pos_drift_rate  =
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 5u);
   qt_config_data.qt_pos_recal_delay =
    1728:	80 93 5c 21 	sts	0x215C, r24
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 6u);
   /* Read Sensor specific configuration */
   for(i = 0u; i < num_sensors; i++)
    172c:	00 91 ea 21 	lds	r16, 0x21EA
    1730:	00 23       	and	r16, r16
    1732:	19 f1       	breq	.+70     	; 0x177a <read_settings_from_eeprom+0xae>
    1734:	f1 2c       	mov	r15, r1
   {
      sensors[i].threshold =
    1736:	cf 2d       	mov	r28, r15
    1738:	d0 e0       	ldi	r29, 0x00	; 0
         eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 7u + (i * 2u));
    173a:	ce 01       	movw	r24, r28
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	87 5f       	subi	r24, 0xF7	; 247
    1742:	9f 4e       	sbci	r25, 0xEF	; 239
    1744:	0e 94 a0 0a 	call	0x1540	; 0x1540 <eeprom_read>
   qt_config_data.qt_pos_recal_delay =
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 6u);
   /* Read Sensor specific configuration */
   for(i = 0u; i < num_sensors; i++)
   {
      sensors[i].threshold =
    1748:	8e 01       	movw	r16, r28
    174a:	00 0f       	add	r16, r16
    174c:	11 1f       	adc	r17, r17
    174e:	00 0f       	add	r16, r16
    1750:	11 1f       	adc	r17, r17
    1752:	00 0f       	add	r16, r16
    1754:	11 1f       	adc	r17, r17
    1756:	05 51       	subi	r16, 0x15	; 21
    1758:	1e 4d       	sbci	r17, 0xDE	; 222
    175a:	f8 01       	movw	r30, r16
    175c:	83 83       	std	Z+3, r24	; 0x03
         eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 7u + (i * 2u));
      sensors[i].type_aks_pos_hyst =
         eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 8u + (i * 2u));
    175e:	ce 01       	movw	r24, r28
    1760:	8b 5f       	subi	r24, 0xFB	; 251
    1762:	97 4f       	sbci	r25, 0xF7	; 247
    1764:	88 0f       	add	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	0e 94 a0 0a 	call	0x1540	; 0x1540 <eeprom_read>
   /* Read Sensor specific configuration */
   for(i = 0u; i < num_sensors; i++)
   {
      sensors[i].threshold =
         eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 7u + (i * 2u));
      sensors[i].type_aks_pos_hyst =
    176c:	f8 01       	movw	r30, r16
    176e:	84 83       	std	Z+4, r24	; 0x04
   qt_config_data.qt_pos_drift_rate  =
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 5u);
   qt_config_data.qt_pos_recal_delay =
      eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 6u);
   /* Read Sensor specific configuration */
   for(i = 0u; i < num_sensors; i++)
    1770:	f3 94       	inc	r15
    1772:	00 91 ea 21 	lds	r16, 0x21EA
    1776:	f0 16       	cp	r15, r16
    1778:	f0 f2       	brcs	.-68     	; 0x1736 <read_settings_from_eeprom+0x6a>
      sensors[i].type_aks_pos_hyst =
         eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 8u + (i * 2u));
   }
   /* Read burst length for all channels */
   #ifdef _QMATRIX_
      uint16_t address = EEPROM_LIB_CONFIG_START_ADDRESS + 7u + (num_sensors * 2u);
    177a:	10 e0       	ldi	r17, 0x00	; 0
    177c:	00 0f       	add	r16, r16
    177e:	11 1f       	adc	r17, r17
    1780:	c1 e0       	ldi	r28, 0x01	; 1
    1782:	d0 e2       	ldi	r29, 0x20	; 32
Purpose : Will read settings from EEPROM
Input   :
Output  :
Notes   : Data is stored in 'eeprom_gv_block[]' in the format shown above
==============================================================================*/
void read_settings_from_eeprom(void)
    1784:	0f 2e       	mov	r0, r31
    1786:	f1 e2       	ldi	r31, 0x21	; 33
    1788:	ef 2e       	mov	r14, r31
    178a:	f0 e2       	ldi	r31, 0x20	; 32
    178c:	ff 2e       	mov	r15, r31
    178e:	f0 2d       	mov	r31, r0
    1790:	08 5f       	subi	r16, 0xF8	; 248
    1792:	1f 40       	sbci	r17, 0x0F	; 15
   /* Read burst length for all channels */
   #ifdef _QMATRIX_
      uint16_t address = EEPROM_LIB_CONFIG_START_ADDRESS + 7u + (num_sensors * 2u);
      for(i = 0u; i < QT_NUM_CHANNELS; i++)
      {
         qt_burst_lengths[i] = eeprom_read((address + i));
    1794:	c8 01       	movw	r24, r16
    1796:	8c 0f       	add	r24, r28
    1798:	9d 1f       	adc	r25, r29
    179a:	0e 94 a0 0a 	call	0x1540	; 0x1540 <eeprom_read>
    179e:	89 93       	st	Y+, r24
         eeprom_read(EEPROM_LIB_CONFIG_START_ADDRESS + 8u + (i * 2u));
   }
   /* Read burst length for all channels */
   #ifdef _QMATRIX_
      uint16_t address = EEPROM_LIB_CONFIG_START_ADDRESS + 7u + (num_sensors * 2u);
      for(i = 0u; i < QT_NUM_CHANNELS; i++)
    17a0:	ce 15       	cp	r28, r14
    17a2:	df 05       	cpc	r29, r15
    17a4:	b9 f7       	brne	.-18     	; 0x1794 <read_settings_from_eeprom+0xc8>
      {
         qt_burst_lengths[i] = eeprom_read((address + i));
      }
   #endif
}
    17a6:	df 91       	pop	r29
    17a8:	cf 91       	pop	r28
    17aa:	1f 91       	pop	r17
    17ac:	0f 91       	pop	r16
    17ae:	ff 90       	pop	r15
    17b0:	ef 90       	pop	r14
    17b2:	08 95       	ret

000017b4 <set_timer_period>:
Notes   :
============================================================================*/
void set_timer_period(uint16_t qt_measurement_period_msec)
{
	/*  set timer compare value (how often timer ISR will fire,set to 1 ms interrupt) */
   TCC0.PER = TICKS_PER_MS * qt_measurement_period_msec;
    17b4:	28 ee       	ldi	r18, 0xE8	; 232
    17b6:	33 e0       	ldi	r19, 0x03	; 3
    17b8:	ac 01       	movw	r20, r24
    17ba:	42 9f       	mul	r20, r18
    17bc:	c0 01       	movw	r24, r0
    17be:	43 9f       	mul	r20, r19
    17c0:	90 0d       	add	r25, r0
    17c2:	52 9f       	mul	r21, r18
    17c4:	90 0d       	add	r25, r0
    17c6:	11 24       	eor	r1, r1
    17c8:	e0 e0       	ldi	r30, 0x00	; 0
    17ca:	f8 e0       	ldi	r31, 0x08	; 8
    17cc:	86 a3       	std	Z+38, r24	; 0x26
    17ce:	97 a3       	std	Z+39, r25	; 0x27
    17d0:	08 95       	ret

000017d2 <CCPWrite>:
Input   :   address - A pointer to the address to write to.
            value   - The value to put in to the register.
Notes   :
============================================================================*/
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    17d2:	0f 93       	push	r16
        "st     Z,  r18  \n");

#elif defined __GNUC__
    volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
    RAMPZ = 0;
    17d4:	1b be       	out	0x3b, r1	; 59
#endif
    asm volatile(
    17d6:	fc 01       	movw	r30, r24
    17d8:	08 ed       	ldi	r16, 0xD8	; 216
    17da:	04 bf       	out	0x34, r16	; 52
    17dc:	60 83       	st	Z, r22
        :
        : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "m" (CCP)
        : "r16", "r30", "r31"
        );
#endif
}
    17de:	0f 91       	pop	r16
    17e0:	08 95       	ret

000017e2 <main>:
    /*  Select Prescaler A divider as 4 and Prescaler B & C divider as (1,1) respectively.  */
    /*  Overall divide by 4 i.e. A*B*C  */
    PSconfig = (uint8_t) CLK_PSADIV_4_gc | CLK_PSBCDIV_1_1_gc;

    /*  Enable internal 32 MHz ring oscillator. */
    OSC.CTRL |= OSC_RC32MEN_bm;
    17e2:	e0 e5       	ldi	r30, 0x50	; 80
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	82 60       	ori	r24, 0x02	; 2
    17ea:	80 83       	st	Z, r24
    CCPWrite( &CLK.PSCTRL, PSconfig );
    17ec:	6c e0       	ldi	r22, 0x0C	; 12
    17ee:	81 e4       	ldi	r24, 0x41	; 65
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <CCPWrite>

    /*  Wait until oscillator is ready. */
    while ( ( OSC.STATUS & OSC_RC32MRDY_bm ) == 0 );
    17f6:	e0 e5       	ldi	r30, 0x50	; 80
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	81 81       	ldd	r24, Z+1	; 0x01
    17fc:	81 ff       	sbrs	r24, 1
    17fe:	fd cf       	rjmp	.-6      	; 0x17fa <main+0x18>

    /*  Set the 32 MHz ring oscillator as the main clock source */
    clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | CLK_SCLKSEL_RC32M_gc;
    1800:	60 91 40 00 	lds	r22, 0x0040
    1804:	68 7f       	andi	r22, 0xF8	; 248
    1806:	61 60       	ori	r22, 0x01	; 1
    CCPWrite( &CLK.CTRL, clkCtrl );
    1808:	80 e4       	ldi	r24, 0x40	; 64
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <CCPWrite>
#if (QT_NUM_CHANNELS == 32u)
static void config_32ch_krs(void)
{

   /*  enable sensors 0..7: keys on channels 0..7  */
    qt_enable_key( CHANNEL_0, AKS_GROUP_1, 10u, HYST_6_25 );
    1810:	23 e0       	ldi	r18, 0x03	; 3
    1812:	4a e0       	ldi	r20, 0x0A	; 10
    1814:	61 e0       	ldi	r22, 0x01	; 1
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <qt_enable_key>
    qt_enable_key( CHANNEL_1, AKS_GROUP_1, 10u, HYST_6_25 );
    181c:	23 e0       	ldi	r18, 0x03	; 3
    181e:	4a e0       	ldi	r20, 0x0A	; 10
    1820:	61 e0       	ldi	r22, 0x01	; 1
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <qt_enable_key>
    qt_enable_key( CHANNEL_2, AKS_GROUP_1, 10u, HYST_6_25 );
    1828:	23 e0       	ldi	r18, 0x03	; 3
    182a:	4a e0       	ldi	r20, 0x0A	; 10
    182c:	61 e0       	ldi	r22, 0x01	; 1
    182e:	82 e0       	ldi	r24, 0x02	; 2
    1830:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <qt_enable_key>
    qt_enable_key( CHANNEL_3, AKS_GROUP_1, 10u, HYST_6_25 );
    1834:	23 e0       	ldi	r18, 0x03	; 3
    1836:	4a e0       	ldi	r20, 0x0A	; 10
    1838:	61 e0       	ldi	r22, 0x01	; 1
    183a:	83 e0       	ldi	r24, 0x03	; 3
    183c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <qt_enable_key>
    qt_enable_key( CHANNEL_4, AKS_GROUP_1, 10u, HYST_6_25 );
    1840:	23 e0       	ldi	r18, 0x03	; 3
    1842:	4a e0       	ldi	r20, 0x0A	; 10
    1844:	61 e0       	ldi	r22, 0x01	; 1
    1846:	84 e0       	ldi	r24, 0x04	; 4
    1848:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <qt_enable_key>
    qt_enable_key( CHANNEL_5, AKS_GROUP_1, 10u, HYST_6_25 );
    184c:	23 e0       	ldi	r18, 0x03	; 3
    184e:	4a e0       	ldi	r20, 0x0A	; 10
    1850:	61 e0       	ldi	r22, 0x01	; 1
    1852:	85 e0       	ldi	r24, 0x05	; 5
    1854:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <qt_enable_key>
    qt_enable_key( CHANNEL_6, AKS_GROUP_1, 10u, HYST_6_25 );
    1858:	23 e0       	ldi	r18, 0x03	; 3
    185a:	4a e0       	ldi	r20, 0x0A	; 10
    185c:	61 e0       	ldi	r22, 0x01	; 1
    185e:	86 e0       	ldi	r24, 0x06	; 6
    1860:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <qt_enable_key>
    qt_enable_key( CHANNEL_7, AKS_GROUP_1, 10u, HYST_6_25 );
    1864:	23 e0       	ldi	r18, 0x03	; 3
    1866:	4a e0       	ldi	r20, 0x0A	; 10
    1868:	61 e0       	ldi	r22, 0x01	; 1
    186a:	87 e0       	ldi	r24, 0x07	; 7
    186c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <qt_enable_key>
    /*  enable sensor 8: a rotor on channels 8..11   */
    qt_enable_rotor( CHANNEL_8, CHANNEL_11, NO_AKS_GROUP, 16u, HYST_6_25, RES_8_BIT, 0u  );
    1870:	c1 2c       	mov	r12, r1
    1872:	0f 2e       	mov	r0, r31
    1874:	f7 e0       	ldi	r31, 0x07	; 7
    1876:	ef 2e       	mov	r14, r31
    1878:	f0 2d       	mov	r31, r0
    187a:	03 e0       	ldi	r16, 0x03	; 3
    187c:	20 e1       	ldi	r18, 0x10	; 16
    187e:	40 e0       	ldi	r20, 0x00	; 0
    1880:	6b e0       	ldi	r22, 0x0B	; 11
    1882:	88 e0       	ldi	r24, 0x08	; 8
    1884:	0e 94 ab 08 	call	0x1156	; 0x1156 <qt_enable_rotor>
    /*  enable sensors 9: sliders on channels 12..15 respectively   */
    qt_enable_slider( CHANNEL_12, CHANNEL_15, NO_AKS_GROUP, 16u, HYST_6_25, RES_8_BIT, 0u  );
    1888:	20 e1       	ldi	r18, 0x10	; 16
    188a:	40 e0       	ldi	r20, 0x00	; 0
    188c:	6f e0       	ldi	r22, 0x0F	; 15
    188e:	8c e0       	ldi	r24, 0x0C	; 12
    1890:	0e 94 c9 08 	call	0x1192	; 0x1192 <qt_enable_slider>
    /*  enable sensors 10..11: keys on channels 16..17  */
    qt_enable_key( CHANNEL_16, AKS_GROUP_1, 10u, HYST_6_25 );
    1894:	23 e0       	ldi	r18, 0x03	; 3
    1896:	4a e0       	ldi	r20, 0x0A	; 10
    1898:	61 e0       	ldi	r22, 0x01	; 1
    189a:	80 e1       	ldi	r24, 0x10	; 16
    189c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <qt_enable_key>
    qt_enable_key( CHANNEL_17, AKS_GROUP_1, 10u, HYST_6_25 );
    18a0:	23 e0       	ldi	r18, 0x03	; 3
    18a2:	4a e0       	ldi	r20, 0x0A	; 10
    18a4:	61 e0       	ldi	r22, 0x01	; 1
    18a6:	81 e1       	ldi	r24, 0x11	; 17
    18a8:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <qt_enable_key>
   qt_enable_key( CHANNEL_18, AKS_GROUP_1, 10u, HYST_6_25 );
    18ac:	23 e0       	ldi	r18, 0x03	; 3
    18ae:	4a e0       	ldi	r20, 0x0A	; 10
    18b0:	61 e0       	ldi	r22, 0x01	; 1
    18b2:	82 e1       	ldi	r24, 0x12	; 18
    18b4:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <qt_enable_key>
   qt_enable_key( CHANNEL_19, AKS_GROUP_1, 10u, HYST_6_25 );
    18b8:	23 e0       	ldi	r18, 0x03	; 3
    18ba:	4a e0       	ldi	r20, 0x0A	; 10
    18bc:	61 e0       	ldi	r22, 0x01	; 1
    18be:	83 e1       	ldi	r24, 0x13	; 19
    18c0:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <qt_enable_key>
   qt_enable_key( CHANNEL_20, AKS_GROUP_1, 10u, HYST_6_25 );
    18c4:	23 e0       	ldi	r18, 0x03	; 3
    18c6:	4a e0       	ldi	r20, 0x0A	; 10
    18c8:	61 e0       	ldi	r22, 0x01	; 1
    18ca:	84 e1       	ldi	r24, 0x14	; 20
    18cc:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <qt_enable_key>
   qt_enable_key( CHANNEL_21, AKS_GROUP_1, 10u, HYST_6_25 );
    18d0:	23 e0       	ldi	r18, 0x03	; 3
    18d2:	4a e0       	ldi	r20, 0x0A	; 10
    18d4:	61 e0       	ldi	r22, 0x01	; 1
    18d6:	85 e1       	ldi	r24, 0x15	; 21
    18d8:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <qt_enable_key>
   qt_enable_key( CHANNEL_22, AKS_GROUP_1, 10u, HYST_6_25 );
    18dc:	23 e0       	ldi	r18, 0x03	; 3
    18de:	4a e0       	ldi	r20, 0x0A	; 10
    18e0:	61 e0       	ldi	r22, 0x01	; 1
    18e2:	86 e1       	ldi	r24, 0x16	; 22
    18e4:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <qt_enable_key>
   qt_enable_key( CHANNEL_23, AKS_GROUP_1, 10u, HYST_6_25 );
    18e8:	23 e0       	ldi	r18, 0x03	; 3
    18ea:	4a e0       	ldi	r20, 0x0A	; 10
    18ec:	61 e0       	ldi	r22, 0x01	; 1
    18ee:	87 e1       	ldi	r24, 0x17	; 23
    18f0:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <qt_enable_key>
   qt_enable_key( CHANNEL_24, AKS_GROUP_1, 10u, HYST_6_25 );
    18f4:	23 e0       	ldi	r18, 0x03	; 3
    18f6:	4a e0       	ldi	r20, 0x0A	; 10
    18f8:	61 e0       	ldi	r22, 0x01	; 1
    18fa:	88 e1       	ldi	r24, 0x18	; 24
    18fc:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <qt_enable_key>
   qt_enable_key( CHANNEL_25, AKS_GROUP_1, 10u, HYST_6_25 );
    1900:	23 e0       	ldi	r18, 0x03	; 3
    1902:	4a e0       	ldi	r20, 0x0A	; 10
    1904:	61 e0       	ldi	r22, 0x01	; 1
    1906:	89 e1       	ldi	r24, 0x19	; 25
    1908:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <qt_enable_key>
   qt_enable_key( CHANNEL_26, AKS_GROUP_1, 10u, HYST_6_25 );
    190c:	23 e0       	ldi	r18, 0x03	; 3
    190e:	4a e0       	ldi	r20, 0x0A	; 10
    1910:	61 e0       	ldi	r22, 0x01	; 1
    1912:	8a e1       	ldi	r24, 0x1A	; 26
    1914:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <qt_enable_key>
   qt_enable_key( CHANNEL_27, AKS_GROUP_1, 10u, HYST_6_25 );
    1918:	23 e0       	ldi	r18, 0x03	; 3
    191a:	4a e0       	ldi	r20, 0x0A	; 10
    191c:	61 e0       	ldi	r22, 0x01	; 1
    191e:	8b e1       	ldi	r24, 0x1B	; 27
    1920:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <qt_enable_key>
   qt_enable_key( CHANNEL_28, AKS_GROUP_1, 10u, HYST_6_25 );
    1924:	23 e0       	ldi	r18, 0x03	; 3
    1926:	4a e0       	ldi	r20, 0x0A	; 10
    1928:	61 e0       	ldi	r22, 0x01	; 1
    192a:	8c e1       	ldi	r24, 0x1C	; 28
    192c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <qt_enable_key>
   qt_enable_key( CHANNEL_29, AKS_GROUP_1, 10u, HYST_6_25 );
    1930:	23 e0       	ldi	r18, 0x03	; 3
    1932:	4a e0       	ldi	r20, 0x0A	; 10
    1934:	61 e0       	ldi	r22, 0x01	; 1
    1936:	8d e1       	ldi	r24, 0x1D	; 29
    1938:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <qt_enable_key>
   qt_enable_key( CHANNEL_30, AKS_GROUP_1, 10u, HYST_6_25 );
    193c:	23 e0       	ldi	r18, 0x03	; 3
    193e:	4a e0       	ldi	r20, 0x0A	; 10
    1940:	61 e0       	ldi	r22, 0x01	; 1
    1942:	8e e1       	ldi	r24, 0x1E	; 30
    1944:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <qt_enable_key>
   qt_enable_key( CHANNEL_31, AKS_GROUP_1, 10u, HYST_6_25 );
    1948:	23 e0       	ldi	r18, 0x03	; 3
    194a:	4a e0       	ldi	r20, 0x0A	; 10
    194c:	61 e0       	ldi	r22, 0x01	; 1
    194e:	8f e1       	ldi	r24, 0x1F	; 31
    1950:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <qt_enable_key>

    /* Configure the Sensors as keys or Keys With Rotor/Sliders in this function */
    config_sensors();

    /* initialise touch sensing */
    qt_init_sensing();
    1954:	0e 94 2d 02 	call	0x45a	; 0x45a <qt_init_sensing_with_burst>
============================================================================*/

static void qt_set_parameters( void )
{
    /*  This will be modified by the user to different values   */
    qt_config_data.qt_di              = DEF_QT_DI;
    1958:	74 e0       	ldi	r23, 0x04	; 4
    195a:	70 93 57 21 	sts	0x2157, r23
    qt_config_data.qt_neg_drift_rate  = DEF_QT_NEG_DRIFT_RATE;
    195e:	84 e1       	ldi	r24, 0x14	; 20
    1960:	80 93 5a 21 	sts	0x215A, r24
    qt_config_data.qt_pos_drift_rate  = DEF_QT_POS_DRIFT_RATE;
    1964:	95 e0       	ldi	r25, 0x05	; 5
    1966:	90 93 5b 21 	sts	0x215B, r25
    qt_config_data.qt_max_on_duration = DEF_QT_MAX_ON_DURATION;
    196a:	10 92 59 21 	sts	0x2159, r1
    qt_config_data.qt_drift_hold_time = DEF_QT_DRIFT_HOLD_TIME;
    196e:	80 93 58 21 	sts	0x2158, r24
    qt_config_data.qt_recal_threshold = DEF_QT_RECAL_THRESHOLD;
    1972:	61 e0       	ldi	r22, 0x01	; 1
    1974:	60 93 56 21 	sts	0x2156, r22
    qt_config_data.qt_pos_recal_delay = DEF_QT_POS_RECAL_DELAY;
    1978:	83 e0       	ldi	r24, 0x03	; 3
    197a:	80 93 5c 21 	sts	0x215C, r24
============================================================================*/

static void init_timer_isr( void )
{
    /*  Set timer period    */
    TCC0.PER = TICKS_PER_MS * qt_measurement_period_msec;
    197e:	40 91 51 20 	lds	r20, 0x2051
    1982:	50 91 52 20 	lds	r21, 0x2052
    1986:	28 ee       	ldi	r18, 0xE8	; 232
    1988:	33 e0       	ldi	r19, 0x03	; 3
    198a:	42 9f       	mul	r20, r18
    198c:	c0 01       	movw	r24, r0
    198e:	43 9f       	mul	r20, r19
    1990:	90 0d       	add	r25, r0
    1992:	52 9f       	mul	r21, r18
    1994:	90 0d       	add	r25, r0
    1996:	11 24       	eor	r1, r1
    1998:	e0 e0       	ldi	r30, 0x00	; 0
    199a:	f8 e0       	ldi	r31, 0x08	; 8
    199c:	86 a3       	std	Z+38, r24	; 0x26
    199e:	97 a3       	std	Z+39, r25	; 0x27
    /*  select clock source */
    TCC0.CTRLA = (TOUCH_DATA_T)4;
    19a0:	70 83       	st	Z, r23
    /*  Set Comparre A interrupt to low level   */
    TCC0.INTCTRLB = 1u;
    19a2:	67 83       	std	Z+7, r22	; 0x07
    /*  enable low lever interrupts in power manager interrupt control  */
    PMIC.CTRL |= 1u;
    19a4:	e0 ea       	ldi	r30, 0xA0	; 160
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	82 81       	ldd	r24, Z+2	; 0x02
    19aa:	81 60       	ori	r24, 0x01	; 1
    19ac:	82 83       	std	Z+2, r24	; 0x02

    /*  Address to pass address of user functions   */
    /*  This function is called after the library has made capacitive measurements,
    *   but before it has processed them. The user can use this hook to apply filter
    *   functions to the measured signal values.(Possibly to fix sensor layout faults)    */
    qt_filter_callback = 0;
    19ae:	10 92 5d 21 	sts	0x215D, r1
    19b2:	10 92 5e 21 	sts	0x215E, r1
#ifdef _DEBUG_INTERFACE_
		QDebug_Init();
    19b6:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <QDebug_Init>
#endif

    /* enable interrupts */
    __enable_interrupt();
    19ba:	78 94       	sei
#ifdef _DEBUG_INTERFACE_
  /* Process commands from PC */
    QDebug_ProcessCommands();
    19bc:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <QDebug_ProcessCommands>
#endif

/* loop forever */
   for( ; ; )
   {
      if( time_to_measure_touch )
    19c0:	80 91 ac 20 	lds	r24, 0x20AC
    19c4:	88 23       	and	r24, r24
    19c6:	69 f0       	breq	.+26     	; 0x19e2 <main+0x200>
      {
         /*  clear flag: it's time to measure touch  */
         time_to_measure_touch = 0u;
    19c8:	10 92 ac 20 	sts	0x20AC, r1

         do {

            /*  one time measure touch sensors    */
            status_flag = qt_measure_sensors( current_time_ms_touch );
    19cc:	80 91 aa 20 	lds	r24, 0x20AA
    19d0:	90 91 ab 20 	lds	r25, 0x20AB
    19d4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <qt_measure_sensors>
    19d8:	ec 01       	movw	r28, r24
            burst_flag = status_flag & QTLIB_BURST_AGAIN;
#ifdef _DEBUG_INTERFACE_
		/* send debug data */
        QDebug_SendData(status_flag);
    19da:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <QDebug_SendData>
#endif
            /*Time critical host application code goes here*/

         }while (  burst_flag) ;
    19de:	d0 fd       	sbrc	r29, 0
    19e0:	f5 cf       	rjmp	.-22     	; 0x19cc <main+0x1ea>
      }
#ifdef _DEBUG_INTERFACE_
  			/* Process commands from PC */
            QDebug_ProcessCommands();
    19e2:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <QDebug_ProcessCommands>
#endif

      /*  Time Non-critical host application code goes here  */

   }
    19e6:	ec cf       	rjmp	.-40     	; 0x19c0 <main+0x1de>

000019e8 <__vector_16>:
Output  :   n/a
Notes   :
============================================================================*/

ISR(TCC0_CCA_vect)
{
    19e8:	1f 92       	push	r1
    19ea:	0f 92       	push	r0
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	0f 92       	push	r0
    19f0:	11 24       	eor	r1, r1
    19f2:	2f 93       	push	r18
    19f4:	3f 93       	push	r19
    19f6:	8f 93       	push	r24
    19f8:	9f 93       	push	r25
    /*  set flag: it's time to measure touch    */
    time_to_measure_touch = 1u;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	80 93 ac 20 	sts	0x20AC, r24

    /*  update the current time  */
    current_time_ms_touch += qt_measurement_period_msec;
    1a00:	20 91 aa 20 	lds	r18, 0x20AA
    1a04:	30 91 ab 20 	lds	r19, 0x20AB
    1a08:	80 91 51 20 	lds	r24, 0x2051
    1a0c:	90 91 52 20 	lds	r25, 0x2052
    1a10:	82 0f       	add	r24, r18
    1a12:	93 1f       	adc	r25, r19
    1a14:	80 93 aa 20 	sts	0x20AA, r24
    1a18:	90 93 ab 20 	sts	0x20AB, r25
}
    1a1c:	9f 91       	pop	r25
    1a1e:	8f 91       	pop	r24
    1a20:	3f 91       	pop	r19
    1a22:	2f 91       	pop	r18
    1a24:	0f 90       	pop	r0
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	0f 90       	pop	r0
    1a2a:	1f 90       	pop	r1
    1a2c:	18 95       	reti

00001a2e <Msg_Start_Routine>:
 * \param message length, length of packet data in bytes
 * \note The data will be binary data
 */
static void 
Msg_Start_Routine(uint16_t msg_length)
{
    1a2e:	cf 93       	push	r28
    1a30:	c8 2f       	mov	r28, r24
  PutChar (0x1B);		
    1a32:	8b e1       	ldi	r24, 0x1B	; 27
    1a34:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
  packet_crc = 0; 
    1a38:	10 92 b7 20 	sts	0x20B7, r1
  PutChar ((uint8_t)msg_length >> 8);			   
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
  PutChar ((uint8_t)msg_length);			
    1a42:	8c 2f       	mov	r24, r28
    1a44:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
  SequenceL= (SequenceL+1)& 0x0F;	 
    1a48:	80 91 b9 20 	lds	r24, 0x20B9
    1a4c:	8f 5f       	subi	r24, 0xFF	; 255
    1a4e:	8f 70       	andi	r24, 0x0F	; 15
    1a50:	80 93 b9 20 	sts	0x20B9, r24
  PutChar ((SequenceH<<4)+SequenceL);   
    1a54:	90 91 b8 20 	lds	r25, 0x20B8
    1a58:	20 e1       	ldi	r18, 0x10	; 16
    1a5a:	92 9f       	mul	r25, r18
    1a5c:	80 0d       	add	r24, r0
    1a5e:	11 24       	eor	r1, r1
    1a60:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
}
    1a64:	cf 91       	pop	r28
    1a66:	08 95       	ret

00001a68 <Msg_End_Routine>:
 * \note none
 */
static void
Msg_End_Routine(void)
{
  PutChar (packet_crc);
    1a68:	80 91 b7 20 	lds	r24, 0x20B7
    1a6c:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
    1a70:	08 95       	ret

00001a72 <QDebug_Init>:
   #if defined(QDEBUG_SPI)
      SPI_Master_Init();
   #elif defined(QDEBUG_TWI)
      TWI_Master_Init();
   #elif defined(QDEBUG_SPI_BB)
      BitBangSPI_Master_Init();
    1a72:	0e 94 03 0a 	call	0x1406	; 0x1406 <BitBangSPI_Master_Init>
   #endif	
      qt_get_library_sig(&lib_siginfo);
    1a76:	8f eb       	ldi	r24, 0xBF	; 191
    1a78:	90 e2       	ldi	r25, 0x20	; 32
    1a7a:	0e 94 40 02 	call	0x480	; 0x480 <qt_get_library_sig>
      Init_Buffers();
    1a7e:	0e 94 1b 10 	call	0x2036	; 0x2036 <Init_Buffers>
      /* Eeprom settings sanity check */
   #if !(defined(__AVR32__) || defined(__ICCAVR32__) || defined(_TOUCH_ARM_))
      eeprom_lib_version = read_info_from_eeprom();
    1a82:	0e 94 c1 0a 	call	0x1582	; 0x1582 <read_info_from_eeprom>
      if(eeprom_lib_version == lib_siginfo.library_version)
    1a86:	20 91 c3 20 	lds	r18, 0x20C3
    1a8a:	30 91 c4 20 	lds	r19, 0x20C4
    1a8e:	28 17       	cp	r18, r24
    1a90:	39 07       	cpc	r19, r25
    1a92:	19 f4       	brne	.+6      	; 0x1a9a <QDebug_Init+0x28>
      {
         read_settings_from_eeprom();
    1a94:	0e 94 66 0b 	call	0x16cc	; 0x16cc <read_settings_from_eeprom>
    1a98:	08 95       	ret
      }
      else
      {
         write_info_to_eeprom(lib_siginfo.library_version);
    1a9a:	c9 01       	movw	r24, r18
    1a9c:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <write_info_to_eeprom>
         write_global_settings_to_eeprom();
    1aa0:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <write_global_settings_to_eeprom>
         write_sensor_settings_to_eeprom();
    1aa4:	0e 94 0f 0b 	call	0x161e	; 0x161e <write_sensor_settings_to_eeprom>
         #ifdef _QMATRIX_
            write_burst_lenghts_to_eeprom();
    1aa8:	0e 94 41 0b 	call	0x1682	; 0x1682 <write_burst_lenghts_to_eeprom>
    1aac:	08 95       	ret

00001aae <QDebug_SetSubscriptions>:
 * if 1way SPI interface is used.
 */
void
QDebug_SetSubscriptions (uint16_t once, uint16_t change, uint16_t allways)
{
   qgSubsOnce = once;
    1aae:	80 93 b1 20 	sts	0x20B1, r24
    1ab2:	90 93 b2 20 	sts	0x20B2, r25
   qgSubsChange = change;
    1ab6:	60 93 b3 20 	sts	0x20B3, r22
    1aba:	70 93 b4 20 	sts	0x20B4, r23
   qgSubsAllways = allways;
    1abe:	40 93 af 20 	sts	0x20AF, r20
    1ac2:	50 93 b0 20 	sts	0x20B0, r21
    1ac6:	08 95       	ret

00001ac8 <Set_Subscriptions>:
/*! \brief Set Data Subscription values.
 * \note  Should only be called from the command handler.
 */
void
Set_Subscriptions (void)
{
    1ac8:	ff 92       	push	r15
    1aca:	0f 93       	push	r16
    1acc:	1f 93       	push	r17
    1ace:	cf 93       	push	r28
    1ad0:	df 93       	push	r29
   uint16_t temp;

   temp = GetChar() << 8;			// Bit 8-15 
    1ad2:	0e 94 40 10 	call	0x2080	; 0x2080 <GetChar>
    1ad6:	c8 2f       	mov	r28, r24
   uint16_t a = temp | GetChar();
    1ad8:	0e 94 40 10 	call	0x2080	; 0x2080 <GetChar>
void
Set_Subscriptions (void)
{
   uint16_t temp;

   temp = GetChar() << 8;			// Bit 8-15 
    1adc:	3c 2f       	mov	r19, r28
    1ade:	20 e0       	ldi	r18, 0x00	; 0
   uint16_t a = temp | GetChar();
    1ae0:	e9 01       	movw	r28, r18
    1ae2:	c8 2b       	or	r28, r24
   
   temp = GetChar() << 8;			// Bit 8-15
    1ae4:	0e 94 40 10 	call	0x2080	; 0x2080 <GetChar>
    1ae8:	18 2f       	mov	r17, r24
   uint16_t b = temp | GetChar();
    1aea:	0e 94 40 10 	call	0x2080	; 0x2080 <GetChar>
   uint16_t temp;

   temp = GetChar() << 8;			// Bit 8-15 
   uint16_t a = temp | GetChar();
   
   temp = GetChar() << 8;			// Bit 8-15
    1aee:	71 2f       	mov	r23, r17
    1af0:	60 e0       	ldi	r22, 0x00	; 0
   uint16_t b = temp | GetChar();
    1af2:	8b 01       	movw	r16, r22
    1af4:	08 2b       	or	r16, r24

   temp = GetChar() << 8;			// Bit 8-15
    1af6:	0e 94 40 10 	call	0x2080	; 0x2080 <GetChar>
    1afa:	f8 2e       	mov	r15, r24
   uint16_t c = temp | GetChar();
    1afc:	0e 94 40 10 	call	0x2080	; 0x2080 <GetChar>
   uint16_t a = temp | GetChar();
   
   temp = GetChar() << 8;			// Bit 8-15
   uint16_t b = temp | GetChar();

   temp = GetChar() << 8;			// Bit 8-15
    1b00:	5f 2d       	mov	r21, r15
    1b02:	40 e0       	ldi	r20, 0x00	; 0
   uint16_t c = temp | GetChar();
    1b04:	48 2b       	or	r20, r24
   QDebug_SetSubscriptions(a, b, c);
    1b06:	b8 01       	movw	r22, r16
    1b08:	ce 01       	movw	r24, r28
    1b0a:	0e 94 57 0d 	call	0x1aae	; 0x1aae <QDebug_SetSubscriptions>
}
    1b0e:	df 91       	pop	r29
    1b10:	cf 91       	pop	r28
    1b12:	1f 91       	pop	r17
    1b14:	0f 91       	pop	r16
    1b16:	ff 90       	pop	r15
    1b18:	08 95       	ret

00001b1a <Set_Global_Config>:
 * \note  Should only be called from the command handler.
 */
void
Set_Global_Config (void)
{
   qt_config_data.qt_recal_threshold   = (recal_threshold_t)GetChar();
    1b1a:	0e 94 40 10 	call	0x2080	; 0x2080 <GetChar>
    1b1e:	80 93 56 21 	sts	0x2156, r24
   qt_config_data.qt_di                = GetChar();
    1b22:	0e 94 40 10 	call	0x2080	; 0x2080 <GetChar>
    1b26:	80 93 57 21 	sts	0x2157, r24
   qt_config_data.qt_drift_hold_time   = GetChar();
    1b2a:	0e 94 40 10 	call	0x2080	; 0x2080 <GetChar>
    1b2e:	80 93 58 21 	sts	0x2158, r24
   qt_config_data.qt_max_on_duration   = GetChar();
    1b32:	0e 94 40 10 	call	0x2080	; 0x2080 <GetChar>
    1b36:	80 93 59 21 	sts	0x2159, r24
   qt_config_data.qt_neg_drift_rate    = GetChar();
    1b3a:	0e 94 40 10 	call	0x2080	; 0x2080 <GetChar>
    1b3e:	80 93 5a 21 	sts	0x215A, r24
   qt_config_data.qt_pos_drift_rate    = GetChar();
    1b42:	0e 94 40 10 	call	0x2080	; 0x2080 <GetChar>
    1b46:	80 93 5b 21 	sts	0x215B, r24
   qt_config_data.qt_pos_recal_delay   = GetChar();
    1b4a:	0e 94 40 10 	call	0x2080	; 0x2080 <GetChar>
    1b4e:	80 93 5c 21 	sts	0x215C, r24
   qt_measurement_period_msec          = (GetChar() << 8u);
    1b52:	0e 94 40 10 	call	0x2080	; 0x2080 <GetChar>
    1b56:	10 92 51 20 	sts	0x2051, r1
    1b5a:	80 93 52 20 	sts	0x2052, r24
   qt_measurement_period_msec          |= GetChar();
    1b5e:	0e 94 40 10 	call	0x2080	; 0x2080 <GetChar>
    1b62:	20 91 51 20 	lds	r18, 0x2051
    1b66:	30 91 52 20 	lds	r19, 0x2052
    1b6a:	a9 01       	movw	r20, r18
    1b6c:	48 2b       	or	r20, r24
    1b6e:	ca 01       	movw	r24, r20
    1b70:	80 93 51 20 	sts	0x2051, r24
    1b74:	90 93 52 20 	sts	0x2052, r25
#if !(defined(__AVR32__) || defined(__ICCAVR32__) || defined(_TOUCH_ARM_))
   set_timer_period(qt_measurement_period_msec);
    1b78:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <set_timer_period>
#endif
   #if !(defined(__AVR32__) || defined(__ICCAVR32__) || defined(_TOUCH_ARM_))
      write_global_settings_to_eeprom();
    1b7c:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <write_global_settings_to_eeprom>
    1b80:	08 95       	ret

00001b82 <Set_Channel_Config>:
/*! \brief Extract the data packet from QTouch Studio and set channel config.
 * \note  Should only be called from the command handler.
 */
void
Set_Channel_Config (void)
{
    1b82:	cf 93       	push	r28
    1b84:	df 93       	push	r29
   uint8_t sensor_number;
   uint8_t sensor_aks_hyst;

   sensor_number = GetChar();
    1b86:	0e 94 40 10 	call	0x2080	; 0x2080 <GetChar>
   sensors[sensor_number].threshold = GetChar();
    1b8a:	c8 2f       	mov	r28, r24
    1b8c:	d0 e0       	ldi	r29, 0x00	; 0
    1b8e:	0e 94 40 10 	call	0x2080	; 0x2080 <GetChar>
    1b92:	cc 0f       	add	r28, r28
    1b94:	dd 1f       	adc	r29, r29
    1b96:	cc 0f       	add	r28, r28
    1b98:	dd 1f       	adc	r29, r29
    1b9a:	cc 0f       	add	r28, r28
    1b9c:	dd 1f       	adc	r29, r29
    1b9e:	c5 51       	subi	r28, 0x15	; 21
    1ba0:	de 4d       	sbci	r29, 0xDE	; 222
    1ba2:	8b 83       	std	Y+3, r24	; 0x03
   sensor_aks_hyst = GetChar();
    1ba4:	0e 94 40 10 	call	0x2080	; 0x2080 <GetChar>

   /* Set only the AKS and Hysteresis fields (00111011) */
  sensors[sensor_number].type_aks_pos_hyst =
    1ba8:	8b 73       	andi	r24, 0x3B	; 59
    1baa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bac:	94 7c       	andi	r25, 0xC4	; 196
    1bae:	89 2b       	or	r24, r25
    1bb0:	8c 83       	std	Y+4, r24	; 0x04
    (sensors[sensor_number].
     type_aks_pos_hyst & (0xC4u)) | (sensor_aks_hyst & ~(0xC4u));

   #if !(defined(__AVR32__) || defined(__ICCAVR32__) || defined(_TOUCH_ARM_))
      write_sensor_settings_to_eeprom();
    1bb2:	0e 94 0f 0b 	call	0x161e	; 0x161e <write_sensor_settings_to_eeprom>
   #endif
}
    1bb6:	df 91       	pop	r29
    1bb8:	cf 91       	pop	r28
    1bba:	08 95       	ret

00001bbc <Set_QM_Burst_Lengths>:
/*! \brief Set QMatrix burst lengths
 * \note  Should only be called from the command handler.
 */
void
Set_QM_Burst_Lengths (void)
{
    1bbc:	0f 93       	push	r16
    1bbe:	1f 93       	push	r17
    1bc0:	cf 93       	push	r28
    1bc2:	df 93       	push	r29
    1bc4:	c1 e0       	ldi	r28, 0x01	; 1
    1bc6:	d0 e2       	ldi	r29, 0x20	; 32
#ifdef _QMATRIX_
/*! \brief Set QMatrix burst lengths
 * \note  Should only be called from the command handler.
 */
void
Set_QM_Burst_Lengths (void)
    1bc8:	01 e2       	ldi	r16, 0x21	; 33
    1bca:	10 e2       	ldi	r17, 0x20	; 32
{
   uint8_t c = 0;
   while( c < QT_NUM_CHANNELS )
   {
      qt_burst_lengths[c++] = GetChar();
    1bcc:	0e 94 40 10 	call	0x2080	; 0x2080 <GetChar>
    1bd0:	89 93       	st	Y+, r24
 */
void
Set_QM_Burst_Lengths (void)
{
   uint8_t c = 0;
   while( c < QT_NUM_CHANNELS )
    1bd2:	c0 17       	cp	r28, r16
    1bd4:	d1 07       	cpc	r29, r17
    1bd6:	d1 f7       	brne	.-12     	; 0x1bcc <Set_QM_Burst_Lengths+0x10>
   {
      qt_burst_lengths[c++] = GetChar();
   }
   #if !(defined(__AVR32__) || defined(__ICCAVR32__) || defined(_TOUCH_ARM_))
      write_burst_lenghts_to_eeprom();
    1bd8:	0e 94 41 0b 	call	0x1682	; 0x1682 <write_burst_lenghts_to_eeprom>
   #endif
}
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	1f 91       	pop	r17
    1be2:	0f 91       	pop	r16
    1be4:	08 95       	ret

00001be6 <Set_QT_User_Data>:
 * \param  data pointer
 * \note  The data can be binary data
 */
void
Set_QT_User_Data (uint8_t * pdata)
{
    1be6:	0f 93       	push	r16
    1be8:	1f 93       	push	r17
    1bea:	cf 93       	push	r28
    1bec:	df 93       	push	r29
    1bee:	8c 01       	movw	r16, r24
   uint16_t c = RX_Buffer[1];
    1bf0:	c0 91 ca 20 	lds	r28, 0x20CA
    1bf4:	d0 e0       	ldi	r29, 0x00	; 0
#ifdef _OPT_SRAM_
   Msg_Start_Routine(4u + c);
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	04 96       	adiw	r24, 0x04	; 4
    1bfa:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <Msg_Start_Routine>
#endif   
   while( c > 0 )
    1bfe:	20 97       	sbiw	r28, 0x00	; 0
    1c00:	39 f0       	breq	.+14     	; 0x1c10 <Set_QT_User_Data+0x2a>
   {
      PutChar(*pdata++);
    1c02:	f8 01       	movw	r30, r16
    1c04:	81 91       	ld	r24, Z+
    1c06:	8f 01       	movw	r16, r30
    1c08:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
      c--;
    1c0c:	21 97       	sbiw	r28, 0x01	; 1
{
   uint16_t c = RX_Buffer[1];
#ifdef _OPT_SRAM_
   Msg_Start_Routine(4u + c);
#endif   
   while( c > 0 )
    1c0e:	c9 f7       	brne	.-14     	; 0x1c02 <Set_QT_User_Data+0x1c>
   {
      PutChar(*pdata++);
      c--;
   }
#ifdef _OPT_SRAM_
   Msg_End_Routine();
    1c10:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <Msg_End_Routine>
#else
   Send_Message();
#endif
}
    1c14:	df 91       	pop	r29
    1c16:	cf 91       	pop	r28
    1c18:	1f 91       	pop	r17
    1c1a:	0f 91       	pop	r16
    1c1c:	08 95       	ret

00001c1e <QDebug_ProcessCommands>:
   uint8_t CommandID;

   /* Fill in the address for user data in memory */
   uint8_t *pdata = 0;

   if (Receive_Message() == 0)
    1c1e:	0e 94 4f 10 	call	0x209e	; 0x209e <Receive_Message>
    1c22:	88 23       	and	r24, r24
    1c24:	29 f1       	breq	.+74     	; 0x1c70 <QDebug_ProcessCommands+0x52>
      return;
   // Handle the commands
   CommandID = GetChar();
    1c26:	0e 94 40 10 	call	0x2080	; 0x2080 <GetChar>
   switch (CommandID)
    1c2a:	83 31       	cpi	r24, 0x13	; 19
    1c2c:	89 f0       	breq	.+34     	; 0x1c50 <QDebug_ProcessCommands+0x32>
    1c2e:	28 f4       	brcc	.+10     	; 0x1c3a <QDebug_ProcessCommands+0x1c>
    1c30:	81 31       	cpi	r24, 0x11	; 17
    1c32:	41 f0       	breq	.+16     	; 0x1c44 <QDebug_ProcessCommands+0x26>
    1c34:	82 31       	cpi	r24, 0x12	; 18
    1c36:	b1 f4       	brne	.+44     	; 0x1c64 <QDebug_ProcessCommands+0x46>
    1c38:	08 c0       	rjmp	.+16     	; 0x1c4a <QDebug_ProcessCommands+0x2c>
    1c3a:	84 31       	cpi	r24, 0x14	; 20
    1c3c:	61 f0       	breq	.+24     	; 0x1c56 <QDebug_ProcessCommands+0x38>
    1c3e:	85 31       	cpi	r24, 0x15	; 21
    1c40:	89 f4       	brne	.+34     	; 0x1c64 <QDebug_ProcessCommands+0x46>
    1c42:	0c c0       	rjmp	.+24     	; 0x1c5c <QDebug_ProcessCommands+0x3e>
   {
   case QT_CMD_DUMMY:
      break;
   case QT_CMD_SET_SUBS:
      Set_Subscriptions();
    1c44:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <Set_Subscriptions>
      break;
    1c48:	0d c0       	rjmp	.+26     	; 0x1c64 <QDebug_ProcessCommands+0x46>
   case QT_CMD_SET_GLOBAL_CONFIG:
      Set_Global_Config();
    1c4a:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <Set_Global_Config>
      break;
    1c4e:	0a c0       	rjmp	.+20     	; 0x1c64 <QDebug_ProcessCommands+0x46>
   case QT_CMD_SET_CH_CONFIG:
      Set_Channel_Config();
    1c50:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <Set_Channel_Config>
      break;
    1c54:	07 c0       	rjmp	.+14     	; 0x1c64 <QDebug_ProcessCommands+0x46>
   #ifdef _QMATRIX_
      case QT_CMD_SET_QM_BURST_LENGTHS:
         Set_QM_Burst_Lengths();
    1c56:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <Set_QM_Burst_Lengths>
         break;
    1c5a:	04 c0       	rjmp	.+8      	; 0x1c64 <QDebug_ProcessCommands+0x46>
   #endif
   case QT_CMD_SET_USER_DATA:
      Set_QT_User_Data(pdata);
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <Set_QT_User_Data>
      break;
   }
   RX_Buffer[0]=0;
    1c64:	10 92 c9 20 	sts	0x20C9, r1
   RX_index=0;	
    1c68:	10 92 c7 20 	sts	0x20C7, r1
    1c6c:	10 92 c8 20 	sts	0x20C8, r1
    1c70:	08 95       	ret

00001c72 <Transmit_Dummy>:
 */
void
Transmit_Dummy (void)
{
#ifdef _OPT_SRAM_
   Msg_Start_Routine(TX_PKT_HEADER_LENGTH);  
    1c72:	85 e0       	ldi	r24, 0x05	; 5
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <Msg_Start_Routine>
#endif   
   PutChar(QT_DUMMY);
    1c7a:	80 e2       	ldi	r24, 0x20	; 32
    1c7c:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
#ifdef _OPT_SRAM_
   Msg_End_Routine();
    1c80:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <Msg_End_Routine>
    1c84:	08 95       	ret

00001c86 <Transmit_Sign_On>:
 */
void
Transmit_Sign_On (void)
{
#ifdef _OPT_SRAM_
  Msg_Start_Routine(TX_SIGN_ON_PKT_LENGTH);
    1c86:	82 e1       	ldi	r24, 0x12	; 18
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <Msg_Start_Routine>
#endif	
   PutChar(QT_SIGN_ON);
    1c8e:	81 e2       	ldi	r24, 0x21	; 33
    1c90:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
   PutInt(PROJECT_ID);
    1c94:	88 e3       	ldi	r24, 0x38	; 56
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	0e 94 36 10 	call	0x206c	; 0x206c <PutInt>
   PutChar(INTERFACE);
    1c9c:	85 e0       	ldi	r24, 0x05	; 5
    1c9e:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
   PutChar(1);                         //PROTOCOL_TYPE
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
   PutChar(2);                         //PROTOCOL_VERSION
    1ca8:	82 e0       	ldi	r24, 0x02	; 2
    1caa:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
   PutChar(lib_siginfo.lib_sig_lword);	//LIB_TYPE
    1cae:	80 91 bf 20 	lds	r24, 0x20BF
    1cb2:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
   PutInt(lib_siginfo.library_version);//LIB_VERSION
    1cb6:	80 91 c3 20 	lds	r24, 0x20C3
    1cba:	90 91 c4 20 	lds	r25, 0x20C4
    1cbe:	0e 94 36 10 	call	0x206c	; 0x206c <PutInt>
   PutInt(0);                          //LIB_VARIANT
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	0e 94 36 10 	call	0x206c	; 0x206c <PutInt>
   PutChar(QT_NUM_CHANNELS);
    1cca:	80 e2       	ldi	r24, 0x20	; 32
    1ccc:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
   PutInt(delivery);    // subscription info
    1cd0:	80 91 b5 20 	lds	r24, 0x20B5
    1cd4:	90 91 b6 20 	lds	r25, 0x20B6
    1cd8:	0e 94 36 10 	call	0x206c	; 0x206c <PutInt>
#ifdef _OPT_SRAM_
   Msg_End_Routine();
    1cdc:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <Msg_End_Routine>
    1ce0:	08 95       	ret

00001ce2 <Transmit_Global_Config>:
 */
void
Transmit_Global_Config (void)
{
#ifdef _OPT_SRAM_
   Msg_Start_Routine(TX_GLOBAL_CONFIG_PKT_LENGTH);
    1ce2:	81 e1       	ldi	r24, 0x11	; 17
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <Msg_Start_Routine>
#endif		
   PutChar(QT_GLOBAL_CONFIG);
    1cea:	82 e2       	ldi	r24, 0x22	; 34
    1cec:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
   PutChar(qt_config_data.qt_recal_threshold);
    1cf0:	80 91 56 21 	lds	r24, 0x2156
    1cf4:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
   PutChar(qt_config_data.qt_di);
    1cf8:	80 91 57 21 	lds	r24, 0x2157
    1cfc:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
   PutChar(qt_config_data.qt_drift_hold_time);
    1d00:	80 91 58 21 	lds	r24, 0x2158
    1d04:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
   PutChar(qt_config_data.qt_max_on_duration);
    1d08:	80 91 59 21 	lds	r24, 0x2159
    1d0c:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
   PutChar(qt_config_data.qt_neg_drift_rate);
    1d10:	80 91 5a 21 	lds	r24, 0x215A
    1d14:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
   PutChar(qt_config_data.qt_pos_drift_rate);
    1d18:	80 91 5b 21 	lds	r24, 0x215B
    1d1c:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
   PutChar(qt_config_data.qt_pos_recal_delay);
    1d20:	80 91 5c 21 	lds	r24, 0x215C
    1d24:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
   PutInt(qt_measurement_period_msec);
    1d28:	80 91 51 20 	lds	r24, 0x2051
    1d2c:	90 91 52 20 	lds	r25, 0x2052
    1d30:	0e 94 36 10 	call	0x206c	; 0x206c <PutInt>
   PutInt(TICKS_PER_MS);
    1d34:	84 ef       	ldi	r24, 0xF4	; 244
    1d36:	91 e0       	ldi	r25, 0x01	; 1
    1d38:	0e 94 36 10 	call	0x206c	; 0x206c <PutInt>
   PutChar(0); // Time_Setting
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
#ifdef _OPT_SRAM_
   Msg_End_Routine();
    1d42:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <Msg_End_Routine>
    1d46:	08 95       	ret

00001d48 <Transmit_Sensor_Config>:
/*! \brief Transmits the channel config struct to QTouch Studio
 * \note 
 */
void
Transmit_Sensor_Config (void)
{
    1d48:	1f 93       	push	r17
    1d4a:	cf 93       	push	r28
    1d4c:	df 93       	push	r29
  uint8_t c = 0;
#ifdef _OPT_SRAM_  
   #ifdef _ROTOR_SLIDER_
     Msg_Start_Routine(TX_SENSOR_CONFIG_PKT_LENGTH);    
    1d4e:	80 91 ea 21 	lds	r24, 0x21EA
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	88 0f       	add	r24, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	88 0f       	add	r24, r24
    1d5a:	99 1f       	adc	r25, r25
    1d5c:	06 96       	adiw	r24, 0x06	; 6
    1d5e:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <Msg_Start_Routine>
   #else 
     Msg_Start_Routine(TX_SENSOR_CONFIG_PKT_LENGTH);    
   #endif
#endif   
   PutChar(QT_SENSOR_CONFIG);
    1d62:	83 e2       	ldi	r24, 0x23	; 35
    1d64:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
   #ifdef _ROTOR_SLIDER_
      PutChar(1);		// 1 = KRS
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
      for(c=0; c<num_sensors; c++)
    1d6e:	80 91 ea 21 	lds	r24, 0x21EA
    1d72:	88 23       	and	r24, r24
    1d74:	e1 f0       	breq	.+56     	; 0x1dae <Transmit_Sensor_Config+0x66>
    1d76:	10 e0       	ldi	r17, 0x00	; 0
      {
         PutChar(sensors[c].threshold);
    1d78:	c1 2f       	mov	r28, r17
    1d7a:	d0 e0       	ldi	r29, 0x00	; 0
    1d7c:	cc 0f       	add	r28, r28
    1d7e:	dd 1f       	adc	r29, r29
    1d80:	cc 0f       	add	r28, r28
    1d82:	dd 1f       	adc	r29, r29
    1d84:	cc 0f       	add	r28, r28
    1d86:	dd 1f       	adc	r29, r29
    1d88:	c5 51       	subi	r28, 0x15	; 21
    1d8a:	de 4d       	sbci	r29, 0xDE	; 222
    1d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8e:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
         PutChar(sensors[c].type_aks_pos_hyst);
    1d92:	8c 81       	ldd	r24, Y+4	; 0x04
    1d94:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
         PutChar(sensors[c].from_channel);
    1d98:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9a:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
         PutChar(sensors[c].to_channel);
    1d9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1da0:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
   #endif
#endif   
   PutChar(QT_SENSOR_CONFIG);
   #ifdef _ROTOR_SLIDER_
      PutChar(1);		// 1 = KRS
      for(c=0; c<num_sensors; c++)
    1da4:	1f 5f       	subi	r17, 0xFF	; 255
    1da6:	80 91 ea 21 	lds	r24, 0x21EA
    1daa:	18 17       	cp	r17, r24
    1dac:	28 f3       	brcs	.-54     	; 0x1d78 <Transmit_Sensor_Config+0x30>
         PutChar(sensors[c].type_aks_pos_hyst);
         PutChar(sensors[c].from_channel);
      }
   #endif
#ifdef _OPT_SRAM_
  Msg_End_Routine();
    1dae:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <Msg_End_Routine>
#else
  Send_Message();
#endif 
}
    1db2:	df 91       	pop	r29
    1db4:	cf 91       	pop	r28
    1db6:	1f 91       	pop	r17
    1db8:	08 95       	ret

00001dba <Transmit_Signals>:
/*! \brief Transmits the measurement values for each channel to QTouch Studio
 * \note 
 */
void
Transmit_Signals (void)
{
    1dba:	ef 92       	push	r14
    1dbc:	ff 92       	push	r15
    1dbe:	0f 93       	push	r16
    1dc0:	1f 93       	push	r17
    1dc2:	cf 93       	push	r28
    1dc4:	df 93       	push	r29
   uint8_t c;
#ifdef _OPT_SRAM_
   Msg_Start_Routine(TX_SIGNALS_PKT_LENGTH);
    1dc6:	85 e4       	ldi	r24, 0x45	; 69
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <Msg_Start_Routine>
#endif   
   PutChar(QT_SIGNALS);
    1dce:	84 e2       	ldi	r24, 0x24	; 36
    1dd0:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
    1dd4:	cf e5       	ldi	r28, 0x5F	; 95
    1dd6:	d1 e2       	ldi	r29, 0x21	; 33

/*! \brief Transmits the measurement values for each channel to QTouch Studio
 * \note 
 */
void
Transmit_Signals (void)
    1dd8:	0f 2e       	mov	r0, r31
    1dda:	ff e9       	ldi	r31, 0x9F	; 159
    1ddc:	ef 2e       	mov	r14, r31
    1dde:	f1 e2       	ldi	r31, 0x21	; 33
    1de0:	ff 2e       	mov	r15, r31
    1de2:	f0 2d       	mov	r31, r0
    1de4:	8e 01       	movw	r16, r28
   Msg_Start_Routine(TX_SIGNALS_PKT_LENGTH);
#endif   
   PutChar(QT_SIGNALS);
   for(c=0; c<QT_NUM_CHANNELS; c++)
   {
      PutChar(qt_measure_data.channel_signals[c] >> 8);
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
    1dec:	22 96       	adiw	r28, 0x02	; 2
      PutChar(qt_measure_data.channel_signals[c] & 0xFF);
    1dee:	f8 01       	movw	r30, r16
    1df0:	80 81       	ld	r24, Z
    1df2:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
   uint8_t c;
#ifdef _OPT_SRAM_
   Msg_Start_Routine(TX_SIGNALS_PKT_LENGTH);
#endif   
   PutChar(QT_SIGNALS);
   for(c=0; c<QT_NUM_CHANNELS; c++)
    1df6:	ce 15       	cp	r28, r14
    1df8:	df 05       	cpc	r29, r15
    1dfa:	a1 f7       	brne	.-24     	; 0x1de4 <Transmit_Signals+0x2a>
   {
      PutChar(qt_measure_data.channel_signals[c] >> 8);
      PutChar(qt_measure_data.channel_signals[c] & 0xFF);
   }
#ifdef _OPT_SRAM_
   Msg_End_Routine();
    1dfc:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <Msg_End_Routine>
#else
   Send_Message();
#endif 
}
    1e00:	df 91       	pop	r29
    1e02:	cf 91       	pop	r28
    1e04:	1f 91       	pop	r17
    1e06:	0f 91       	pop	r16
    1e08:	ff 90       	pop	r15
    1e0a:	ef 90       	pop	r14
    1e0c:	08 95       	ret

00001e0e <Transmit_Ref>:
/*! \brief Transmits the channel reference values to QTouch Studio
 * \note 
 */
void
Transmit_Ref (void)
{
    1e0e:	ef 92       	push	r14
    1e10:	ff 92       	push	r15
    1e12:	0f 93       	push	r16
    1e14:	1f 93       	push	r17
    1e16:	cf 93       	push	r28
    1e18:	df 93       	push	r29
   uint8_t c;
#ifdef _OPT_SRAM_
   Msg_Start_Routine(TX_REFERENCE_PKT_LENGTH);
    1e1a:	85 e4       	ldi	r24, 0x45	; 69
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <Msg_Start_Routine>
#endif   
   PutChar(QT_REFERENCES);
    1e22:	85 e2       	ldi	r24, 0x25	; 37
    1e24:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
    1e28:	cf e9       	ldi	r28, 0x9F	; 159
    1e2a:	d1 e2       	ldi	r29, 0x21	; 33

/*! \brief Transmits the channel reference values to QTouch Studio
 * \note 
 */
void
Transmit_Ref (void)
    1e2c:	0f 2e       	mov	r0, r31
    1e2e:	ff ed       	ldi	r31, 0xDF	; 223
    1e30:	ef 2e       	mov	r14, r31
    1e32:	f1 e2       	ldi	r31, 0x21	; 33
    1e34:	ff 2e       	mov	r15, r31
    1e36:	f0 2d       	mov	r31, r0
    1e38:	8e 01       	movw	r16, r28
   Msg_Start_Routine(TX_REFERENCE_PKT_LENGTH);
#endif   
   PutChar(QT_REFERENCES);
   for(c=0; c<QT_NUM_CHANNELS; c++)
   {
      PutChar(qt_measure_data.channel_references[c] >> 8);
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
    1e40:	22 96       	adiw	r28, 0x02	; 2
      PutChar(qt_measure_data.channel_references[c] & 0xFF);
    1e42:	f8 01       	movw	r30, r16
    1e44:	80 81       	ld	r24, Z
    1e46:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
   uint8_t c;
#ifdef _OPT_SRAM_
   Msg_Start_Routine(TX_REFERENCE_PKT_LENGTH);
#endif   
   PutChar(QT_REFERENCES);
   for(c=0; c<QT_NUM_CHANNELS; c++)
    1e4a:	ce 15       	cp	r28, r14
    1e4c:	df 05       	cpc	r29, r15
    1e4e:	a1 f7       	brne	.-24     	; 0x1e38 <Transmit_Ref+0x2a>
   {
      PutChar(qt_measure_data.channel_references[c] >> 8);
      PutChar(qt_measure_data.channel_references[c] & 0xFF);
   }
#ifdef _OPT_SRAM_
   Msg_End_Routine();
    1e50:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <Msg_End_Routine>
#else
   Send_Message();
#endif 
}
    1e54:	df 91       	pop	r29
    1e56:	cf 91       	pop	r28
    1e58:	1f 91       	pop	r17
    1e5a:	0f 91       	pop	r16
    1e5c:	ff 90       	pop	r15
    1e5e:	ef 90       	pop	r14
    1e60:	08 95       	ret

00001e62 <Transmit_Delta>:
/*! \brief Transmits the channel delta values to QTouch Studio
 * \note The value is equal to signal-reference
 */
void
Transmit_Delta (void)
{
    1e62:	cf 93       	push	r28
    1e64:	df 93       	push	r29
   uint8_t c;
   uint16_t delta;
#ifdef _OPT_SRAM_
   Msg_Start_Routine(TX_DELTA_PKT_LENGTH);
    1e66:	80 91 ea 21 	lds	r24, 0x21EA
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	88 0f       	add	r24, r24
    1e6e:	99 1f       	adc	r25, r25
    1e70:	05 96       	adiw	r24, 0x05	; 5
    1e72:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <Msg_Start_Routine>
#endif    
   PutChar(QT_DELTAS);
    1e76:	86 e2       	ldi	r24, 0x26	; 38
    1e78:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
   for (c=0; c < num_sensors; c++)
    1e7c:	80 91 ea 21 	lds	r24, 0x21EA
    1e80:	88 23       	and	r24, r24
    1e82:	81 f0       	breq	.+32     	; 0x1ea4 <Transmit_Delta+0x42>
    1e84:	c0 e0       	ldi	r28, 0x00	; 0
   {
      delta=qt_get_sensor_delta(c);
    1e86:	8c 2f       	mov	r24, r28
    1e88:	0e 94 12 03 	call	0x624	; 0x624 <qt_get_sensor_delta>
    1e8c:	d8 2f       	mov	r29, r24
      PutChar(delta >> 8);
    1e8e:	89 2f       	mov	r24, r25
    1e90:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
      PutChar(delta & 0xFF);
    1e94:	8d 2f       	mov	r24, r29
    1e96:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
   uint16_t delta;
#ifdef _OPT_SRAM_
   Msg_Start_Routine(TX_DELTA_PKT_LENGTH);
#endif    
   PutChar(QT_DELTAS);
   for (c=0; c < num_sensors; c++)
    1e9a:	cf 5f       	subi	r28, 0xFF	; 255
    1e9c:	80 91 ea 21 	lds	r24, 0x21EA
    1ea0:	c8 17       	cp	r28, r24
    1ea2:	88 f3       	brcs	.-30     	; 0x1e86 <Transmit_Delta+0x24>
      delta=qt_get_sensor_delta(c);
      PutChar(delta >> 8);
      PutChar(delta & 0xFF);
   }
#ifdef _OPT_SRAM_
   Msg_End_Routine();
    1ea4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <Msg_End_Routine>
#else
   Send_Message();
#endif
}
    1ea8:	df 91       	pop	r29
    1eaa:	cf 91       	pop	r28
    1eac:	08 95       	ret

00001eae <Transmit_State>:
/*! \brief Transmits the state values to QTouch Studio
 * \note On/Off condition for each sensor
 */
void
Transmit_State(void)
{
    1eae:	0f 93       	push	r16
    1eb0:	1f 93       	push	r17
    1eb2:	cf 93       	push	r28
    1eb4:	df 93       	push	r29
   uint8_t c;
#ifdef _OPT_SRAM_     
   Msg_Start_Routine(TX_STATE_PKT_LENGTH); 
    1eb6:	8f e0       	ldi	r24, 0x0F	; 15
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <Msg_Start_Routine>
#endif   
  PutChar(QT_STATES);                                    
    1ebe:	87 e2       	ldi	r24, 0x27	; 39
    1ec0:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
  PutChar(QT_NUM_CHANNELS);
    1ec4:	80 e2       	ldi	r24, 0x20	; 32
    1ec6:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
  PutChar(QT_MAX_NUM_ROTORS_SLIDERS);		                
    1eca:	84 e0       	ldi	r24, 0x04	; 4
    1ecc:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
    1ed0:	cf ed       	ldi	r28, 0xDF	; 223
    1ed2:	d1 e2       	ldi	r29, 0x21	; 33

/*! \brief Transmits the state values to QTouch Studio
 * \note On/Off condition for each sensor
 */
void
Transmit_State(void)
    1ed4:	03 ee       	ldi	r16, 0xE3	; 227
    1ed6:	11 e2       	ldi	r17, 0x21	; 33
  PutChar(QT_STATES);                                    
  PutChar(QT_NUM_CHANNELS);
  PutChar(QT_MAX_NUM_ROTORS_SLIDERS);		                
  for (c = 0; c < QT_NUM_SENSOR_STATE_BYTES; c++)
  {
    PutChar(qt_measure_data.qt_touch_status.sensor_states[c]);
    1ed8:	89 91       	ld	r24, Y+
    1eda:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
   Msg_Start_Routine(TX_STATE_PKT_LENGTH); 
#endif   
  PutChar(QT_STATES);                                    
  PutChar(QT_NUM_CHANNELS);
  PutChar(QT_MAX_NUM_ROTORS_SLIDERS);		                
  for (c = 0; c < QT_NUM_SENSOR_STATE_BYTES; c++)
    1ede:	c0 17       	cp	r28, r16
    1ee0:	d1 07       	cpc	r29, r17
    1ee2:	d1 f7       	brne	.-12     	; 0x1ed8 <Transmit_State+0x2a>
    1ee4:	c3 ee       	ldi	r28, 0xE3	; 227
    1ee6:	d1 e2       	ldi	r29, 0x21	; 33

/*! \brief Transmits the state values to QTouch Studio
 * \note On/Off condition for each sensor
 */
void
Transmit_State(void)
    1ee8:	07 ee       	ldi	r16, 0xE7	; 231
    1eea:	11 e2       	ldi	r17, 0x21	; 33
    PutChar(qt_measure_data.qt_touch_status.sensor_states[c]);
  }
#ifdef _ROTOR_SLIDER_   
  for (c=0; c<QT_MAX_NUM_ROTORS_SLIDERS; c++)
  {
    PutChar(qt_measure_data.qt_touch_status.rotor_slider_values[c]);
    1eec:	89 91       	ld	r24, Y+
    1eee:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
  for (c = 0; c < QT_NUM_SENSOR_STATE_BYTES; c++)
  {
    PutChar(qt_measure_data.qt_touch_status.sensor_states[c]);
  }
#ifdef _ROTOR_SLIDER_   
  for (c=0; c<QT_MAX_NUM_ROTORS_SLIDERS; c++)
    1ef2:	c0 17       	cp	r28, r16
    1ef4:	d1 07       	cpc	r29, r17
    1ef6:	d1 f7       	brne	.-12     	; 0x1eec <Transmit_State+0x3e>
  {
    PutChar(qt_measure_data.qt_touch_status.rotor_slider_values[c]);
  }
#endif    
#ifdef _OPT_SRAM_
   Msg_End_Routine();
    1ef8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <Msg_End_Routine>
#else
   Send_Message();
#endif
}
    1efc:	df 91       	pop	r29
    1efe:	cf 91       	pop	r28
    1f00:	1f 91       	pop	r17
    1f02:	0f 91       	pop	r16
    1f04:	08 95       	ret

00001f06 <Transmit_Burst_Lengths>:
/*! \brief Transmits the QMatrix burst length values to QTouch Studio
 * \note This value is available for each channel
 */
void
Transmit_Burst_Lengths(void)
{
    1f06:	0f 93       	push	r16
    1f08:	1f 93       	push	r17
    1f0a:	cf 93       	push	r28
    1f0c:	df 93       	push	r29
#ifdef _OPT_SRAM_     
   Msg_Start_Routine(TX_BURST_LEN_PKT_LENGTH);
    1f0e:	85 e2       	ldi	r24, 0x25	; 37
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <Msg_Start_Routine>
#endif 
   PutChar(QT_QM_BURST_LENGTHS);
    1f16:	88 e2       	ldi	r24, 0x28	; 40
    1f18:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
    1f1c:	c1 e0       	ldi	r28, 0x01	; 1
    1f1e:	d0 e2       	ldi	r29, 0x20	; 32
#ifdef _QMATRIX_
/*! \brief Transmits the QMatrix burst length values to QTouch Studio
 * \note This value is available for each channel
 */
void
Transmit_Burst_Lengths(void)
    1f20:	01 e2       	ldi	r16, 0x21	; 33
    1f22:	10 e2       	ldi	r17, 0x20	; 32
#endif 
   PutChar(QT_QM_BURST_LENGTHS);
   uint8_t c = 0;
   while( c < QT_NUM_CHANNELS )
   {
      PutChar(qt_burst_lengths[c++]);
    1f24:	89 91       	ld	r24, Y+
    1f26:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
#ifdef _OPT_SRAM_     
   Msg_Start_Routine(TX_BURST_LEN_PKT_LENGTH);
#endif 
   PutChar(QT_QM_BURST_LENGTHS);
   uint8_t c = 0;
   while( c < QT_NUM_CHANNELS )
    1f2a:	c0 17       	cp	r28, r16
    1f2c:	d1 07       	cpc	r29, r17
    1f2e:	d1 f7       	brne	.-12     	; 0x1f24 <Transmit_Burst_Lengths+0x1e>
   {
      PutChar(qt_burst_lengths[c++]);
   }
#ifdef _OPT_SRAM_
   Msg_End_Routine();
    1f30:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <Msg_End_Routine>
#else
   Send_Message();
#endif  
}
    1f34:	df 91       	pop	r29
    1f36:	cf 91       	pop	r28
    1f38:	1f 91       	pop	r17
    1f3a:	0f 91       	pop	r16
    1f3c:	08 95       	ret

00001f3e <QDebug_SendData>:
{
#if defined (_QDEBUG_TIME_STAMPS_)  
  uint8_t *pdata = NULL;
  uint16_t c = 0;
#endif  
   SequenceH = (SequenceH+1)&0x0F;
    1f3e:	20 91 b8 20 	lds	r18, 0x20B8
    1f42:	2f 5f       	subi	r18, 0xFF	; 255
    1f44:	2f 70       	andi	r18, 0x0F	; 15
    1f46:	20 93 b8 20 	sts	0x20B8, r18
 * \param  qt_lib_flags:Change flag from measure_sensors.
 * \note This function should be called in the main loop after
 *  measure_sensors to send the measured touch data
 */
void
QDebug_SendData (uint16_t qt_lib_flags)
    1f4a:	9c 01       	movw	r18, r24
    1f4c:	26 70       	andi	r18, 0x06	; 6
    1f4e:	33 27       	eor	r19, r19
  uint8_t *pdata = NULL;
  uint16_t c = 0;
#endif  
   SequenceH = (SequenceH+1)&0x0F;
   /* Test if measure_sensors has reported change in key states or rotor/slider positions */
   if((qt_lib_flags & QTLIB_STATUS_CHANGE) ||
    1f50:	23 2b       	or	r18, r19
    1f52:	49 f0       	breq	.+18     	; 0x1f66 <QDebug_SendData+0x28>
      (qt_lib_flags & QTLIB_ROTOR_SLIDER_POS_CHANGE) )
   {
      qgLibraryChanges |= (1<<SUBS_STATES);
    1f54:	20 91 ad 20 	lds	r18, 0x20AD
    1f58:	30 91 ae 20 	lds	r19, 0x20AE
    1f5c:	20 64       	ori	r18, 0x40	; 64
    1f5e:	20 93 ad 20 	sts	0x20AD, r18
    1f62:	30 93 ae 20 	sts	0x20AE, r19
   }
   /* Test if measure_sensors has reported change in at least one channel reference */
   if(qt_lib_flags & QTLIB_CHANNEL_REF_CHANGE)
    1f66:	83 ff       	sbrs	r24, 3
    1f68:	09 c0       	rjmp	.+18     	; 0x1f7c <QDebug_SendData+0x3e>
   {
      qgLibraryChanges |= (1<<SUBS_REF);
    1f6a:	80 91 ad 20 	lds	r24, 0x20AD
    1f6e:	90 91 ae 20 	lds	r25, 0x20AE
    1f72:	80 61       	ori	r24, 0x10	; 16
    1f74:	80 93 ad 20 	sts	0x20AD, r24
    1f78:	90 93 ae 20 	sts	0x20AE, r25
   }	
#if defined (_QDEBUG_TIME_STAMPS_)
   qgSubsAllways |= (1<<SUBS_TIMESTAMPS);
   qgSubsAllways |= (1<<SUBS_USER_DATA);
#endif
   delivery = qgSubsAllways | qgSubsOnce | (qgLibraryChanges & qgSubsChange);
    1f7c:	20 91 b1 20 	lds	r18, 0x20B1
    1f80:	30 91 b2 20 	lds	r19, 0x20B2
    1f84:	80 91 af 20 	lds	r24, 0x20AF
    1f88:	90 91 b0 20 	lds	r25, 0x20B0
    1f8c:	28 2b       	or	r18, r24
    1f8e:	39 2b       	or	r19, r25
    1f90:	40 91 b3 20 	lds	r20, 0x20B3
    1f94:	50 91 b4 20 	lds	r21, 0x20B4
    1f98:	80 91 ad 20 	lds	r24, 0x20AD
    1f9c:	90 91 ae 20 	lds	r25, 0x20AE
    1fa0:	84 23       	and	r24, r20
    1fa2:	95 23       	and	r25, r21
    1fa4:	82 2b       	or	r24, r18
    1fa6:	93 2b       	or	r25, r19
    1fa8:	80 93 b5 20 	sts	0x20B5, r24
    1fac:	90 93 b6 20 	sts	0x20B6, r25

   if (delivery & (1<<SUBS_SIGN_ON))
    1fb0:	80 fd       	sbrc	r24, 0
      Transmit_Sign_On();
    1fb2:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <Transmit_Sign_On>
   if (delivery & (1<<SUBS_GLOBAL_CONFIG))
    1fb6:	80 91 b5 20 	lds	r24, 0x20B5
    1fba:	81 fd       	sbrc	r24, 1
      Transmit_Global_Config();
    1fbc:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <Transmit_Global_Config>
   if (delivery & (1<<SUBS_SENSOR_CONFIG))
    1fc0:	80 91 b5 20 	lds	r24, 0x20B5
    1fc4:	82 fd       	sbrc	r24, 2
      Transmit_Sensor_Config();
    1fc6:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <Transmit_Sensor_Config>
   if (delivery & (1<<SUBS_SIGNALS))
    1fca:	80 91 b5 20 	lds	r24, 0x20B5
    1fce:	83 fd       	sbrc	r24, 3
      Transmit_Signals();
    1fd0:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <Transmit_Signals>
   if (delivery & (1<<SUBS_REF))
    1fd4:	80 91 b5 20 	lds	r24, 0x20B5
    1fd8:	84 fd       	sbrc	r24, 4
      Transmit_Ref();
    1fda:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <Transmit_Ref>
   if (delivery & (1<<SUBS_STATES))
    1fde:	80 91 b5 20 	lds	r24, 0x20B5
    1fe2:	86 fd       	sbrc	r24, 6
      Transmit_State();
    1fe4:	0e 94 57 0f 	call	0x1eae	; 0x1eae <Transmit_State>
   if (delivery & (1<<SUBS_DELTA))
    1fe8:	80 91 b5 20 	lds	r24, 0x20B5
    1fec:	85 fd       	sbrc	r24, 5
      Transmit_Delta();
    1fee:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <Transmit_Delta>
#ifdef _QMATRIX_
   if (delivery & (1<<SUBS_QM_BURST_LENGTHS))
    1ff2:	80 91 b5 20 	lds	r24, 0x20B5
    1ff6:	87 fd       	sbrc	r24, 7
      Transmit_Burst_Lengths();
    1ff8:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <Transmit_Burst_Lengths>
   if (delivery & (1<<SUBS_TIMESTAMPS))
      Transmit_Time_Stamps(qt_lib_flags);
   if (delivery & (1<<SUBS_USER_DATA))
      Transmit_QT_User_Data(pdata, c);
#endif   
   if (delivery == 0)
    1ffc:	80 91 b5 20 	lds	r24, 0x20B5
    2000:	90 91 b6 20 	lds	r25, 0x20B6
    2004:	89 2b       	or	r24, r25
    2006:	11 f4       	brne	.+4      	; 0x200c <QDebug_SendData+0xce>
      Transmit_Dummy();
    2008:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <Transmit_Dummy>
   // Reset masks until PC sends another request
   qgSubsOnce = 0;
    200c:	10 92 b1 20 	sts	0x20B1, r1
    2010:	10 92 b2 20 	sts	0x20B2, r1
   // Reset the changes we have just sent
   qgLibraryChanges &= ~delivery;	
    2014:	80 91 b5 20 	lds	r24, 0x20B5
    2018:	90 91 b6 20 	lds	r25, 0x20B6
    201c:	80 95       	com	r24
    201e:	90 95       	com	r25
    2020:	20 91 ad 20 	lds	r18, 0x20AD
    2024:	30 91 ae 20 	lds	r19, 0x20AE
    2028:	82 23       	and	r24, r18
    202a:	93 23       	and	r25, r19
    202c:	80 93 ad 20 	sts	0x20AD, r24
    2030:	90 93 ae 20 	sts	0x20AE, r25
    2034:	08 95       	ret

00002036 <Init_Buffers>:
/*! \brief Initialize the send and receive buffers.
 * \note Called from QDebug_Init.
 */
void
Init_Buffers (void)
{
    2036:	e9 ec       	ldi	r30, 0xC9	; 201
    2038:	f0 e2       	ldi	r31, 0x20	; 32

/*! \brief Initialize the send and receive buffers.
 * \note Called from QDebug_Init.
 */
void
Init_Buffers (void)
    203a:	83 e5       	ldi	r24, 0x53	; 83
    203c:	91 e2       	ldi	r25, 0x21	; 33
  for (i = 0; i < sizeof(RX_Buffer); i++)
    {
      #ifndef _OPT_SRAM_      	
         TX_Buffer[i] = 0;
      #endif
         RX_Buffer[i] = 0;
    203e:	11 92       	st	Z+, r1
void
Init_Buffers (void)
{
  int i;
  
  for (i = 0; i < sizeof(RX_Buffer); i++)
    2040:	e8 17       	cp	r30, r24
    2042:	f9 07       	cpc	r31, r25
    2044:	e1 f7       	brne	.-8      	; 0x203e <Init_Buffers+0x8>
         TX_Buffer[i] = 0;
      #endif
         RX_Buffer[i] = 0;
    }
#ifdef _OPT_SRAM_
   TX_index = 0;
    2046:	10 92 54 21 	sts	0x2154, r1
    204a:	10 92 55 21 	sts	0x2155, r1
#else   
   TX_Buffer[0] = MESSAGE_START;
   TX_index = 4; // Start to add data after MSG_START, MSG_SIZEH, MSG_SIZEL, and Sequence number
#endif   
   RX_index=0;
    204e:	10 92 c7 20 	sts	0x20C7, r1
    2052:	10 92 c8 20 	sts	0x20C8, r1
    2056:	08 95       	ret

00002058 <PutChar>:
 * \note Called from QDebug_Init.
 */
void
PutChar(uint8_t data)
{
  packet_crc ^= data;
    2058:	90 91 b7 20 	lds	r25, 0x20B7
    205c:	98 27       	eor	r25, r24
    205e:	90 93 b7 20 	sts	0x20B7, r25
  TX_Buffer[0] = data;  
    2062:	80 93 53 21 	sts	0x2153, r24
#if defined(QDEBUG_SPI)
  SPI_Send_Message();
//#elif defined(QDEBUG_TWI)
  //TWI_Send_Byte(data);
#elif defined(QDEBUG_SPI_BB)
  BitBangSPI_Send_Message();
    2066:	0e 94 40 0a 	call	0x1480	; 0x1480 <BitBangSPI_Send_Message>
    206a:	08 95       	ret

0000206c <PutInt>:
 * \param data: 16bit data to be sent.
 * \note Big Endian. TX_index is post incremented.
 */
void
PutInt(uint16_t data)
{
    206c:	cf 93       	push	r28
    206e:	c8 2f       	mov	r28, r24
  PutChar((uint8_t)(data >> 8));
    2070:	89 2f       	mov	r24, r25
    2072:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
  PutChar((uint8_t)data);
    2076:	8c 2f       	mov	r24, r28
    2078:	0e 94 2c 10 	call	0x2058	; 0x2058 <PutChar>
}
    207c:	cf 91       	pop	r28
    207e:	08 95       	ret

00002080 <GetChar>:
 * \note RX_index is post incremented.
 */
uint8_t
GetChar (void)
{
   return RX_Buffer[RX_index++];
    2080:	20 91 c7 20 	lds	r18, 0x20C7
    2084:	30 91 c8 20 	lds	r19, 0x20C8
    2088:	f9 01       	movw	r30, r18
    208a:	e7 53       	subi	r30, 0x37	; 55
    208c:	ff 4d       	sbci	r31, 0xDF	; 223
    208e:	80 81       	ld	r24, Z
    2090:	2f 5f       	subi	r18, 0xFF	; 255
    2092:	3f 4f       	sbci	r19, 0xFF	; 255
    2094:	20 93 c7 20 	sts	0x20C7, r18
    2098:	30 93 c8 20 	sts	0x20C8, r19
}
    209c:	08 95       	ret

0000209e <Receive_Message>:
    return 0;
  }
#endif

  // Check for token
  if (RX_Buffer[0] != 0x1B)
    209e:	80 91 c9 20 	lds	r24, 0x20C9
    20a2:	8b 31       	cpi	r24, 0x1B	; 27
    20a4:	41 f4       	brne	.+16     	; 0x20b6 <Receive_Message+0x18>
    return 0;

  // Yes, we have received a valid frame!
  RX_index = 4;			// Next GetChar() will get the command id
    20a6:	84 e0       	ldi	r24, 0x04	; 4
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	80 93 c7 20 	sts	0x20C7, r24
    20ae:	90 93 c8 20 	sts	0x20C8, r25
  return 1;
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	08 95       	ret
  }
#endif

  // Check for token
  if (RX_Buffer[0] != 0x1B)
    return 0;
    20b6:	80 e0       	ldi	r24, 0x00	; 0

  // Yes, we have received a valid frame!
  RX_index = 4;			// Next GetChar() will get the command id
  return 1;
}
    20b8:	08 95       	ret

000020ba <RxHandler>:
 * returns a false if the frame is complete
 * \note Used by SPI and TWI receive handlers.
 */
uint8_t
RxHandler (uint8_t c)
{
    20ba:	48 2f       	mov	r20, r24
  static uint8_t state = STATE_IDLE;
  uint8_t nextstate;
  uint8_t checksum;
  uint16_t i;

  switch (state)
    20bc:	90 91 ba 20 	lds	r25, 0x20BA
    20c0:	91 30       	cpi	r25, 0x01	; 1
    20c2:	69 f0       	breq	.+26     	; 0x20de <RxHandler+0x24>
    20c4:	30 f0       	brcs	.+12     	; 0x20d2 <RxHandler+0x18>
    20c6:	92 30       	cpi	r25, 0x02	; 2
    20c8:	91 f0       	breq	.+36     	; 0x20ee <RxHandler+0x34>
    20ca:	93 30       	cpi	r25, 0x03	; 3
    20cc:	09 f0       	breq	.+2      	; 0x20d0 <RxHandler+0x16>
    20ce:	53 c0       	rjmp	.+166    	; 0x2176 <RxHandler+0xbc>
    20d0:	26 c0       	rjmp	.+76     	; 0x211e <RxHandler+0x64>
    {
    case STATE_IDLE:
      if (c == 0x1B)
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	4b 31       	cpi	r20, 0x1B	; 27
    20d6:	09 f4       	brne	.+2      	; 0x20da <RxHandler+0x20>
    20d8:	53 c0       	rjmp	.+166    	; 0x2180 <RxHandler+0xc6>
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	51 c0       	rjmp	.+162    	; 0x2180 <RxHandler+0xc6>
      else
         nextstate = STATE_IDLE;
      break;

    case STATE_LENGTH1:
      RX_Buffer[1] = c;
    20de:	80 93 ca 20 	sts	0x20CA, r24
      length = c << 8;
    20e2:	10 92 bb 20 	sts	0x20BB, r1
    20e6:	80 93 bc 20 	sts	0x20BC, r24
      nextstate = STATE_LENGTH2;
    20ea:	82 e0       	ldi	r24, 0x02	; 2
      break;
    20ec:	49 c0       	rjmp	.+146    	; 0x2180 <RxHandler+0xc6>

    case STATE_LENGTH2:
      RX_Buffer[2] = c;
    20ee:	80 93 cb 20 	sts	0x20CB, r24
      length |= c;
    20f2:	20 91 bb 20 	lds	r18, 0x20BB
    20f6:	30 91 bc 20 	lds	r19, 0x20BC
    20fa:	c9 01       	movw	r24, r18
    20fc:	84 2b       	or	r24, r20
    20fe:	80 93 bb 20 	sts	0x20BB, r24
    2102:	90 93 bc 20 	sts	0x20BC, r25
      if ((length < 4) || (length > 270))
    2106:	04 97       	sbiw	r24, 0x04	; 4
    2108:	8b 30       	cpi	r24, 0x0B	; 11
    210a:	91 40       	sbci	r25, 0x01	; 1
    210c:	b0 f5       	brcc	.+108    	; 0x217a <RxHandler+0xc0>
         // Illegal length, discard it
         nextstate = STATE_IDLE;
      }
      else
      {
        received = 3;
    210e:	83 e0       	ldi	r24, 0x03	; 3
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	80 93 bd 20 	sts	0x20BD, r24
    2116:	90 93 be 20 	sts	0x20BE, r25
        nextstate = STATE_DATA;
    211a:	83 e0       	ldi	r24, 0x03	; 3
    211c:	31 c0       	rjmp	.+98     	; 0x2180 <RxHandler+0xc6>
      }
      break;

    case STATE_DATA:
      RX_Buffer[received] = c;
    211e:	20 91 bd 20 	lds	r18, 0x20BD
    2122:	30 91 be 20 	lds	r19, 0x20BE
    2126:	f9 01       	movw	r30, r18
    2128:	e7 53       	subi	r30, 0x37	; 55
    212a:	ff 4d       	sbci	r31, 0xDF	; 223
    212c:	80 83       	st	Z, r24

      if (received == length)
    212e:	80 91 bb 20 	lds	r24, 0x20BB
    2132:	90 91 bc 20 	lds	r25, 0x20BC
    2136:	28 17       	cp	r18, r24
    2138:	39 07       	cpc	r19, r25
    213a:	a9 f4       	brne	.+42     	; 0x2166 <RxHandler+0xac>
      {
        // This is the CRC byte
        checksum = 0;
        for (i = 1; i <= length; i++)
    213c:	21 15       	cp	r18, r1
    213e:	31 05       	cpc	r19, r1
    2140:	69 f0       	breq	.+26     	; 0x215c <RxHandler+0xa2>
    2142:	ea ec       	ldi	r30, 0xCA	; 202
    2144:	f0 e2       	ldi	r31, 0x20	; 32
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	40 e0       	ldi	r20, 0x00	; 0
        checksum ^= RX_Buffer[i];
    214c:	51 91       	ld	r21, Z+
    214e:	45 27       	eor	r20, r21

      if (received == length)
      {
        // This is the CRC byte
        checksum = 0;
        for (i = 1; i <= length; i++)
    2150:	01 96       	adiw	r24, 0x01	; 1
    2152:	28 17       	cp	r18, r24
    2154:	39 07       	cpc	r19, r25
    2156:	d0 f7       	brcc	.-12     	; 0x214c <RxHandler+0x92>
        checksum ^= RX_Buffer[i];
			 
        if (checksum == 0)
    2158:	41 11       	cpse	r20, r1
    215a:	11 c0       	rjmp	.+34     	; 0x217e <RxHandler+0xc4>
        {
          // Valid frame
          RX_Buffer[0] = 0x1B;
    215c:	8b e1       	ldi	r24, 0x1B	; 27
    215e:	80 93 c9 20 	sts	0x20C9, r24
        }
      
        nextstate = STATE_IDLE;
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	0d c0       	rjmp	.+26     	; 0x2180 <RxHandler+0xc6>
        break;
      }

      nextstate = STATE_DATA;
      received++;;
    2166:	2f 5f       	subi	r18, 0xFF	; 255
    2168:	3f 4f       	sbci	r19, 0xFF	; 255
    216a:	20 93 bd 20 	sts	0x20BD, r18
    216e:	30 93 be 20 	sts	0x20BE, r19
      
        nextstate = STATE_IDLE;
        break;
      }

      nextstate = STATE_DATA;
    2172:	83 e0       	ldi	r24, 0x03	; 3
      received++;;
      break;
    2174:	05 c0       	rjmp	.+10     	; 0x2180 <RxHandler+0xc6>
	  
      default:
        nextstate = STATE_IDLE;
    2176:	80 e0       	ldi	r24, 0x00	; 0
    2178:	03 c0       	rjmp	.+6      	; 0x2180 <RxHandler+0xc6>
      RX_Buffer[2] = c;
      length |= c;
      if ((length < 4) || (length > 270))
      {
         // Illegal length, discard it
         nextstate = STATE_IDLE;
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	01 c0       	rjmp	.+2      	; 0x2180 <RxHandler+0xc6>
        {
          // Valid frame
          RX_Buffer[0] = 0x1B;
        }
      
        nextstate = STATE_IDLE;
    217e:	80 e0       	ldi	r24, 0x00	; 0
	  
      default:
        nextstate = STATE_IDLE;
   }

 state = nextstate;
    2180:	80 93 ba 20 	sts	0x20BA, r24

 return state;
}
    2184:	08 95       	ret

00002186 <__mulsi3>:
    2186:	db 01       	movw	r26, r22
    2188:	8f 93       	push	r24
    218a:	9f 93       	push	r25
    218c:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <__muluhisi3>
    2190:	bf 91       	pop	r27
    2192:	af 91       	pop	r26
    2194:	a2 9f       	mul	r26, r18
    2196:	80 0d       	add	r24, r0
    2198:	91 1d       	adc	r25, r1
    219a:	a3 9f       	mul	r26, r19
    219c:	90 0d       	add	r25, r0
    219e:	b2 9f       	mul	r27, r18
    21a0:	90 0d       	add	r25, r0
    21a2:	11 24       	eor	r1, r1
    21a4:	08 95       	ret

000021a6 <__muluhisi3>:
    21a6:	0e 94 0f 11 	call	0x221e	; 0x221e <__umulhisi3>
    21aa:	a5 9f       	mul	r26, r21
    21ac:	90 0d       	add	r25, r0
    21ae:	b4 9f       	mul	r27, r20
    21b0:	90 0d       	add	r25, r0
    21b2:	a4 9f       	mul	r26, r20
    21b4:	80 0d       	add	r24, r0
    21b6:	91 1d       	adc	r25, r1
    21b8:	11 24       	eor	r1, r1
    21ba:	08 95       	ret

000021bc <__prologue_saves__>:
    21bc:	2f 92       	push	r2
    21be:	3f 92       	push	r3
    21c0:	4f 92       	push	r4
    21c2:	5f 92       	push	r5
    21c4:	6f 92       	push	r6
    21c6:	7f 92       	push	r7
    21c8:	8f 92       	push	r8
    21ca:	9f 92       	push	r9
    21cc:	af 92       	push	r10
    21ce:	bf 92       	push	r11
    21d0:	cf 92       	push	r12
    21d2:	df 92       	push	r13
    21d4:	ef 92       	push	r14
    21d6:	ff 92       	push	r15
    21d8:	0f 93       	push	r16
    21da:	1f 93       	push	r17
    21dc:	cf 93       	push	r28
    21de:	df 93       	push	r29
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
    21e4:	ca 1b       	sub	r28, r26
    21e6:	db 0b       	sbc	r29, r27
    21e8:	cd bf       	out	0x3d, r28	; 61
    21ea:	de bf       	out	0x3e, r29	; 62
    21ec:	09 94       	ijmp

000021ee <__epilogue_restores__>:
    21ee:	2a 88       	ldd	r2, Y+18	; 0x12
    21f0:	39 88       	ldd	r3, Y+17	; 0x11
    21f2:	48 88       	ldd	r4, Y+16	; 0x10
    21f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    21f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    21f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    21fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    21fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    21fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    2200:	b9 84       	ldd	r11, Y+9	; 0x09
    2202:	c8 84       	ldd	r12, Y+8	; 0x08
    2204:	df 80       	ldd	r13, Y+7	; 0x07
    2206:	ee 80       	ldd	r14, Y+6	; 0x06
    2208:	fd 80       	ldd	r15, Y+5	; 0x05
    220a:	0c 81       	ldd	r16, Y+4	; 0x04
    220c:	1b 81       	ldd	r17, Y+3	; 0x03
    220e:	aa 81       	ldd	r26, Y+2	; 0x02
    2210:	b9 81       	ldd	r27, Y+1	; 0x01
    2212:	ce 0f       	add	r28, r30
    2214:	d1 1d       	adc	r29, r1
    2216:	cd bf       	out	0x3d, r28	; 61
    2218:	de bf       	out	0x3e, r29	; 62
    221a:	ed 01       	movw	r28, r26
    221c:	08 95       	ret

0000221e <__umulhisi3>:
    221e:	a2 9f       	mul	r26, r18
    2220:	b0 01       	movw	r22, r0
    2222:	b3 9f       	mul	r27, r19
    2224:	c0 01       	movw	r24, r0
    2226:	a3 9f       	mul	r26, r19
    2228:	01 d0       	rcall	.+2      	; 0x222c <__umulhisi3+0xe>
    222a:	b2 9f       	mul	r27, r18
    222c:	70 0d       	add	r23, r0
    222e:	81 1d       	adc	r24, r1
    2230:	11 24       	eor	r1, r1
    2232:	91 1d       	adc	r25, r1
    2234:	08 95       	ret

00002236 <_exit>:
    2236:	f8 94       	cli

00002238 <__stop_program>:
    2238:	ff cf       	rjmp	.-2      	; 0x2238 <__stop_program>
